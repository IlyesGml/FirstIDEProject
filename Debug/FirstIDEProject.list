
FirstIDEProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006728  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bc0  080068b8  080068b8  000078b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009478  08009478  0000b05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009478  08009478  0000a478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009480  08009480  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009480  08009480  0000a480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009484  08009484  0000a484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08009488  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b05c  2**0
                  CONTENTS
 10 .bss          00000850  2000005c  2000005c  0000b05c  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  200008ac  200008ac  0000b05c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000177f3  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000324d  00000000  00000000  0002287f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001638  00000000  00000000  00025ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001155  00000000  00000000  00027108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002448b  00000000  00000000  0002825d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c728  00000000  00000000  0004c6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3f09  00000000  00000000  00068e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013cd19  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006348  00000000  00000000  0013cd5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001430a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068a0 	.word	0x080068a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080068a0 	.word	0x080068a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <interfaceT1_allume>:
//Definitions de variables publiques:
//pas de variables publiques

//Definitions de fonctions publiques:
void interfaceT1_allume(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  piloteIOT1_metLaSortieA(INTERFACET1_VALEUR_POUR_ALLUMER);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 f835 	bl	8000610 <piloteIOT1_metLaSortieA>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}

080005aa <interfaceT1_eteint>:

void interfaceT1_eteint(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0
  piloteIOT1_metLaSortieA(INTERFACET1_VALEUR_POUR_ETEINDRE);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f82e 	bl	8000610 <piloteIOT1_metLaSortieA>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <Pilote_CS0_EPAPER_metAUn>:

/**
 * @brief Met la broche CS_EPAPER � l'�tat haut (d�sactive l'e-paper)
 */
void Pilote_CS0_EPAPER_metAUn(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c2:	4802      	ldr	r0, [pc, #8]	@ (80005cc <Pilote_CS0_EPAPER_metAUn+0x14>)
 80005c4:	f001 fdc0 	bl	8002148 <HAL_GPIO_WritePin>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40020800 	.word	0x40020800

080005d0 <Pilote_CS0_EPAPER_metAZero>:

/**
 * @brief Met la broche CS_EPAPER � l'�tat bas (active l'e-paper)
 */
void Pilote_CS0_EPAPER_metAZero(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005da:	4802      	ldr	r0, [pc, #8]	@ (80005e4 <Pilote_CS0_EPAPER_metAZero+0x14>)
 80005dc:	f001 fdb4 	bl	8002148 <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40020800 	.word	0x40020800

080005e8 <HAL_TIM_PeriodElapsedCallback>:
//Definitions de variables publiques:
void (*piloteTimer6Up_execute)(void);

//Definitions de fonctions publiques:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  if (htim == &htim6)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a05      	ldr	r2, [pc, #20]	@ (8000608 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d102      	bne.n	80005fe <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    piloteTimer6Up_execute();
 80005f8:	4b04      	ldr	r3, [pc, #16]	@ (800060c <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4798      	blx	r3
  }


}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200001e8 	.word	0x200001e8
 800060c:	2000007c 	.word	0x2000007c

08000610 <piloteIOT1_metLaSortieA>:
//Definitions de variables publiques:
// pas de variables publiques

//Definitions de fonctions publiques:
void piloteIOT1_metLaSortieA(unsigned char Valeur)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PILOTEIOT1_PORT, PILOTEIOT1_SORTIE, (GPIO_PinState)Valeur);  
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	461a      	mov	r2, r3
 800061e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000622:	4803      	ldr	r0, [pc, #12]	@ (8000630 <piloteIOT1_metLaSortieA+0x20>)
 8000624:	f001 fd90 	bl	8002148 <HAL_GPIO_WritePin>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40020c00 	.word	0x40020c00

08000634 <EPD_352_SendCommand>:
 * @brief Send Command to the EPD 3.52" display through SPI.
 * 
 * @param Reg data to be sent as command.
 */
void EPD_352_SendCommand(uint8_t Reg)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DAT_COM_GPIO_Port, DAT_COM_Pin, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2102      	movs	r1, #2
 8000642:	4809      	ldr	r0, [pc, #36]	@ (8000668 <EPD_352_SendCommand+0x34>)
 8000644:	f001 fd80 	bl	8002148 <HAL_GPIO_WritePin>
  Pilote_CS0_EPAPER_metAZero(); // Set CS low to select the device
 8000648:	f7ff ffc2 	bl	80005d0 <Pilote_CS0_EPAPER_metAZero>
  //HAL_SPI_Transmit(&hspi2, &Reg, 1, 1000);
  HAL_SPI_Transmit(&hspi1, &Reg, 1, 1000);
 800064c:	1df9      	adds	r1, r7, #7
 800064e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000652:	2201      	movs	r2, #1
 8000654:	4805      	ldr	r0, [pc, #20]	@ (800066c <EPD_352_SendCommand+0x38>)
 8000656:	f003 fc2e 	bl	8003eb6 <HAL_SPI_Transmit>
  Pilote_CS0_EPAPER_metAUn(); // Set CS high to deselect the device
 800065a:	f7ff ffad 	bl	80005b8 <Pilote_CS0_EPAPER_metAUn>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40020800 	.word	0x40020800
 800066c:	200000f0 	.word	0x200000f0

08000670 <EPD_352_SendData>:
 * @brief Send Data to the EPD 3.52" display through SPI.
 * 
 * @param Data data to be sent.
 */
void EPD_352_SendData(uint8_t Data)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DAT_COM_GPIO_Port, DAT_COM_Pin, 1);
 800067a:	2201      	movs	r2, #1
 800067c:	2102      	movs	r1, #2
 800067e:	4809      	ldr	r0, [pc, #36]	@ (80006a4 <EPD_352_SendData+0x34>)
 8000680:	f001 fd62 	bl	8002148 <HAL_GPIO_WritePin>
  Pilote_CS0_EPAPER_metAZero(); // Set CS low to select the device
 8000684:	f7ff ffa4 	bl	80005d0 <Pilote_CS0_EPAPER_metAZero>
  //HAL_SPI_Transmit(&hspi2, &Data, 1, 1000);
  HAL_SPI_Transmit(&hspi1, &Data, 1, 1000);
 8000688:	1df9      	adds	r1, r7, #7
 800068a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068e:	2201      	movs	r2, #1
 8000690:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <EPD_352_SendData+0x38>)
 8000692:	f003 fc10 	bl	8003eb6 <HAL_SPI_Transmit>
  Pilote_CS0_EPAPER_metAUn(); // Set CS high to deselect the device
 8000696:	f7ff ff8f 	bl	80005b8 <Pilote_CS0_EPAPER_metAUn>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40020800 	.word	0x40020800
 80006a8:	200000f0 	.word	0x200000f0

080006ac <EPD_352_refresh>:
/**
 * @brief 
 * 
 */
void EPD_352_refresh(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
    uint8_t busy = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	71fb      	strb	r3, [r7, #7]
    EPD_352_SendCommand(0x17);
 80006b6:	2017      	movs	r0, #23
 80006b8:	f7ff ffbc 	bl	8000634 <EPD_352_SendCommand>
    EPD_352_SendData(0xA5);
 80006bc:	20a5      	movs	r0, #165	@ 0xa5
 80006be:	f7ff ffd7 	bl	8000670 <EPD_352_SendData>
    while(!busy)
 80006c2:	e005      	b.n	80006d0 <EPD_352_refresh+0x24>
    busy = HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin);
 80006c4:	2140      	movs	r1, #64	@ 0x40
 80006c6:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <EPD_352_refresh+0x38>)
 80006c8:	f001 fd26 	bl	8002118 <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	71fb      	strb	r3, [r7, #7]
    while(!busy)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d0f6      	beq.n	80006c4 <EPD_352_refresh+0x18>
    HAL_Delay(200);
 80006d6:	20c8      	movs	r0, #200	@ 0xc8
 80006d8:	f001 fa4c 	bl	8001b74 <HAL_Delay>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40020800 	.word	0x40020800

080006e8 <EPD_352_lut_GC>:
/**
 * @brief
 *
 */
void EPD_352_lut_GC(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
    uint8_t count;
    EPD_352_SendCommand(0x20); // Set vcom
 80006ee:	2020      	movs	r0, #32
 80006f0:	f7ff ffa0 	bl	8000634 <EPD_352_SendCommand>
    for (count = 0; count< 56; count++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	e008      	b.n	800070c <EPD_352_lut_GC+0x24>
    {
        EPD_352_SendData(EPD_3IN52_lut_R20_GC[count]);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4a41      	ldr	r2, [pc, #260]	@ (8000804 <EPD_352_lut_GC+0x11c>)
 80006fe:	5cd3      	ldrb	r3, [r2, r3]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ffb5 	bl	8000670 <EPD_352_SendData>
    for (count = 0; count< 56; count++)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	3301      	adds	r3, #1
 800070a:	71fb      	strb	r3, [r7, #7]
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b37      	cmp	r3, #55	@ 0x37
 8000710:	d9f3      	bls.n	80006fa <EPD_352_lut_GC+0x12>
    }
    EPD_352_SendCommand(0x21); // red not use
 8000712:	2021      	movs	r0, #33	@ 0x21
 8000714:	f7ff ff8e 	bl	8000634 <EPD_352_SendCommand>
    for (count = 0; count< 42; count++)
 8000718:	2300      	movs	r3, #0
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	e008      	b.n	8000730 <EPD_352_lut_GC+0x48>
    {
        EPD_352_SendData(EPD_3IN52_lut_R21_GC[count]);
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	4a39      	ldr	r2, [pc, #228]	@ (8000808 <EPD_352_lut_GC+0x120>)
 8000722:	5cd3      	ldrb	r3, [r2, r3]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ffa3 	bl	8000670 <EPD_352_SendData>
    for (count = 0; count< 42; count++)
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	3301      	adds	r3, #1
 800072e:	71fb      	strb	r3, [r7, #7]
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2b29      	cmp	r3, #41	@ 0x29
 8000734:	d9f3      	bls.n	800071e <EPD_352_lut_GC+0x36>
    }
    EPD_352_SendCommand(0x24); // Set bb b
 8000736:	2024      	movs	r0, #36	@ 0x24
 8000738:	f7ff ff7c 	bl	8000634 <EPD_352_SendCommand>
    for (count = 0; count< 42; count++)
 800073c:	2300      	movs	r3, #0
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	e008      	b.n	8000754 <EPD_352_lut_GC+0x6c>
    {
        EPD_352_SendData(EPD_3IN52_lut_R24_GC[count]);
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	4a31      	ldr	r2, [pc, #196]	@ (800080c <EPD_352_lut_GC+0x124>)
 8000746:	5cd3      	ldrb	r3, [r2, r3]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff91 	bl	8000670 <EPD_352_SendData>
    for (count = 0; count< 42; count++)
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	3301      	adds	r3, #1
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b29      	cmp	r3, #41	@ 0x29
 8000758:	d9f3      	bls.n	8000742 <EPD_352_lut_GC+0x5a>
    }
    if (EPD_352_FLAG == 0)
 800075a:	4b2d      	ldr	r3, [pc, #180]	@ (8000810 <EPD_352_lut_GC+0x128>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d127      	bne.n	80007b2 <EPD_352_lut_GC+0xca>
    {
        EPD_352_SendCommand(0x22); // Set bw r
 8000762:	2022      	movs	r0, #34	@ 0x22
 8000764:	f7ff ff66 	bl	8000634 <EPD_352_SendCommand>
        for (count = 0; count< 56; count++)
 8000768:	2300      	movs	r3, #0
 800076a:	71fb      	strb	r3, [r7, #7]
 800076c:	e008      	b.n	8000780 <EPD_352_lut_GC+0x98>
        {
            EPD_352_SendData(EPD_3IN52_lut_R22_GC[count]);
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	4a28      	ldr	r2, [pc, #160]	@ (8000814 <EPD_352_lut_GC+0x12c>)
 8000772:	5cd3      	ldrb	r3, [r2, r3]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff7b 	bl	8000670 <EPD_352_SendData>
        for (count = 0; count< 56; count++)
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	3301      	adds	r3, #1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b37      	cmp	r3, #55	@ 0x37
 8000784:	d9f3      	bls.n	800076e <EPD_352_lut_GC+0x86>
        }
        EPD_352_SendCommand(0x23); // Set wb w
 8000786:	2023      	movs	r0, #35	@ 0x23
 8000788:	f7ff ff54 	bl	8000634 <EPD_352_SendCommand>
        for (count = 0; count< 42; count++)
 800078c:	2300      	movs	r3, #0
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	e008      	b.n	80007a4 <EPD_352_lut_GC+0xbc>
        {
            EPD_352_SendData(EPD_3IN52_lut_R23_GC[count]);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4a20      	ldr	r2, [pc, #128]	@ (8000818 <EPD_352_lut_GC+0x130>)
 8000796:	5cd3      	ldrb	r3, [r2, r3]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff69 	bl	8000670 <EPD_352_SendData>
        for (count = 0; count< 42; count++)
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	3301      	adds	r3, #1
 80007a2:	71fb      	strb	r3, [r7, #7]
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2b29      	cmp	r3, #41	@ 0x29
 80007a8:	d9f3      	bls.n	8000792 <EPD_352_lut_GC+0xaa>
        }
        EPD_352_FLAG = 1; // Set flag to indicate that GC LUT has been loaded
 80007aa:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <EPD_352_lut_GC+0x128>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
        for (count = 0; count< 56; count++)
        {
            EPD_352_SendData(EPD_3IN52_lut_R22_GC[count]);
        }
    }
}
 80007b0:	e023      	b.n	80007fa <EPD_352_lut_GC+0x112>
        EPD_352_SendCommand(0x22); // Set bw r
 80007b2:	2022      	movs	r0, #34	@ 0x22
 80007b4:	f7ff ff3e 	bl	8000634 <EPD_352_SendCommand>
        for (count = 0; count< 42; count++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	71fb      	strb	r3, [r7, #7]
 80007bc:	e008      	b.n	80007d0 <EPD_352_lut_GC+0xe8>
            EPD_352_SendData(EPD_3IN52_lut_R23_GC[count]);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	4a15      	ldr	r2, [pc, #84]	@ (8000818 <EPD_352_lut_GC+0x130>)
 80007c2:	5cd3      	ldrb	r3, [r2, r3]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff53 	bl	8000670 <EPD_352_SendData>
        for (count = 0; count< 42; count++)
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	3301      	adds	r3, #1
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	2b29      	cmp	r3, #41	@ 0x29
 80007d4:	d9f3      	bls.n	80007be <EPD_352_lut_GC+0xd6>
        EPD_352_SendCommand(0x23); // Set wb w
 80007d6:	2023      	movs	r0, #35	@ 0x23
 80007d8:	f7ff ff2c 	bl	8000634 <EPD_352_SendCommand>
        for (count = 0; count< 56; count++)
 80007dc:	2300      	movs	r3, #0
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	e008      	b.n	80007f4 <EPD_352_lut_GC+0x10c>
            EPD_352_SendData(EPD_3IN52_lut_R22_GC[count]);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000814 <EPD_352_lut_GC+0x12c>)
 80007e6:	5cd3      	ldrb	r3, [r2, r3]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff41 	bl	8000670 <EPD_352_SendData>
        for (count = 0; count< 56; count++)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	3301      	adds	r3, #1
 80007f2:	71fb      	strb	r3, [r7, #7]
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b37      	cmp	r3, #55	@ 0x37
 80007f8:	d9f3      	bls.n	80007e2 <EPD_352_lut_GC+0xfa>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	080068f4 	.word	0x080068f4
 8000808:	0800692c 	.word	0x0800692c
 800080c:	080069c8 	.word	0x080069c8
 8000810:	20000080 	.word	0x20000080
 8000814:	08006958 	.word	0x08006958
 8000818:	08006990 	.word	0x08006990

0800081c <EPD_352_Init>:
/**
 * @brief 
 * 
 */
void EPD_352_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    EPD_352_FLAG = 0;
 8000820:	4b2d      	ldr	r3, [pc, #180]	@ (80008d8 <EPD_352_Init+0xbc>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
    EPD_352_Reset(); // Reset the display
 8000826:	f000 f95d 	bl	8000ae4 <EPD_352_Reset>

    //HAL_GPIO_WritePin(SPI1_SCK_GPIO_Port,SPI1_SCK_Pin,GPIO_PIN_RESET);
    EPD_352_SendCommand(0x00); // SPI INIT
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff ff02 	bl	8000634 <EPD_352_SendCommand>
    EPD_352_SendCommand(0x00); // Panel setting
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff feff 	bl	8000634 <EPD_352_SendCommand>
    EPD_352_SendData(0xFF); // 0x0F: 1/7.5, 0x0B: 1/7, 0x0A: 1/6.5, 0x09: 1/6
 8000836:	20ff      	movs	r0, #255	@ 0xff
 8000838:	f7ff ff1a 	bl	8000670 <EPD_352_SendData>
    EPD_352_SendData(0x01); // 0x0F: 1/7.5, 0x0B: 1/7, 0x0A: 1/6.5, 0x09: 1/6
 800083c:	2001      	movs	r0, #1
 800083e:	f7ff ff17 	bl	8000670 <EPD_352_SendData>

    EPD_352_SendCommand(0x01); // Power setting
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff fef6 	bl	8000634 <EPD_352_SendCommand>
    EPD_352_SendData(0x03); // 0x03: VDS_EN, VDG_EN, VCOM_EN
 8000848:	2003      	movs	r0, #3
 800084a:	f7ff ff11 	bl	8000670 <EPD_352_SendData>
    EPD_352_SendData(0x10);            //  x x x VCOM_SLWE VGH[3:0]   VGH=20V, VGL=-20V	
 800084e:	2010      	movs	r0, #16
 8000850:	f7ff ff0e 	bl	8000670 <EPD_352_SendData>
    EPD_352_SendData(0x3F);            //  x x VSH[5:0]	VSH = 15V
 8000854:	203f      	movs	r0, #63	@ 0x3f
 8000856:	f7ff ff0b 	bl	8000670 <EPD_352_SendData>
    EPD_352_SendData(0x3F);            //  x x VSL[5:0]	VSL=-15V
 800085a:	203f      	movs	r0, #63	@ 0x3f
 800085c:	f7ff ff08 	bl	8000670 <EPD_352_SendData>
    EPD_352_SendData(0x03);            //  OPTEN VDHR[6:0]  VHDR=6.4V
 8000860:	2003      	movs	r0, #3
 8000862:	f7ff ff05 	bl	8000670 <EPD_352_SendData>
                                       // T_VDS_OFF[1:0] 00=1 frame; 01=2 frame; 10=3 frame; 11=4 frame
    EPD_352_SendCommand(0x06);         // booster soft start   BTST 
 8000866:	2006      	movs	r0, #6
 8000868:	f7ff fee4 	bl	8000634 <EPD_352_SendCommand>
    EPD_352_SendData(0x37);            //  BT_PHA[7:0]  	
 800086c:	2037      	movs	r0, #55	@ 0x37
 800086e:	f7ff feff 	bl	8000670 <EPD_352_SendData>
    EPD_352_SendData(0x3D);            //  BT_PHB[7:0]	
 8000872:	203d      	movs	r0, #61	@ 0x3d
 8000874:	f7ff fefc 	bl	8000670 <EPD_352_SendData>
    EPD_352_SendData(0x3D);            //  x x BT_PHC[5:0]	
 8000878:	203d      	movs	r0, #61	@ 0x3d
 800087a:	f7ff fef9 	bl	8000670 <EPD_352_SendData>

    EPD_352_SendCommand(0x60);         // TCON setting			TCON 
 800087e:	2060      	movs	r0, #96	@ 0x60
 8000880:	f7ff fed8 	bl	8000634 <EPD_352_SendCommand>
    EPD_352_SendData(0x22);            // S2G[3:0] G2S[3:0]   non-overlap = 12		
 8000884:	2022      	movs	r0, #34	@ 0x22
 8000886:	f7ff fef3 	bl	8000670 <EPD_352_SendData>

    EPD_352_SendCommand(0x82);         // VCOM_DC setting		VDCS 
 800088a:	2082      	movs	r0, #130	@ 0x82
 800088c:	f7ff fed2 	bl	8000634 <EPD_352_SendCommand>
    EPD_352_SendData(0x07);            // x  VDCS[6:0]	VCOM_DC value= -1.9v    00~3f,0x12=-1.9v
 8000890:	2007      	movs	r0, #7
 8000892:	f7ff feed 	bl	8000670 <EPD_352_SendData>

    EPD_352_SendCommand(0x30);			 
 8000896:	2030      	movs	r0, #48	@ 0x30
 8000898:	f7ff fecc 	bl	8000634 <EPD_352_SendCommand>
    EPD_352_SendData(0x09);		
 800089c:	2009      	movs	r0, #9
 800089e:	f7ff fee7 	bl	8000670 <EPD_352_SendData>

    EPD_352_SendCommand(0xe3);         // power saving			PWS 
 80008a2:	20e3      	movs	r0, #227	@ 0xe3
 80008a4:	f7ff fec6 	bl	8000634 <EPD_352_SendCommand>
    EPD_352_SendData(0x88);            // VCOM_W[3:0] SD_W[3:0]
 80008a8:	2088      	movs	r0, #136	@ 0x88
 80008aa:	f7ff fee1 	bl	8000670 <EPD_352_SendData>

    EPD_352_SendCommand(0x61);         // resoultion setting 
 80008ae:	2061      	movs	r0, #97	@ 0x61
 80008b0:	f7ff fec0 	bl	8000634 <EPD_352_SendCommand>
    EPD_352_SendData(0xf0);            //  HRES[7:3] 0 0 0	
 80008b4:	20f0      	movs	r0, #240	@ 0xf0
 80008b6:	f7ff fedb 	bl	8000670 <EPD_352_SendData>
    EPD_352_SendData(0x01);            //  x x x x x x x VRES[8]	
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff fed8 	bl	8000670 <EPD_352_SendData>
    EPD_352_SendData(0x68);            //  VRES[7:0]
 80008c0:	2068      	movs	r0, #104	@ 0x68
 80008c2:	f7ff fed5 	bl	8000670 <EPD_352_SendData>

    EPD_352_SendCommand(0x50);			
 80008c6:	2050      	movs	r0, #80	@ 0x50
 80008c8:	f7ff feb4 	bl	8000634 <EPD_352_SendCommand>
    EPD_352_SendData(0xB7);	
 80008cc:	20b7      	movs	r0, #183	@ 0xb7
 80008ce:	f7ff fecf 	bl	8000670 <EPD_352_SendData>
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000080 	.word	0x20000080

080008dc <EPD_352_display>:
 * @brief 
 * 
 * @param picData 
 */
void EPD_352_display(uint8_t* picData)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
    uint16_t i;
    EPD_352_SendCommand(0x13);		     //Transfer new data
 80008e4:	2013      	movs	r0, #19
 80008e6:	f7ff fea5 	bl	8000634 <EPD_352_SendCommand>
    for(i=0;i<(EPD_3IN52_WIDTH*EPD_3IN52_HEIGHT/8);i++)	     
 80008ea:	2300      	movs	r3, #0
 80008ec:	81fb      	strh	r3, [r7, #14]
 80008ee:	e00a      	b.n	8000906 <EPD_352_display+0x2a>
    {
        EPD_352_SendData(*picData);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff febb 	bl	8000670 <EPD_352_SendData>
        picData++;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3301      	adds	r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
    for(i=0;i<(EPD_3IN52_WIDTH*EPD_3IN52_HEIGHT/8);i++)	     
 8000900:	89fb      	ldrh	r3, [r7, #14]
 8000902:	3301      	adds	r3, #1
 8000904:	81fb      	strh	r3, [r7, #14]
 8000906:	89fb      	ldrh	r3, [r7, #14]
 8000908:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 800090c:	4293      	cmp	r3, r2
 800090e:	d9ef      	bls.n	80008f0 <EPD_352_display+0x14>
    }
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <EPD_352_display_NUM>:
 * @brief
 *
 * @param NUM
 */
void EPD_352_display_NUM(uint8_t NUM)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
    uint16_t row, column;
    EPD_352_SendCommand(0x13);
 8000926:	2013      	movs	r0, #19
 8000928:	f7ff fe84 	bl	8000634 <EPD_352_SendCommand>
    for(column = 0; column < EPD_3IN52_HEIGHT; column++)
 800092c:	2300      	movs	r3, #0
 800092e:	81bb      	strh	r3, [r7, #12]
 8000930:	e0cd      	b.n	8000ace <EPD_352_display_NUM+0x1b2>
    {
        for(row = 0; row < EPD_3IN52_WIDTH; row++)
 8000932:	2300      	movs	r3, #0
 8000934:	81fb      	strh	r3, [r7, #14]
 8000936:	e0c3      	b.n	8000ac0 <EPD_352_display_NUM+0x1a4>
        {
            switch (NUM)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2bff      	cmp	r3, #255	@ 0xff
 800093c:	d03b      	beq.n	80009b6 <EPD_352_display_NUM+0x9a>
 800093e:	2bff      	cmp	r3, #255	@ 0xff
 8000940:	f300 80ba 	bgt.w	8000ab8 <EPD_352_display_NUM+0x19c>
 8000944:	2bf0      	cmp	r3, #240	@ 0xf0
 8000946:	d074      	beq.n	8000a32 <EPD_352_display_NUM+0x116>
 8000948:	2bf0      	cmp	r3, #240	@ 0xf0
 800094a:	f300 80b5 	bgt.w	8000ab8 <EPD_352_display_NUM+0x19c>
 800094e:	2baa      	cmp	r3, #170	@ 0xaa
 8000950:	d039      	beq.n	80009c6 <EPD_352_display_NUM+0xaa>
 8000952:	2baa      	cmp	r3, #170	@ 0xaa
 8000954:	f300 80b0 	bgt.w	8000ab8 <EPD_352_display_NUM+0x19c>
 8000958:	2b0f      	cmp	r3, #15
 800095a:	dc29      	bgt.n	80009b0 <EPD_352_display_NUM+0x94>
 800095c:	2b00      	cmp	r3, #0
 800095e:	f2c0 80ab 	blt.w	8000ab8 <EPD_352_display_NUM+0x19c>
 8000962:	2b0f      	cmp	r3, #15
 8000964:	f200 80a8 	bhi.w	8000ab8 <EPD_352_display_NUM+0x19c>
 8000968:	a201      	add	r2, pc, #4	@ (adr r2, 8000970 <EPD_352_display_NUM+0x54>)
 800096a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096e:	bf00      	nop
 8000970:	080009bf 	.word	0x080009bf
 8000974:	08000a49 	.word	0x08000a49
 8000978:	08000a85 	.word	0x08000a85
 800097c:	080009eb 	.word	0x080009eb
 8000980:	08000ab9 	.word	0x08000ab9
 8000984:	08000ab9 	.word	0x08000ab9
 8000988:	08000ab9 	.word	0x08000ab9
 800098c:	08000ab9 	.word	0x08000ab9
 8000990:	08000ab9 	.word	0x08000ab9
 8000994:	08000ab9 	.word	0x08000ab9
 8000998:	08000ab9 	.word	0x08000ab9
 800099c:	08000ab9 	.word	0x08000ab9
 80009a0:	08000ab9 	.word	0x08000ab9
 80009a4:	08000ab9 	.word	0x08000ab9
 80009a8:	08000ab9 	.word	0x08000ab9
 80009ac:	08000a1d 	.word	0x08000a1d
 80009b0:	2b55      	cmp	r3, #85	@ 0x55
 80009b2:	d00c      	beq.n	80009ce <EPD_352_display_NUM+0xb2>
                case EPD_3IN52_Image:
                        //EPD_3IN52_SendData(gImage_1[pcnt++]);
                    break;  
                                        
                default:
                    break;
 80009b4:	e080      	b.n	8000ab8 <EPD_352_display_NUM+0x19c>
                    EPD_352_SendData(0xFF);
 80009b6:	20ff      	movs	r0, #255	@ 0xff
 80009b8:	f7ff fe5a 	bl	8000670 <EPD_352_SendData>
                    break;  
 80009bc:	e07d      	b.n	8000aba <EPD_352_display_NUM+0x19e>
                    EPD_352_SendData(0x00);
 80009be:	2000      	movs	r0, #0
 80009c0:	f7ff fe56 	bl	8000670 <EPD_352_SendData>
                    break;  
 80009c4:	e079      	b.n	8000aba <EPD_352_display_NUM+0x19e>
                    EPD_352_SendData(0xAA);  
 80009c6:	20aa      	movs	r0, #170	@ 0xaa
 80009c8:	f7ff fe52 	bl	8000670 <EPD_352_SendData>
                    break;
 80009cc:	e075      	b.n	8000aba <EPD_352_display_NUM+0x19e>
                    if(column%2)
 80009ce:	89bb      	ldrh	r3, [r7, #12]
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <EPD_352_display_NUM+0xc6>
                        EPD_352_SendData(0xff); //An odd number of Gate line  
 80009da:	20ff      	movs	r0, #255	@ 0xff
 80009dc:	f7ff fe48 	bl	8000670 <EPD_352_SendData>
                    break;			
 80009e0:	e06b      	b.n	8000aba <EPD_352_display_NUM+0x19e>
                        EPD_352_SendData(0x00); //The even line Gate  
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fe44 	bl	8000670 <EPD_352_SendData>
                    break;			
 80009e8:	e067      	b.n	8000aba <EPD_352_display_NUM+0x19e>
                    if(row>=(EPD_3IN52_WIDTH/8/2)&&column>=(EPD_3IN52_HEIGHT/2))
 80009ea:	89fb      	ldrh	r3, [r7, #14]
 80009ec:	2b0e      	cmp	r3, #14
 80009ee:	d906      	bls.n	80009fe <EPD_352_display_NUM+0xe2>
 80009f0:	89bb      	ldrh	r3, [r7, #12]
 80009f2:	2bb3      	cmp	r3, #179	@ 0xb3
 80009f4:	d903      	bls.n	80009fe <EPD_352_display_NUM+0xe2>
                        EPD_352_SendData(0xff);
 80009f6:	20ff      	movs	r0, #255	@ 0xff
 80009f8:	f7ff fe3a 	bl	8000670 <EPD_352_SendData>
 80009fc:	e00d      	b.n	8000a1a <EPD_352_display_NUM+0xfe>
                    else if(row<(EPD_3IN52_WIDTH/8/2)&&column<(EPD_3IN52_HEIGHT/2))
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	2b0e      	cmp	r3, #14
 8000a02:	d806      	bhi.n	8000a12 <EPD_352_display_NUM+0xf6>
 8000a04:	89bb      	ldrh	r3, [r7, #12]
 8000a06:	2bb3      	cmp	r3, #179	@ 0xb3
 8000a08:	d803      	bhi.n	8000a12 <EPD_352_display_NUM+0xf6>
                        EPD_352_SendData(0xff);										
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	f7ff fe30 	bl	8000670 <EPD_352_SendData>
 8000a10:	e003      	b.n	8000a1a <EPD_352_display_NUM+0xfe>
                        EPD_352_SendData(0x00);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff fe2c 	bl	8000670 <EPD_352_SendData>
                    break; 			
 8000a18:	e04f      	b.n	8000aba <EPD_352_display_NUM+0x19e>
 8000a1a:	e04e      	b.n	8000aba <EPD_352_display_NUM+0x19e>
                    if(row>=(EPD_3IN52_WIDTH/8/2))
 8000a1c:	89fb      	ldrh	r3, [r7, #14]
 8000a1e:	2b0e      	cmp	r3, #14
 8000a20:	d903      	bls.n	8000a2a <EPD_352_display_NUM+0x10e>
                        EPD_352_SendData(0xff);
 8000a22:	20ff      	movs	r0, #255	@ 0xff
 8000a24:	f7ff fe24 	bl	8000670 <EPD_352_SendData>
                    break;
 8000a28:	e047      	b.n	8000aba <EPD_352_display_NUM+0x19e>
                        EPD_352_SendData(0x00);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff fe20 	bl	8000670 <EPD_352_SendData>
                    break;
 8000a30:	e043      	b.n	8000aba <EPD_352_display_NUM+0x19e>
                    if(column>=(EPD_3IN52_HEIGHT/2))
 8000a32:	89bb      	ldrh	r3, [r7, #12]
 8000a34:	2bb3      	cmp	r3, #179	@ 0xb3
 8000a36:	d903      	bls.n	8000a40 <EPD_352_display_NUM+0x124>
                        EPD_352_SendData(0xFF);
 8000a38:	20ff      	movs	r0, #255	@ 0xff
 8000a3a:	f7ff fe19 	bl	8000670 <EPD_352_SendData>
                    break;
 8000a3e:	e03c      	b.n	8000aba <EPD_352_display_NUM+0x19e>
                        EPD_352_SendData(0x00);
 8000a40:	2000      	movs	r0, #0
 8000a42:	f7ff fe15 	bl	8000670 <EPD_352_SendData>
                    break;
 8000a46:	e038      	b.n	8000aba <EPD_352_display_NUM+0x19e>
                    if(column==0||column==(EPD_3IN52_HEIGHT-1))
 8000a48:	89bb      	ldrh	r3, [r7, #12]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d004      	beq.n	8000a58 <EPD_352_display_NUM+0x13c>
 8000a4e:	89bb      	ldrh	r3, [r7, #12]
 8000a50:	f240 1267 	movw	r2, #359	@ 0x167
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d103      	bne.n	8000a60 <EPD_352_display_NUM+0x144>
                        EPD_352_SendData(0x00);						
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fe09 	bl	8000670 <EPD_352_SendData>
                    break; 					
 8000a5e:	e02c      	b.n	8000aba <EPD_352_display_NUM+0x19e>
                    else if(row==0)
 8000a60:	89fb      	ldrh	r3, [r7, #14]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d103      	bne.n	8000a6e <EPD_352_display_NUM+0x152>
                        EPD_352_SendData(0x7F);
 8000a66:	207f      	movs	r0, #127	@ 0x7f
 8000a68:	f7ff fe02 	bl	8000670 <EPD_352_SendData>
                    break; 					
 8000a6c:	e025      	b.n	8000aba <EPD_352_display_NUM+0x19e>
                    else if(row==(EPD_3IN52_WIDTH/8-1))
 8000a6e:	89fb      	ldrh	r3, [r7, #14]
 8000a70:	2b1d      	cmp	r3, #29
 8000a72:	d103      	bne.n	8000a7c <EPD_352_display_NUM+0x160>
                        EPD_352_SendData(0xFE);					
 8000a74:	20fe      	movs	r0, #254	@ 0xfe
 8000a76:	f7ff fdfb 	bl	8000670 <EPD_352_SendData>
                    break; 					
 8000a7a:	e01e      	b.n	8000aba <EPD_352_display_NUM+0x19e>
                        EPD_352_SendData(0xFF);
 8000a7c:	20ff      	movs	r0, #255	@ 0xff
 8000a7e:	f7ff fdf7 	bl	8000670 <EPD_352_SendData>
                    break; 					
 8000a82:	e01a      	b.n	8000aba <EPD_352_display_NUM+0x19e>
                    if((row>=(EPD_3IN52_WIDTH/8/3)&&row<=(EPD_3IN52_WIDTH/8/3*2)&&column<=(EPD_3IN52_HEIGHT/3))||(row>=(EPD_3IN52_WIDTH/8/3)&&row<=(EPD_3IN52_WIDTH/8/3*2)&&column>=(EPD_3IN52_HEIGHT/3*2)))
 8000a84:	89fb      	ldrh	r3, [r7, #14]
 8000a86:	2b09      	cmp	r3, #9
 8000a88:	d905      	bls.n	8000a96 <EPD_352_display_NUM+0x17a>
 8000a8a:	89fb      	ldrh	r3, [r7, #14]
 8000a8c:	2b14      	cmp	r3, #20
 8000a8e:	d802      	bhi.n	8000a96 <EPD_352_display_NUM+0x17a>
 8000a90:	89bb      	ldrh	r3, [r7, #12]
 8000a92:	2b78      	cmp	r3, #120	@ 0x78
 8000a94:	d908      	bls.n	8000aa8 <EPD_352_display_NUM+0x18c>
 8000a96:	89fb      	ldrh	r3, [r7, #14]
 8000a98:	2b09      	cmp	r3, #9
 8000a9a:	d909      	bls.n	8000ab0 <EPD_352_display_NUM+0x194>
 8000a9c:	89fb      	ldrh	r3, [r7, #14]
 8000a9e:	2b14      	cmp	r3, #20
 8000aa0:	d806      	bhi.n	8000ab0 <EPD_352_display_NUM+0x194>
 8000aa2:	89bb      	ldrh	r3, [r7, #12]
 8000aa4:	2bef      	cmp	r3, #239	@ 0xef
 8000aa6:	d903      	bls.n	8000ab0 <EPD_352_display_NUM+0x194>
                        EPD_352_SendData(0x00);
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f7ff fde1 	bl	8000670 <EPD_352_SendData>
                    break; 					
 8000aae:	e004      	b.n	8000aba <EPD_352_display_NUM+0x19e>
                        EPD_352_SendData(0xFF);
 8000ab0:	20ff      	movs	r0, #255	@ 0xff
 8000ab2:	f7ff fddd 	bl	8000670 <EPD_352_SendData>
                    break; 					
 8000ab6:	e000      	b.n	8000aba <EPD_352_display_NUM+0x19e>
                    break;
 8000ab8:	bf00      	nop
        for(row = 0; row < EPD_3IN52_WIDTH; row++)
 8000aba:	89fb      	ldrh	r3, [r7, #14]
 8000abc:	3301      	adds	r3, #1
 8000abe:	81fb      	strh	r3, [r7, #14]
 8000ac0:	89fb      	ldrh	r3, [r7, #14]
 8000ac2:	2bef      	cmp	r3, #239	@ 0xef
 8000ac4:	f67f af38 	bls.w	8000938 <EPD_352_display_NUM+0x1c>
    for(column = 0; column < EPD_3IN52_HEIGHT; column++)
 8000ac8:	89bb      	ldrh	r3, [r7, #12]
 8000aca:	3301      	adds	r3, #1
 8000acc:	81bb      	strh	r3, [r7, #12]
 8000ace:	89bb      	ldrh	r3, [r7, #12]
 8000ad0:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000ad4:	f4ff af2d 	bcc.w	8000932 <EPD_352_display_NUM+0x16>
            }
        }
    }
}
 8000ad8:	bf00      	nop
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop

08000ae4 <EPD_352_Reset>:
/**
 * @brief Reset the EPD 3.52" display.
 * 
 */
void EPD_352_Reset(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2180      	movs	r1, #128	@ 0x80
 8000aec:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <EPD_352_Reset+0x38>)
 8000aee:	f001 fb2b 	bl	8002148 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8000af2:	20c8      	movs	r0, #200	@ 0xc8
 8000af4:	f001 f83e 	bl	8001b74 <HAL_Delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2180      	movs	r1, #128	@ 0x80
 8000afc:	4807      	ldr	r0, [pc, #28]	@ (8000b1c <EPD_352_Reset+0x38>)
 8000afe:	f001 fb23 	bl	8002148 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000b02:	2001      	movs	r0, #1
 8000b04:	f001 f836 	bl	8001b74 <HAL_Delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2180      	movs	r1, #128	@ 0x80
 8000b0c:	4803      	ldr	r0, [pc, #12]	@ (8000b1c <EPD_352_Reset+0x38>)
 8000b0e:	f001 fb1b 	bl	8002148 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8000b12:	20c8      	movs	r0, #200	@ 0xc8
 8000b14:	f001 f82e 	bl	8001b74 <HAL_Delay>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40020800 	.word	0x40020800

08000b20 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(uint8_t *image, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	4608      	mov	r0, r1
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4603      	mov	r3, r0
 8000b30:	817b      	strh	r3, [r7, #10]
 8000b32:	460b      	mov	r3, r1
 8000b34:	813b      	strh	r3, [r7, #8]
 8000b36:	4613      	mov	r3, r2
 8000b38:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8000b3a:	4b23      	ldr	r3, [pc, #140]	@ (8000bc8 <Paint_NewImage+0xa8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8000b40:	4a21      	ldr	r2, [pc, #132]	@ (8000bc8 <Paint_NewImage+0xa8>)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8000b46:	4a20      	ldr	r2, [pc, #128]	@ (8000bc8 <Paint_NewImage+0xa8>)
 8000b48:	897b      	ldrh	r3, [r7, #10]
 8000b4a:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000b4c:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc8 <Paint_NewImage+0xa8>)
 8000b4e:	893b      	ldrh	r3, [r7, #8]
 8000b50:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;
 8000b52:	4a1d      	ldr	r2, [pc, #116]	@ (8000bc8 <Paint_NewImage+0xa8>)
 8000b54:	8b3b      	ldrh	r3, [r7, #24]
 8000b56:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc8 <Paint_NewImage+0xa8>)
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	82da      	strh	r2, [r3, #22]

    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000b5e:	897b      	ldrh	r3, [r7, #10]
 8000b60:	f003 0307 	and.w	r3, r3, #7
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d103      	bne.n	8000b72 <Paint_NewImage+0x52>
 8000b6a:	897b      	ldrh	r3, [r7, #10]
 8000b6c:	08db      	lsrs	r3, r3, #3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	e004      	b.n	8000b7c <Paint_NewImage+0x5c>
 8000b72:	897b      	ldrh	r3, [r7, #10]
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	3301      	adds	r3, #1
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	4a12      	ldr	r2, [pc, #72]	@ (8000bc8 <Paint_NewImage+0xa8>)
 8000b7e:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;
 8000b80:	4a11      	ldr	r2, [pc, #68]	@ (8000bc8 <Paint_NewImage+0xa8>)
 8000b82:	893b      	ldrh	r3, [r7, #8]
 8000b84:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

    Paint.Rotate = Rotate;
 8000b86:	4a10      	ldr	r2, [pc, #64]	@ (8000bc8 <Paint_NewImage+0xa8>)
 8000b88:	88fb      	ldrh	r3, [r7, #6]
 8000b8a:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <Paint_NewImage+0xa8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	821a      	strh	r2, [r3, #16]

    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d002      	beq.n	8000b9e <Paint_NewImage+0x7e>
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	2bb4      	cmp	r3, #180	@ 0xb4
 8000b9c:	d106      	bne.n	8000bac <Paint_NewImage+0x8c>
        Paint.Width = Width;
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <Paint_NewImage+0xa8>)
 8000ba0:	897b      	ldrh	r3, [r7, #10]
 8000ba2:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000ba4:	4a08      	ldr	r2, [pc, #32]	@ (8000bc8 <Paint_NewImage+0xa8>)
 8000ba6:	893b      	ldrh	r3, [r7, #8]
 8000ba8:	80d3      	strh	r3, [r2, #6]
 8000baa:	e006      	b.n	8000bba <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8000bac:	4a06      	ldr	r2, [pc, #24]	@ (8000bc8 <Paint_NewImage+0xa8>)
 8000bae:	893b      	ldrh	r3, [r7, #8]
 8000bb0:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000bb2:	4a05      	ldr	r2, [pc, #20]	@ (8000bc8 <Paint_NewImage+0xa8>)
 8000bb4:	897b      	ldrh	r3, [r7, #10]
 8000bb6:	80d3      	strh	r3, [r2, #6]
    }
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000084 	.word	0x20000084

08000bcc <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(uint8_t *image)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8000bd4:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <Paint_SelectImage+0x1c>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000084 	.word	0x20000084

08000bec <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(uint16_t Color)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	@ 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 8000bf6:	4b50      	ldr	r3, [pc, #320]	@ (8000d38 <Paint_Clear+0x14c>)
 8000bf8:	8adb      	ldrh	r3, [r3, #22]
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d125      	bne.n	8000c4a <Paint_Clear+0x5e>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000bfe:	2300      	movs	r3, #0
 8000c00:	83fb      	strh	r3, [r7, #30]
 8000c02:	e01c      	b.n	8000c3e <Paint_Clear+0x52>
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000c04:	2300      	movs	r3, #0
 8000c06:	83bb      	strh	r3, [r7, #28]
 8000c08:	e011      	b.n	8000c2e <Paint_Clear+0x42>
				uint32_t Addr = X + Y*Paint.WidthByte;
 8000c0a:	8bba      	ldrh	r2, [r7, #28]
 8000c0c:	8bfb      	ldrh	r3, [r7, #30]
 8000c0e:	494a      	ldr	r1, [pc, #296]	@ (8000d38 <Paint_Clear+0x14c>)
 8000c10:	8a49      	ldrh	r1, [r1, #18]
 8000c12:	fb01 f303 	mul.w	r3, r1, r3
 8000c16:	4413      	add	r3, r2
 8000c18:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8000c1a:	4b47      	ldr	r3, [pc, #284]	@ (8000d38 <Paint_Clear+0x14c>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	4413      	add	r3, r2
 8000c22:	88fa      	ldrh	r2, [r7, #6]
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	701a      	strb	r2, [r3, #0]
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000c28:	8bbb      	ldrh	r3, [r7, #28]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	83bb      	strh	r3, [r7, #28]
 8000c2e:	4b42      	ldr	r3, [pc, #264]	@ (8000d38 <Paint_Clear+0x14c>)
 8000c30:	8a5b      	ldrh	r3, [r3, #18]
 8000c32:	8bba      	ldrh	r2, [r7, #28]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d3e8      	bcc.n	8000c0a <Paint_Clear+0x1e>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000c38:	8bfb      	ldrh	r3, [r7, #30]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	83fb      	strh	r3, [r7, #30]
 8000c3e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d38 <Paint_Clear+0x14c>)
 8000c40:	8a9b      	ldrh	r3, [r3, #20]
 8000c42:	8bfa      	ldrh	r2, [r7, #30]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d3dd      	bcc.n	8000c04 <Paint_Clear+0x18>
				uint32_t Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}
	}
}
 8000c48:	e070      	b.n	8000d2c <Paint_Clear+0x140>
    }else if(Paint.Scale == 4) {
 8000c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d38 <Paint_Clear+0x14c>)
 8000c4c:	8adb      	ldrh	r3, [r3, #22]
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	d138      	bne.n	8000cc4 <Paint_Clear+0xd8>
        for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000c52:	2300      	movs	r3, #0
 8000c54:	837b      	strh	r3, [r7, #26]
 8000c56:	e02f      	b.n	8000cb8 <Paint_Clear+0xcc>
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	833b      	strh	r3, [r7, #24]
 8000c5c:	e024      	b.n	8000ca8 <Paint_Clear+0xbc>
				uint32_t Addr = X + Y*Paint.WidthByte;
 8000c5e:	8b3a      	ldrh	r2, [r7, #24]
 8000c60:	8b7b      	ldrh	r3, [r7, #26]
 8000c62:	4935      	ldr	r1, [pc, #212]	@ (8000d38 <Paint_Clear+0x14c>)
 8000c64:	8a49      	ldrh	r1, [r1, #18]
 8000c66:	fb01 f303 	mul.w	r3, r1, r3
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	019b      	lsls	r3, r3, #6
 8000c74:	b25a      	sxtb	r2, r3
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	b25b      	sxtb	r3, r3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	b25a      	sxtb	r2, r3
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b25a      	sxtb	r2, r3
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b259      	sxtb	r1, r3
 8000c96:	4b28      	ldr	r3, [pc, #160]	@ (8000d38 <Paint_Clear+0x14c>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	b2ca      	uxtb	r2, r1
 8000ca0:	701a      	strb	r2, [r3, #0]
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {
 8000ca2:	8b3b      	ldrh	r3, [r7, #24]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	833b      	strh	r3, [r7, #24]
 8000ca8:	4b23      	ldr	r3, [pc, #140]	@ (8000d38 <Paint_Clear+0x14c>)
 8000caa:	8a5b      	ldrh	r3, [r3, #18]
 8000cac:	8b3a      	ldrh	r2, [r7, #24]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d3d5      	bcc.n	8000c5e <Paint_Clear+0x72>
        for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000cb2:	8b7b      	ldrh	r3, [r7, #26]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	837b      	strh	r3, [r7, #26]
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d38 <Paint_Clear+0x14c>)
 8000cba:	8a9b      	ldrh	r3, [r3, #20]
 8000cbc:	8b7a      	ldrh	r2, [r7, #26]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d3ca      	bcc.n	8000c58 <Paint_Clear+0x6c>
}
 8000cc2:	e033      	b.n	8000d2c <Paint_Clear+0x140>
	}else if(Paint.Scale == 6 || Paint.Scale == 7) {
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <Paint_Clear+0x14c>)
 8000cc6:	8adb      	ldrh	r3, [r3, #22]
 8000cc8:	2b06      	cmp	r3, #6
 8000cca:	d003      	beq.n	8000cd4 <Paint_Clear+0xe8>
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <Paint_Clear+0x14c>)
 8000cce:	8adb      	ldrh	r3, [r3, #22]
 8000cd0:	2b07      	cmp	r3, #7
 8000cd2:	d12b      	bne.n	8000d2c <Paint_Clear+0x140>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	82fb      	strh	r3, [r7, #22]
 8000cd8:	e023      	b.n	8000d22 <Paint_Clear+0x136>
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {
 8000cda:	2300      	movs	r3, #0
 8000cdc:	82bb      	strh	r3, [r7, #20]
 8000cde:	e018      	b.n	8000d12 <Paint_Clear+0x126>
				uint32_t Addr = X + Y*Paint.WidthByte;
 8000ce0:	8aba      	ldrh	r2, [r7, #20]
 8000ce2:	8afb      	ldrh	r3, [r7, #22]
 8000ce4:	4914      	ldr	r1, [pc, #80]	@ (8000d38 <Paint_Clear+0x14c>)
 8000ce6:	8a49      	ldrh	r1, [r1, #18]
 8000ce8:	fb01 f303 	mul.w	r3, r1, r3
 8000cec:	4413      	add	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	b25b      	sxtb	r3, r3
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	b25a      	sxtb	r2, r3
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b259      	sxtb	r1, r3
 8000d00:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <Paint_Clear+0x14c>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	4413      	add	r3, r2
 8000d08:	b2ca      	uxtb	r2, r1
 8000d0a:	701a      	strb	r2, [r3, #0]
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {
 8000d0c:	8abb      	ldrh	r3, [r7, #20]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	82bb      	strh	r3, [r7, #20]
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <Paint_Clear+0x14c>)
 8000d14:	8a5b      	ldrh	r3, [r3, #18]
 8000d16:	8aba      	ldrh	r2, [r7, #20]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d3e1      	bcc.n	8000ce0 <Paint_Clear+0xf4>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000d1c:	8afb      	ldrh	r3, [r7, #22]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	82fb      	strh	r3, [r7, #22]
 8000d22:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <Paint_Clear+0x14c>)
 8000d24:	8a9b      	ldrh	r3, [r3, #20]
 8000d26:	8afa      	ldrh	r2, [r7, #22]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d3d6      	bcc.n	8000cda <Paint_Clear+0xee>
}
 8000d2c:	bf00      	nop
 8000d2e:	3724      	adds	r7, #36	@ 0x24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	20000084 	.word	0x20000084

08000d3c <Paint_DrawBitMap>:
info:
    Use a computer to convert the image into a corresponding array,
    and then embed the array directly into Imagedata.cpp as a .c file.
******************************************************************************/
void Paint_DrawBitMap(const unsigned char* image_buffer)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
    uint16_t x, y;
    uint32_t Addr = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]

    for (y = 0; y < Paint.HeightByte; y++) {
 8000d48:	2300      	movs	r3, #0
 8000d4a:	81bb      	strh	r3, [r7, #12]
 8000d4c:	e01e      	b.n	8000d8c <Paint_DrawBitMap+0x50>
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 8000d4e:	2300      	movs	r3, #0
 8000d50:	81fb      	strh	r3, [r7, #14]
 8000d52:	e013      	b.n	8000d7c <Paint_DrawBitMap+0x40>
            Addr = x + y * Paint.WidthByte;
 8000d54:	89fa      	ldrh	r2, [r7, #14]
 8000d56:	89bb      	ldrh	r3, [r7, #12]
 8000d58:	4912      	ldr	r1, [pc, #72]	@ (8000da4 <Paint_DrawBitMap+0x68>)
 8000d5a:	8a49      	ldrh	r1, [r1, #18]
 8000d5c:	fb01 f303 	mul.w	r3, r1, r3
 8000d60:	4413      	add	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
            Paint.Image[Addr] = (unsigned char)image_buffer[Addr];
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	441a      	add	r2, r3
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <Paint_DrawBitMap+0x68>)
 8000d6c:	6819      	ldr	r1, [r3, #0]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	440b      	add	r3, r1
 8000d72:	7812      	ldrb	r2, [r2, #0]
 8000d74:	701a      	strb	r2, [r3, #0]
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 8000d76:	89fb      	ldrh	r3, [r7, #14]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	81fb      	strh	r3, [r7, #14]
 8000d7c:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <Paint_DrawBitMap+0x68>)
 8000d7e:	8a5b      	ldrh	r3, [r3, #18]
 8000d80:	89fa      	ldrh	r2, [r7, #14]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d3e6      	bcc.n	8000d54 <Paint_DrawBitMap+0x18>
    for (y = 0; y < Paint.HeightByte; y++) {
 8000d86:	89bb      	ldrh	r3, [r7, #12]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	81bb      	strh	r3, [r7, #12]
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <Paint_DrawBitMap+0x68>)
 8000d8e:	8a9b      	ldrh	r3, [r3, #20]
 8000d90:	89ba      	ldrh	r2, [r7, #12]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d3db      	bcc.n	8000d4e <Paint_DrawBitMap+0x12>
        }
    }
}
 8000d96:	bf00      	nop
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	20000084 	.word	0x20000084

08000da8 <main_initialiseApresLeHAL>:
  // Initialise the base de temps service
  serviceBaseDeTemps_initialise();
}

void main_initialiseApresLeHAL(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	EPD_352_Init();
 8000dac:	f7ff fd36 	bl	800081c <EPD_352_Init>
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b092      	sub	sp, #72	@ 0x48
 8000db8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dba:	f000 fe69 	bl	8001a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbe:	f000 f8c3 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc2:	f000 faa1 	bl	8001308 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dc6:	f000 f929 	bl	800101c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000dca:	f000 f955 	bl	8001078 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000dce:	f000 fa43 	bl	8001258 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dd2:	f000 fa6b 	bl	80012ac <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8000dd6:	f000 f985 	bl	80010e4 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000dda:	f000 f9b9 	bl	8001150 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000dde:	f000 fa05 	bl	80011ec <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  main_initialiseApresLeHAL();
 8000de2:	f7ff ffe1 	bl	8000da8 <main_initialiseApresLeHAL>



  EPD_352_display_NUM(EPD_3IN52_BLACK);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff fd98 	bl	800091c <EPD_352_display_NUM>
  EPD_352_lut_GC();
 8000dec:	f7ff fc7c 	bl	80006e8 <EPD_352_lut_GC>
  EPD_352_refresh();
 8000df0:	f7ff fc5c 	bl	80006ac <EPD_352_refresh>

  EPD_352_SendCommand(0x50);
 8000df4:	2050      	movs	r0, #80	@ 0x50
 8000df6:	f7ff fc1d 	bl	8000634 <EPD_352_SendCommand>
  EPD_352_SendData(0x17);
 8000dfa:	2017      	movs	r0, #23
 8000dfc:	f7ff fc38 	bl	8000670 <EPD_352_SendData>

  HAL_Delay(500);
 8000e00:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e04:	f000 feb6 	bl	8001b74 <HAL_Delay>

  uint8_t *imagenoir;
  uint16_t imagesize= ((EPD_3IN52_WIDTH % 8 == 0)? (EPD_3IN52_WIDTH / 8 ): (EPD_3IN52_WIDTH / 8 + 1)) * EPD_3IN52_HEIGHT;
 8000e08:	f642 2330 	movw	r3, #10800	@ 0x2a30
 8000e0c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if((imagenoir = (uint8_t *)malloc(imagesize)) == NULL) {
 8000e0e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000e10:	4618      	mov	r0, r3
 8000e12:	f005 f89d 	bl	8005f50 <malloc>
 8000e16:	4603      	mov	r3, r0
 8000e18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d110      	bne.n	8000e42 <main+0x8e>
	  uart_len = sprintf(uart_buf, "Failed to apply for black memory...\r\n");
 8000e20:	463b      	mov	r3, r7
 8000e22:	4943      	ldr	r1, [pc, #268]	@ (8000f30 <main+0x17c>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f005 f949 	bl	80060bc <siprintf>
 8000e2a:	6378      	str	r0, [r7, #52]	@ 0x34
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_len, HAL_MAX_DELAY);
 8000e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4639      	mov	r1, r7
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	483f      	ldr	r0, [pc, #252]	@ (8000f34 <main+0x180>)
 8000e38:	f003 feac 	bl	8004b94 <HAL_UART_Transmit>
          return -1;
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e40:	e072      	b.n	8000f28 <main+0x174>
      }
  uart_len = sprintf(uart_buf, "Paint_NewImage\r\n");
 8000e42:	463b      	mov	r3, r7
 8000e44:	493c      	ldr	r1, [pc, #240]	@ (8000f38 <main+0x184>)
 8000e46:	4618      	mov	r0, r3
 8000e48:	f005 f938 	bl	80060bc <siprintf>
 8000e4c:	6378      	str	r0, [r7, #52]	@ 0x34
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_len, HAL_MAX_DELAY);
 8000e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	4639      	mov	r1, r7
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295
 8000e58:	4836      	ldr	r0, [pc, #216]	@ (8000f34 <main+0x180>)
 8000e5a:	f003 fe9b 	bl	8004b94 <HAL_UART_Transmit>
  Paint_NewImage(imagenoir, EPD_3IN52_WIDTH, EPD_3IN52_HEIGHT, ROTATE_270, WHITE);
 8000e5e:	23ff      	movs	r3, #255	@ 0xff
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8000e66:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8000e6a:	21f0      	movs	r1, #240	@ 0xf0
 8000e6c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000e6e:	f7ff fe57 	bl	8000b20 <Paint_NewImage>
  Paint_Clear(WHITE);
 8000e72:	20ff      	movs	r0, #255	@ 0xff
 8000e74:	f7ff feba 	bl	8000bec <Paint_Clear>

  Paint_SelectImage(imagenoir);
 8000e78:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000e7a:	f7ff fea7 	bl	8000bcc <Paint_SelectImage>
  Paint_Clear(WHITE);
 8000e7e:	20ff      	movs	r0, #255	@ 0xff
 8000e80:	f7ff feb4 	bl	8000bec <Paint_Clear>
  Paint_DrawBitMap(gImage_Didou);
 8000e84:	482d      	ldr	r0, [pc, #180]	@ (8000f3c <main+0x188>)
 8000e86:	f7ff ff59 	bl	8000d3c <Paint_DrawBitMap>

  EPD_352_display(imagenoir);
 8000e8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000e8c:	f7ff fd26 	bl	80008dc <EPD_352_display>
  EPD_352_lut_GC();
 8000e90:	f7ff fc2a 	bl	80006e8 <EPD_352_lut_GC>
  EPD_352_refresh();
 8000e94:	f7ff fc0a 	bl	80006ac <EPD_352_refresh>
  HAL_Delay(2000);
 8000e98:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e9c:	f000 fe6a 	bl	8001b74 <HAL_Delay>

    Paint_SelectImage(imagenoir);
 8000ea0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000ea2:	f7ff fe93 	bl	8000bcc <Paint_SelectImage>
    Paint_Clear(WHITE);
 8000ea6:	20ff      	movs	r0, #255	@ 0xff
 8000ea8:	f7ff fea0 	bl	8000bec <Paint_Clear>
    EPD_352_lut_GC();
 8000eac:	f7ff fc1c 	bl	80006e8 <EPD_352_lut_GC>
    EPD_352_refresh();
 8000eb0:	f7ff fbfc 	bl	80006ac <EPD_352_refresh>
    EPD_352_display(imagenoir);
 8000eb4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000eb6:	f7ff fd11 	bl	80008dc <EPD_352_display>
    Paint_SelectImage(imagenoir);
 8000eba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000ebc:	f7ff fe86 	bl	8000bcc <Paint_SelectImage>
    Paint_Clear(WHITE);
 8000ec0:	20ff      	movs	r0, #255	@ 0xff
 8000ec2:	f7ff fe93 	bl	8000bec <Paint_Clear>
    Paint_DrawString_EN(10, 0, "waveshare", &Font16, BLACK, WHITE);
    Paint_DrawString_EN(10, 20, "hello world", &Font12, WHITE, BLACK);
    Paint_DrawNum(10, 33, 123456789, &Font12, BLACK, WHITE);
    Paint_DrawNum(10, 50, 987654321, &Font16, WHITE, BLACK);
    */
    EPD_352_display(imagenoir);
 8000ec6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000ec8:	f7ff fd08 	bl	80008dc <EPD_352_display>
    EPD_352_lut_GC();
 8000ecc:	f7ff fc0c 	bl	80006e8 <EPD_352_lut_GC>
    EPD_352_refresh();
 8000ed0:	f7ff fbec 	bl	80006ac <EPD_352_refresh>

    HAL_Delay(2000);
 8000ed4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ed8:	f000 fe4c 	bl	8001b74 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_GPIO_TogglePin(SPI1_SCK_GPIO_Port,SPI1_SCK_Pin);
	HAL_GPIO_TogglePin(LD4_GPIO_Port,LD4_Pin);
 8000edc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ee0:	4817      	ldr	r0, [pc, #92]	@ (8000f40 <main+0x18c>)
 8000ee2:	f001 f94a 	bl	800217a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8000ee6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eea:	4815      	ldr	r0, [pc, #84]	@ (8000f40 <main+0x18c>)
 8000eec:	f001 f945 	bl	800217a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD5_GPIO_Port,LD5_Pin);
 8000ef0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ef4:	4812      	ldr	r0, [pc, #72]	@ (8000f40 <main+0x18c>)
 8000ef6:	f001 f940 	bl	800217a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD6_GPIO_Port,LD6_Pin);
 8000efa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000efe:	4810      	ldr	r0, [pc, #64]	@ (8000f40 <main+0x18c>)
 8000f00:	f001 f93b 	bl	800217a <HAL_GPIO_TogglePin>
    if(interfaceB1.etatDuBouton == INTERFACEB1_APPUYE)
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <main+0x190>)
 8000f06:	789b      	ldrb	r3, [r3, #2]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d102      	bne.n	8000f12 <main+0x15e>
    {
      interfaceT1_allume();
 8000f0c:	f7ff fb46 	bl	800059c <interfaceT1_allume>
 8000f10:	e005      	b.n	8000f1e <main+0x16a>
    }
    else if(interfaceB1.etatDuBouton == INTERFACEB1_RELACHE)
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <main+0x190>)
 8000f14:	789b      	ldrb	r3, [r3, #2]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <main+0x16a>
    {
      interfaceT1_eteint();
 8000f1a:	f7ff fb46 	bl	80005aa <interfaceT1_eteint>
    }
	HAL_Delay(1000);
 8000f1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f22:	f000 fe27 	bl	8001b74 <HAL_Delay>
	HAL_GPIO_TogglePin(LD4_GPIO_Port,LD4_Pin);
 8000f26:	e7d9      	b.n	8000edc <main+0x128>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3740      	adds	r7, #64	@ 0x40
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	080068b8 	.word	0x080068b8
 8000f34:	20000230 	.word	0x20000230
 8000f38:	080068e0 	.word	0x080068e0
 8000f3c:	080069f4 	.word	0x080069f4
 8000f40:	40020c00 	.word	0x40020c00
 8000f44:	20000078 	.word	0x20000078

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b094      	sub	sp, #80	@ 0x50
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	2230      	movs	r2, #48	@ 0x30
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f005 f8d2 	bl	8006100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <SystemClock_Config+0xcc>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	4a27      	ldr	r2, [pc, #156]	@ (8001014 <SystemClock_Config+0xcc>)
 8000f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7c:	4b25      	ldr	r3, [pc, #148]	@ (8001014 <SystemClock_Config+0xcc>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <SystemClock_Config+0xd0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a21      	ldr	r2, [pc, #132]	@ (8001018 <SystemClock_Config+0xd0>)
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <SystemClock_Config+0xd0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fbc:	23a8      	movs	r3, #168	@ 0xa8
 8000fbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc8:	f107 0320 	add.w	r3, r7, #32
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 fa51 	bl	8003474 <HAL_RCC_OscConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fd8:	f000 fac8 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fdc:	230f      	movs	r3, #15
 8000fde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2105      	movs	r1, #5
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 fcb2 	bl	8003964 <HAL_RCC_ClockConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001006:	f000 fab1 	bl	800156c <Error_Handler>
  }
}
 800100a:	bf00      	nop
 800100c:	3750      	adds	r7, #80	@ 0x50
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40007000 	.word	0x40007000

0800101c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001020:	4b12      	ldr	r3, [pc, #72]	@ (800106c <MX_I2C1_Init+0x50>)
 8001022:	4a13      	ldr	r2, [pc, #76]	@ (8001070 <MX_I2C1_Init+0x54>)
 8001024:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001026:	4b11      	ldr	r3, [pc, #68]	@ (800106c <MX_I2C1_Init+0x50>)
 8001028:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <MX_I2C1_Init+0x58>)
 800102a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800102c:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <MX_I2C1_Init+0x50>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001032:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <MX_I2C1_Init+0x50>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <MX_I2C1_Init+0x50>)
 800103a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800103e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001040:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <MX_I2C1_Init+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <MX_I2C1_Init+0x50>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104c:	4b07      	ldr	r3, [pc, #28]	@ (800106c <MX_I2C1_Init+0x50>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <MX_I2C1_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001058:	4804      	ldr	r0, [pc, #16]	@ (800106c <MX_I2C1_Init+0x50>)
 800105a:	f001 f8a9 	bl	80021b0 <HAL_I2C_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001064:	f000 fa82 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2000009c 	.word	0x2000009c
 8001070:	40005400 	.word	0x40005400
 8001074:	000186a0 	.word	0x000186a0

08001078 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800107c:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <MX_SPI1_Init+0x64>)
 800107e:	4a18      	ldr	r2, [pc, #96]	@ (80010e0 <MX_SPI1_Init+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001082:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <MX_SPI1_Init+0x64>)
 8001084:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001088:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <MX_SPI1_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <MX_SPI1_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001096:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <MX_SPI1_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800109c:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <MX_SPI1_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80010aa:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010ac:	2228      	movs	r2, #40	@ 0x28
 80010ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b6:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010bc:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010c2:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010c4:	220a      	movs	r2, #10
 80010c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010ca:	f002 fe6b 	bl	8003da4 <HAL_SPI_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010d4:	f000 fa4a 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200000f0 	.word	0x200000f0
 80010e0:	40013000 	.word	0x40013000

080010e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010e8:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <MX_SPI2_Init+0x64>)
 80010ea:	4a18      	ldr	r2, [pc, #96]	@ (800114c <MX_SPI2_Init+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010ee:	4b16      	ldr	r3, [pc, #88]	@ (8001148 <MX_SPI2_Init+0x64>)
 80010f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010f6:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <MX_SPI2_Init+0x64>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010fc:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <MX_SPI2_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_SPI2_Init+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001108:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <MX_SPI2_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_SPI2_Init+0x64>)
 8001110:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001114:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001116:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <MX_SPI2_Init+0x64>)
 8001118:	2220      	movs	r2, #32
 800111a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <MX_SPI2_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <MX_SPI2_Init+0x64>)
 8001124:	2200      	movs	r2, #0
 8001126:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <MX_SPI2_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800112e:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <MX_SPI2_Init+0x64>)
 8001130:	220a      	movs	r2, #10
 8001132:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	@ (8001148 <MX_SPI2_Init+0x64>)
 8001136:	f002 fe35 	bl	8003da4 <HAL_SPI_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001140:	f000 fa14 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000148 	.word	0x20000148
 800114c:	40003800 	.word	0x40003800

08001150 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	463b      	mov	r3, r7
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800116c:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <MX_TIM3_Init+0x94>)
 800116e:	4a1e      	ldr	r2, [pc, #120]	@ (80011e8 <MX_TIM3_Init+0x98>)
 8001170:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 8001172:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <MX_TIM3_Init+0x94>)
 8001174:	220b      	movs	r2, #11
 8001176:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001178:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <MX_TIM3_Init+0x94>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800117e:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <MX_TIM3_Init+0x94>)
 8001180:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001184:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <MX_TIM3_Init+0x94>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118c:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <MX_TIM3_Init+0x94>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001192:	4814      	ldr	r0, [pc, #80]	@ (80011e4 <MX_TIM3_Init+0x94>)
 8001194:	f003 f8b0 	bl	80042f8 <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800119e:	f000 f9e5 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	4619      	mov	r1, r3
 80011ae:	480d      	ldr	r0, [pc, #52]	@ (80011e4 <MX_TIM3_Init+0x94>)
 80011b0:	f003 f9e1 	bl	8004576 <HAL_TIM_ConfigClockSource>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80011ba:	f000 f9d7 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	@ (80011e4 <MX_TIM3_Init+0x94>)
 80011cc:	f003 fc02 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011d6:	f000 f9c9 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200001a0 	.word	0x200001a0
 80011e8:	40000400 	.word	0x40000400

080011ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f2:	463b      	mov	r3, r7
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <MX_TIM6_Init+0x64>)
 80011fc:	4a15      	ldr	r2, [pc, #84]	@ (8001254 <MX_TIM6_Init+0x68>)
 80011fe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001200:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <MX_TIM6_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <MX_TIM6_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800120c:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <MX_TIM6_Init+0x64>)
 800120e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001212:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <MX_TIM6_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800121a:	480d      	ldr	r0, [pc, #52]	@ (8001250 <MX_TIM6_Init+0x64>)
 800121c:	f003 f86c 	bl	80042f8 <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001226:	f000 f9a1 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800122a:	2310      	movs	r3, #16
 800122c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001232:	463b      	mov	r3, r7
 8001234:	4619      	mov	r1, r3
 8001236:	4806      	ldr	r0, [pc, #24]	@ (8001250 <MX_TIM6_Init+0x64>)
 8001238:	f003 fbcc 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001242:	f000 f993 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200001e8 	.word	0x200001e8
 8001254:	40001000 	.word	0x40001000

08001258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800125c:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 800125e:	4a12      	ldr	r2, [pc, #72]	@ (80012a8 <MX_USART2_UART_Init+0x50>)
 8001260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001264:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001290:	f003 fc30 	bl	8004af4 <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800129a:	f000 f967 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000230 	.word	0x20000230
 80012a8:	40004400 	.word	0x40004400

080012ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80012b8:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ba:	2204      	movs	r2, #4
 80012bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012be:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c0:	2202      	movs	r2, #2
 80012c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012cc:	2202      	movs	r2, #2
 80012ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d8:	2200      	movs	r2, #0
 80012da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012dc:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012de:	2200      	movs	r2, #0
 80012e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f0:	f001 f8a2 	bl	8002438 <HAL_PCD_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80012fa:	f000 f937 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000278 	.word	0x20000278

08001308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	@ 0x30
 800130c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	4b8c      	ldr	r3, [pc, #560]	@ (8001554 <MX_GPIO_Init+0x24c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a8b      	ldr	r2, [pc, #556]	@ (8001554 <MX_GPIO_Init+0x24c>)
 8001328:	f043 0310 	orr.w	r3, r3, #16
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b89      	ldr	r3, [pc, #548]	@ (8001554 <MX_GPIO_Init+0x24c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	4b85      	ldr	r3, [pc, #532]	@ (8001554 <MX_GPIO_Init+0x24c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	4a84      	ldr	r2, [pc, #528]	@ (8001554 <MX_GPIO_Init+0x24c>)
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	6313      	str	r3, [r2, #48]	@ 0x30
 800134a:	4b82      	ldr	r3, [pc, #520]	@ (8001554 <MX_GPIO_Init+0x24c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b7e      	ldr	r3, [pc, #504]	@ (8001554 <MX_GPIO_Init+0x24c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a7d      	ldr	r2, [pc, #500]	@ (8001554 <MX_GPIO_Init+0x24c>)
 8001360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b7b      	ldr	r3, [pc, #492]	@ (8001554 <MX_GPIO_Init+0x24c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b77      	ldr	r3, [pc, #476]	@ (8001554 <MX_GPIO_Init+0x24c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a76      	ldr	r2, [pc, #472]	@ (8001554 <MX_GPIO_Init+0x24c>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b74      	ldr	r3, [pc, #464]	@ (8001554 <MX_GPIO_Init+0x24c>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b70      	ldr	r3, [pc, #448]	@ (8001554 <MX_GPIO_Init+0x24c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a6f      	ldr	r2, [pc, #444]	@ (8001554 <MX_GPIO_Init+0x24c>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b6d      	ldr	r3, [pc, #436]	@ (8001554 <MX_GPIO_Init+0x24c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b69      	ldr	r3, [pc, #420]	@ (8001554 <MX_GPIO_Init+0x24c>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a68      	ldr	r2, [pc, #416]	@ (8001554 <MX_GPIO_Init+0x24c>)
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b66      	ldr	r3, [pc, #408]	@ (8001554 <MX_GPIO_Init+0x24c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2108      	movs	r1, #8
 80013ca:	4863      	ldr	r0, [pc, #396]	@ (8001558 <MX_GPIO_Init+0x250>)
 80013cc:	f000 febc 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CS_Pin|DAT_COM_Pin|RST_Pin|PWR_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f242 2182 	movw	r1, #8834	@ 0x2282
 80013d6:	4861      	ldr	r0, [pc, #388]	@ (800155c <MX_GPIO_Init+0x254>)
 80013d8:	f000 feb6 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	2101      	movs	r1, #1
 80013e0:	485e      	ldr	r0, [pc, #376]	@ (800155c <MX_GPIO_Init+0x254>)
 80013e2:	f000 feb1 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013e6:	2200      	movs	r2, #0
 80013e8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80013ec:	485c      	ldr	r0, [pc, #368]	@ (8001560 <MX_GPIO_Init+0x258>)
 80013ee:	f000 feab 	bl	8002148 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80013f2:	2308      	movs	r3, #8
 80013f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4853      	ldr	r0, [pc, #332]	@ (8001558 <MX_GPIO_Init+0x250>)
 800140a:	f000 fce9 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin OTG_FS_PowerSwitchOn_Pin DAT_COM_Pin RST_Pin
                           PWR_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|OTG_FS_PowerSwitchOn_Pin|DAT_COM_Pin|RST_Pin
 800140e:	f242 2383 	movw	r3, #8835	@ 0x2283
 8001412:	61fb      	str	r3, [r7, #28]
                          |PWR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	484d      	ldr	r0, [pc, #308]	@ (800155c <MX_GPIO_Init+0x254>)
 8001428:	f000 fcda 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800142c:	2308      	movs	r3, #8
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800143c:	2305      	movs	r3, #5
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	4845      	ldr	r0, [pc, #276]	@ (800155c <MX_GPIO_Init+0x254>)
 8001448:	f000 fcca 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800144c:	2301      	movs	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001450:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4619      	mov	r1, r3
 8001460:	4840      	ldr	r0, [pc, #256]	@ (8001564 <MX_GPIO_Init+0x25c>)
 8001462:	f000 fcbd 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001466:	2310      	movs	r3, #16
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001476:	2306      	movs	r3, #6
 8001478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	4838      	ldr	r0, [pc, #224]	@ (8001564 <MX_GPIO_Init+0x25c>)
 8001482:	f000 fcad 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001486:	2304      	movs	r3, #4
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	4619      	mov	r1, r3
 8001498:	4833      	ldr	r0, [pc, #204]	@ (8001568 <MX_GPIO_Init+0x260>)
 800149a:	f000 fca1 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800149e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014b0:	2305      	movs	r3, #5
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4619      	mov	r1, r3
 80014ba:	482b      	ldr	r0, [pc, #172]	@ (8001568 <MX_GPIO_Init+0x260>)
 80014bc:	f000 fc90 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014c0:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80014c4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	4821      	ldr	r0, [pc, #132]	@ (8001560 <MX_GPIO_Init+0x258>)
 80014da:	f000 fc81 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 80014de:	2340      	movs	r3, #64	@ 0x40
 80014e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	4619      	mov	r1, r3
 80014f0:	481a      	ldr	r0, [pc, #104]	@ (800155c <MX_GPIO_Init+0x254>)
 80014f2:	f000 fc75 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 80014f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001508:	2306      	movs	r3, #6
 800150a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	4619      	mov	r1, r3
 8001512:	4812      	ldr	r0, [pc, #72]	@ (800155c <MX_GPIO_Init+0x254>)
 8001514:	f000 fc64 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001518:	2320      	movs	r3, #32
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4619      	mov	r1, r3
 800152a:	480d      	ldr	r0, [pc, #52]	@ (8001560 <MX_GPIO_Init+0x258>)
 800152c:	f000 fc58 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001530:	2302      	movs	r3, #2
 8001532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001534:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001538:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	4619      	mov	r1, r3
 8001544:	4804      	ldr	r0, [pc, #16]	@ (8001558 <MX_GPIO_Init+0x250>)
 8001546:	f000 fc4b 	bl	8001de0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800154a:	bf00      	nop
 800154c:	3730      	adds	r7, #48	@ 0x30
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40021000 	.word	0x40021000
 800155c:	40020800 	.word	0x40020800
 8001560:	40020c00 	.word	0x40020c00
 8001564:	40020000 	.word	0x40020000
 8001568:	40020400 	.word	0x40020400

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <Error_Handler+0x8>

08001578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <HAL_MspInit+0x4c>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001586:	4a0f      	ldr	r2, [pc, #60]	@ (80015c4 <HAL_MspInit+0x4c>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800158c:	6453      	str	r3, [r2, #68]	@ 0x44
 800158e:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <HAL_MspInit+0x4c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <HAL_MspInit+0x4c>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	4a08      	ldr	r2, [pc, #32]	@ (80015c4 <HAL_MspInit+0x4c>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HAL_MspInit+0x4c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015b6:	2007      	movs	r0, #7
 80015b8:	f000 fbd0 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800

080015c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	@ 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a19      	ldr	r2, [pc, #100]	@ (800164c <HAL_I2C_MspInit+0x84>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d12c      	bne.n	8001644 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <HAL_I2C_MspInit+0x88>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a17      	ldr	r2, [pc, #92]	@ (8001650 <HAL_I2C_MspInit+0x88>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <HAL_I2C_MspInit+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001606:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800160a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160c:	2312      	movs	r3, #18
 800160e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001610:	2301      	movs	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001618:	2304      	movs	r3, #4
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	480c      	ldr	r0, [pc, #48]	@ (8001654 <HAL_I2C_MspInit+0x8c>)
 8001624:	f000 fbdc 	bl	8001de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <HAL_I2C_MspInit+0x88>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001630:	4a07      	ldr	r2, [pc, #28]	@ (8001650 <HAL_I2C_MspInit+0x88>)
 8001632:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001636:	6413      	str	r3, [r2, #64]	@ 0x40
 8001638:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <HAL_I2C_MspInit+0x88>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	@ 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40005400 	.word	0x40005400
 8001650:	40023800 	.word	0x40023800
 8001654:	40020400 	.word	0x40020400

08001658 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08c      	sub	sp, #48	@ 0x30
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 031c 	add.w	r3, r7, #28
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a32      	ldr	r2, [pc, #200]	@ (8001740 <HAL_SPI_MspInit+0xe8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d12c      	bne.n	80016d4 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	4b31      	ldr	r3, [pc, #196]	@ (8001744 <HAL_SPI_MspInit+0xec>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	4a30      	ldr	r2, [pc, #192]	@ (8001744 <HAL_SPI_MspInit+0xec>)
 8001684:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001688:	6453      	str	r3, [r2, #68]	@ 0x44
 800168a:	4b2e      	ldr	r3, [pc, #184]	@ (8001744 <HAL_SPI_MspInit+0xec>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001692:	61bb      	str	r3, [r7, #24]
 8001694:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	4b2a      	ldr	r3, [pc, #168]	@ (8001744 <HAL_SPI_MspInit+0xec>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	4a29      	ldr	r2, [pc, #164]	@ (8001744 <HAL_SPI_MspInit+0xec>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a6:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <HAL_SPI_MspInit+0xec>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80016b2:	23e0      	movs	r3, #224	@ 0xe0
 80016b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016c2:	2305      	movs	r3, #5
 80016c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	481e      	ldr	r0, [pc, #120]	@ (8001748 <HAL_SPI_MspInit+0xf0>)
 80016ce:	f000 fb87 	bl	8001de0 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80016d2:	e031      	b.n	8001738 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1c      	ldr	r2, [pc, #112]	@ (800174c <HAL_SPI_MspInit+0xf4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d12c      	bne.n	8001738 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <HAL_SPI_MspInit+0xec>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	4a17      	ldr	r2, [pc, #92]	@ (8001744 <HAL_SPI_MspInit+0xec>)
 80016e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <HAL_SPI_MspInit+0xec>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_SPI_MspInit+0xec>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a10      	ldr	r2, [pc, #64]	@ (8001744 <HAL_SPI_MspInit+0xec>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <HAL_SPI_MspInit+0xec>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001716:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001728:	2305      	movs	r3, #5
 800172a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	4807      	ldr	r0, [pc, #28]	@ (8001750 <HAL_SPI_MspInit+0xf8>)
 8001734:	f000 fb54 	bl	8001de0 <HAL_GPIO_Init>
}
 8001738:	bf00      	nop
 800173a:	3730      	adds	r7, #48	@ 0x30
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40013000 	.word	0x40013000
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000
 800174c:	40003800 	.word	0x40003800
 8001750:	40020400 	.word	0x40020400

08001754 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a18      	ldr	r2, [pc, #96]	@ (80017c4 <HAL_TIM_Base_MspInit+0x70>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d116      	bne.n	8001794 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <HAL_TIM_Base_MspInit+0x74>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	4a16      	ldr	r2, [pc, #88]	@ (80017c8 <HAL_TIM_Base_MspInit+0x74>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6413      	str	r3, [r2, #64]	@ 0x40
 8001776:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <HAL_TIM_Base_MspInit+0x74>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	201d      	movs	r0, #29
 8001788:	f000 faf3 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800178c:	201d      	movs	r0, #29
 800178e:	f000 fb0c 	bl	8001daa <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001792:	e012      	b.n	80017ba <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0c      	ldr	r2, [pc, #48]	@ (80017cc <HAL_TIM_Base_MspInit+0x78>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d10d      	bne.n	80017ba <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <HAL_TIM_Base_MspInit+0x74>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	4a08      	ldr	r2, [pc, #32]	@ (80017c8 <HAL_TIM_Base_MspInit+0x74>)
 80017a8:	f043 0310 	orr.w	r3, r3, #16
 80017ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_TIM_Base_MspInit+0x74>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40000400 	.word	0x40000400
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40001000 	.word	0x40001000

080017d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	@ 0x28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a19      	ldr	r2, [pc, #100]	@ (8001854 <HAL_UART_MspInit+0x84>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d12b      	bne.n	800184a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <HAL_UART_MspInit+0x88>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	4a17      	ldr	r2, [pc, #92]	@ (8001858 <HAL_UART_MspInit+0x88>)
 80017fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001800:	6413      	str	r3, [r2, #64]	@ 0x40
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <HAL_UART_MspInit+0x88>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <HAL_UART_MspInit+0x88>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a10      	ldr	r2, [pc, #64]	@ (8001858 <HAL_UART_MspInit+0x88>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <HAL_UART_MspInit+0x88>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800182a:	230c      	movs	r3, #12
 800182c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800183a:	2307      	movs	r3, #7
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	@ (800185c <HAL_UART_MspInit+0x8c>)
 8001846:	f000 facb 	bl	8001de0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	@ 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40004400 	.word	0x40004400
 8001858:	40023800 	.word	0x40023800
 800185c:	40020000 	.word	0x40020000

08001860 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	@ 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001880:	d147      	bne.n	8001912 <HAL_PCD_MspInit+0xb2>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b25      	ldr	r3, [pc, #148]	@ (800191c <HAL_PCD_MspInit+0xbc>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	4a24      	ldr	r2, [pc, #144]	@ (800191c <HAL_PCD_MspInit+0xbc>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	@ 0x30
 8001892:	4b22      	ldr	r3, [pc, #136]	@ (800191c <HAL_PCD_MspInit+0xbc>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800189e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	481b      	ldr	r0, [pc, #108]	@ (8001920 <HAL_PCD_MspInit+0xc0>)
 80018b4:	f000 fa94 	bl	8001de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80018b8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80018bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018ca:	230a      	movs	r3, #10
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4812      	ldr	r0, [pc, #72]	@ (8001920 <HAL_PCD_MspInit+0xc0>)
 80018d6:	f000 fa83 	bl	8001de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <HAL_PCD_MspInit+0xbc>)
 80018dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018de:	4a0f      	ldr	r2, [pc, #60]	@ (800191c <HAL_PCD_MspInit+0xbc>)
 80018e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018e4:	6353      	str	r3, [r2, #52]	@ 0x34
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <HAL_PCD_MspInit+0xbc>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	4a0b      	ldr	r2, [pc, #44]	@ (800191c <HAL_PCD_MspInit+0xbc>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018f6:	4b09      	ldr	r3, [pc, #36]	@ (800191c <HAL_PCD_MspInit+0xbc>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	2043      	movs	r0, #67	@ 0x43
 8001908:	f000 fa33 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800190c:	2043      	movs	r0, #67	@ 0x43
 800190e:	f000 fa4c 	bl	8001daa <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	@ 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40020000 	.word	0x40020000

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <NMI_Handler+0x4>

0800192c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <MemManage_Handler+0x4>

0800193c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <UsageFault_Handler+0x4>

0800194c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197a:	f000 f8db 	bl	8001b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <TIM3_IRQHandler+0x10>)
 800198a:	f002 fd04 	bl	8004396 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200001a0 	.word	0x200001a0

08001998 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <OTG_FS_IRQHandler+0x10>)
 800199e:	f000 fe5a 	bl	8002656 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000278 	.word	0x20000278

080019ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4a14      	ldr	r2, [pc, #80]	@ (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c0:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c8:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	@ (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019dc:	f004 fba8 	bl	8006130 <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f2:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <_sbrk+0x64>)
 80019fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20020000 	.word	0x20020000
 8001a0c:	00004000 	.word	0x00004000
 8001a10:	2000075c 	.word	0x2000075c
 8001a14:	200008b0 	.word	0x200008b0

08001a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <SystemInit+0x20>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a22:	4a05      	ldr	r2, [pc, #20]	@ (8001a38 <SystemInit+0x20>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a40:	f7ff ffea 	bl	8001a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a44:	480c      	ldr	r0, [pc, #48]	@ (8001a78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a46:	490d      	ldr	r1, [pc, #52]	@ (8001a7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a48:	4a0d      	ldr	r2, [pc, #52]	@ (8001a80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a4c:	e002      	b.n	8001a54 <LoopCopyDataInit>

08001a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a52:	3304      	adds	r3, #4

08001a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a58:	d3f9      	bcc.n	8001a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a60:	e001      	b.n	8001a66 <LoopFillZerobss>

08001a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a64:	3204      	adds	r2, #4

08001a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a68:	d3fb      	bcc.n	8001a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f004 fb67 	bl	800613c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6e:	f7ff f9a1 	bl	8000db4 <main>
  bx  lr    
 8001a72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a7c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001a80:	08009488 	.word	0x08009488
  ldr r2, =_sbss
 8001a84:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001a88:	200008ac 	.word	0x200008ac

08001a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <ADC_IRQHandler>
	...

08001a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <HAL_Init+0x40>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad0 <HAL_Init+0x40>)
 8001a9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <HAL_Init+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad0 <HAL_Init+0x40>)
 8001aa6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aac:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <HAL_Init+0x40>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a07      	ldr	r2, [pc, #28]	@ (8001ad0 <HAL_Init+0x40>)
 8001ab2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f000 f94f 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f000 f808 	bl	8001ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac4:	f7ff fd58 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00

08001ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <HAL_InitTick+0x54>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_InitTick+0x58>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 f967 	bl	8001dc6 <HAL_SYSTICK_Config>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00e      	b.n	8001b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b0f      	cmp	r3, #15
 8001b06:	d80a      	bhi.n	8001b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f000 f92f 	bl	8001d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b14:	4a06      	ldr	r2, [pc, #24]	@ (8001b30 <HAL_InitTick+0x5c>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e000      	b.n	8001b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	20000004 	.word	0x20000004

08001b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <HAL_IncTick+0x20>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <HAL_IncTick+0x24>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	4a04      	ldr	r2, [pc, #16]	@ (8001b58 <HAL_IncTick+0x24>)
 8001b46:	6013      	str	r3, [r2, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000008 	.word	0x20000008
 8001b58:	20000760 	.word	0x20000760

08001b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b60:	4b03      	ldr	r3, [pc, #12]	@ (8001b70 <HAL_GetTick+0x14>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000760 	.word	0x20000760

08001b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b7c:	f7ff ffee 	bl	8001b5c <HAL_GetTick>
 8001b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8c:	d005      	beq.n	8001b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb8 <HAL_Delay+0x44>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b9a:	bf00      	nop
 8001b9c:	f7ff ffde 	bl	8001b5c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d8f7      	bhi.n	8001b9c <HAL_Delay+0x28>
  {
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000008 	.word	0x20000008

08001bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bee:	4a04      	ldr	r2, [pc, #16]	@ (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	60d3      	str	r3, [r2, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	db0b      	blt.n	8001c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4907      	ldr	r1, [pc, #28]	@ (8001c58 <__NVIC_EnableIRQ+0x38>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	2001      	movs	r0, #1
 8001c42:	fa00 f202 	lsl.w	r2, r0, r2
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e100 	.word	0xe000e100

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	@ (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	@ (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	@ 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	@ 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d28:	d301      	bcc.n	8001d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00f      	b.n	8001d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <SysTick_Config+0x40>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d36:	210f      	movs	r1, #15
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f7ff ff8e 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d40:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <SysTick_Config+0x40>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d46:	4b04      	ldr	r3, [pc, #16]	@ (8001d58 <SysTick_Config+0x40>)
 8001d48:	2207      	movs	r2, #7
 8001d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	e000e010 	.word	0xe000e010

08001d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff29 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d84:	f7ff ff3e 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	6978      	ldr	r0, [r7, #20]
 8001d90:	f7ff ff8e 	bl	8001cb0 <NVIC_EncodePriority>
 8001d94:	4602      	mov	r2, r0
 8001d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff5d 	bl	8001c5c <__NVIC_SetPriority>
}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff31 	bl	8001c20 <__NVIC_EnableIRQ>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffa2 	bl	8001d18 <SysTick_Config>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	@ 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e16b      	b.n	80020d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	f040 815a 	bne.w	80020ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d005      	beq.n	8001e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d130      	bne.n	8001e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 0201 	and.w	r2, r3, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d017      	beq.n	8001ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d123      	bne.n	8001f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	69b9      	ldr	r1, [r7, #24]
 8001f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0203 	and.w	r2, r3, #3
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80b4 	beq.w	80020ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b60      	ldr	r3, [pc, #384]	@ (80020ec <HAL_GPIO_Init+0x30c>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6e:	4a5f      	ldr	r2, [pc, #380]	@ (80020ec <HAL_GPIO_Init+0x30c>)
 8001f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f76:	4b5d      	ldr	r3, [pc, #372]	@ (80020ec <HAL_GPIO_Init+0x30c>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f82:	4a5b      	ldr	r2, [pc, #364]	@ (80020f0 <HAL_GPIO_Init+0x310>)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	3302      	adds	r3, #2
 8001f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	220f      	movs	r2, #15
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a52      	ldr	r2, [pc, #328]	@ (80020f4 <HAL_GPIO_Init+0x314>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d02b      	beq.n	8002006 <HAL_GPIO_Init+0x226>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a51      	ldr	r2, [pc, #324]	@ (80020f8 <HAL_GPIO_Init+0x318>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d025      	beq.n	8002002 <HAL_GPIO_Init+0x222>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a50      	ldr	r2, [pc, #320]	@ (80020fc <HAL_GPIO_Init+0x31c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d01f      	beq.n	8001ffe <HAL_GPIO_Init+0x21e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4f      	ldr	r2, [pc, #316]	@ (8002100 <HAL_GPIO_Init+0x320>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d019      	beq.n	8001ffa <HAL_GPIO_Init+0x21a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4e      	ldr	r2, [pc, #312]	@ (8002104 <HAL_GPIO_Init+0x324>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_GPIO_Init+0x216>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4d      	ldr	r2, [pc, #308]	@ (8002108 <HAL_GPIO_Init+0x328>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_GPIO_Init+0x212>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4c      	ldr	r2, [pc, #304]	@ (800210c <HAL_GPIO_Init+0x32c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <HAL_GPIO_Init+0x20e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4b      	ldr	r2, [pc, #300]	@ (8002110 <HAL_GPIO_Init+0x330>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d101      	bne.n	8001fea <HAL_GPIO_Init+0x20a>
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	e00e      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001fea:	2308      	movs	r3, #8
 8001fec:	e00c      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001fee:	2306      	movs	r3, #6
 8001ff0:	e00a      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	e008      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8002006:	2300      	movs	r3, #0
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002018:	4935      	ldr	r1, [pc, #212]	@ (80020f0 <HAL_GPIO_Init+0x310>)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002026:	4b3b      	ldr	r3, [pc, #236]	@ (8002114 <HAL_GPIO_Init+0x334>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800204a:	4a32      	ldr	r2, [pc, #200]	@ (8002114 <HAL_GPIO_Init+0x334>)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002050:	4b30      	ldr	r3, [pc, #192]	@ (8002114 <HAL_GPIO_Init+0x334>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002074:	4a27      	ldr	r2, [pc, #156]	@ (8002114 <HAL_GPIO_Init+0x334>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800207a:	4b26      	ldr	r3, [pc, #152]	@ (8002114 <HAL_GPIO_Init+0x334>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800209e:	4a1d      	ldr	r2, [pc, #116]	@ (8002114 <HAL_GPIO_Init+0x334>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <HAL_GPIO_Init+0x334>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c8:	4a12      	ldr	r2, [pc, #72]	@ (8002114 <HAL_GPIO_Init+0x334>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3301      	adds	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b0f      	cmp	r3, #15
 80020d8:	f67f ae90 	bls.w	8001dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3724      	adds	r7, #36	@ 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40013800 	.word	0x40013800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020c00 	.word	0x40020c00
 8002104:	40021000 	.word	0x40021000
 8002108:	40021400 	.word	0x40021400
 800210c:	40021800 	.word	0x40021800
 8002110:	40021c00 	.word	0x40021c00
 8002114:	40013c00 	.word	0x40013c00

08002118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	887b      	ldrh	r3, [r7, #2]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	e001      	b.n	800213a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
 8002154:	4613      	mov	r3, r2
 8002156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002158:	787b      	ldrb	r3, [r7, #1]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002164:	e003      	b.n	800216e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002166:	887b      	ldrh	r3, [r7, #2]
 8002168:	041a      	lsls	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	619a      	str	r2, [r3, #24]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800217a:	b480      	push	{r7}
 800217c:	b085      	sub	sp, #20
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800218c:	887a      	ldrh	r2, [r7, #2]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4013      	ands	r3, r2
 8002192:	041a      	lsls	r2, r3, #16
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43d9      	mvns	r1, r3
 8002198:	887b      	ldrh	r3, [r7, #2]
 800219a:	400b      	ands	r3, r1
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	619a      	str	r2, [r3, #24]
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e12b      	b.n	800241a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff f9f6 	bl	80015c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2224      	movs	r2, #36	@ 0x24
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002202:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002212:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002214:	f001 fd9e 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 8002218:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4a81      	ldr	r2, [pc, #516]	@ (8002424 <HAL_I2C_Init+0x274>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d807      	bhi.n	8002234 <HAL_I2C_Init+0x84>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4a80      	ldr	r2, [pc, #512]	@ (8002428 <HAL_I2C_Init+0x278>)
 8002228:	4293      	cmp	r3, r2
 800222a:	bf94      	ite	ls
 800222c:	2301      	movls	r3, #1
 800222e:	2300      	movhi	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	e006      	b.n	8002242 <HAL_I2C_Init+0x92>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4a7d      	ldr	r2, [pc, #500]	@ (800242c <HAL_I2C_Init+0x27c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	bf94      	ite	ls
 800223c:	2301      	movls	r3, #1
 800223e:	2300      	movhi	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e0e7      	b.n	800241a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4a78      	ldr	r2, [pc, #480]	@ (8002430 <HAL_I2C_Init+0x280>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	0c9b      	lsrs	r3, r3, #18
 8002254:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	430a      	orrs	r2, r1
 8002268:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4a6a      	ldr	r2, [pc, #424]	@ (8002424 <HAL_I2C_Init+0x274>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d802      	bhi.n	8002284 <HAL_I2C_Init+0xd4>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	3301      	adds	r3, #1
 8002282:	e009      	b.n	8002298 <HAL_I2C_Init+0xe8>
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	4a69      	ldr	r2, [pc, #420]	@ (8002434 <HAL_I2C_Init+0x284>)
 8002290:	fba2 2303 	umull	r2, r3, r2, r3
 8002294:	099b      	lsrs	r3, r3, #6
 8002296:	3301      	adds	r3, #1
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	430b      	orrs	r3, r1
 800229e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	495c      	ldr	r1, [pc, #368]	@ (8002424 <HAL_I2C_Init+0x274>)
 80022b4:	428b      	cmp	r3, r1
 80022b6:	d819      	bhi.n	80022ec <HAL_I2C_Init+0x13c>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1e59      	subs	r1, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80022c6:	1c59      	adds	r1, r3, #1
 80022c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022cc:	400b      	ands	r3, r1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_I2C_Init+0x138>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1e59      	subs	r1, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80022e0:	3301      	adds	r3, #1
 80022e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e6:	e051      	b.n	800238c <HAL_I2C_Init+0x1dc>
 80022e8:	2304      	movs	r3, #4
 80022ea:	e04f      	b.n	800238c <HAL_I2C_Init+0x1dc>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d111      	bne.n	8002318 <HAL_I2C_Init+0x168>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1e58      	subs	r0, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	440b      	add	r3, r1
 8002302:	fbb0 f3f3 	udiv	r3, r0, r3
 8002306:	3301      	adds	r3, #1
 8002308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	e012      	b.n	800233e <HAL_I2C_Init+0x18e>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1e58      	subs	r0, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	0099      	lsls	r1, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	fbb0 f3f3 	udiv	r3, r0, r3
 800232e:	3301      	adds	r3, #1
 8002330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Init+0x196>
 8002342:	2301      	movs	r3, #1
 8002344:	e022      	b.n	800238c <HAL_I2C_Init+0x1dc>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10e      	bne.n	800236c <HAL_I2C_Init+0x1bc>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1e58      	subs	r0, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6859      	ldr	r1, [r3, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	440b      	add	r3, r1
 800235c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002360:	3301      	adds	r3, #1
 8002362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800236a:	e00f      	b.n	800238c <HAL_I2C_Init+0x1dc>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1e58      	subs	r0, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	0099      	lsls	r1, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002382:	3301      	adds	r3, #1
 8002384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002388:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	6809      	ldr	r1, [r1, #0]
 8002390:	4313      	orrs	r3, r2
 8002392:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69da      	ldr	r2, [r3, #28]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6911      	ldr	r1, [r2, #16]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68d2      	ldr	r2, [r2, #12]
 80023c6:	4311      	orrs	r1, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	430b      	orrs	r3, r1
 80023ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695a      	ldr	r2, [r3, #20]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	000186a0 	.word	0x000186a0
 8002428:	001e847f 	.word	0x001e847f
 800242c:	003d08ff 	.word	0x003d08ff
 8002430:	431bde83 	.word	0x431bde83
 8002434:	10624dd3 	.word	0x10624dd3

08002438 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af02      	add	r7, sp, #8
 800243e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e101      	b.n	800264e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d106      	bne.n	800246a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff f9fb 	bl	8001860 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2203      	movs	r2, #3
 800246e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002478:	d102      	bne.n	8002480 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f003 f847 	bl	8005518 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7c1a      	ldrb	r2, [r3, #16]
 8002492:	f88d 2000 	strb.w	r2, [sp]
 8002496:	3304      	adds	r3, #4
 8002498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800249a:	f002 ff37 	bl	800530c <USB_CoreInit>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0ce      	b.n	800264e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 f83f 	bl	800553a <USB_SetCurrentMode>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2202      	movs	r2, #2
 80024c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e0bf      	b.n	800264e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	e04a      	b.n	800256a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	3315      	adds	r3, #21
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	3314      	adds	r3, #20
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	b298      	uxth	r0, r3
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	332e      	adds	r3, #46	@ 0x2e
 8002510:	4602      	mov	r2, r0
 8002512:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	3318      	adds	r3, #24
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	331c      	adds	r3, #28
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800253c:	7bfa      	ldrb	r2, [r7, #15]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	3320      	adds	r3, #32
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	3324      	adds	r3, #36	@ 0x24
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	3301      	adds	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	791b      	ldrb	r3, [r3, #4]
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	429a      	cmp	r2, r3
 8002572:	d3af      	bcc.n	80024d4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
 8002578:	e044      	b.n	8002604 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800257a:	7bfa      	ldrb	r2, [r7, #15]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025bc:	7bfa      	ldrb	r2, [r7, #15]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025d2:	7bfa      	ldrb	r2, [r7, #15]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	3301      	adds	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	791b      	ldrb	r3, [r3, #4]
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	429a      	cmp	r2, r3
 800260c:	d3b5      	bcc.n	800257a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	7c1a      	ldrb	r2, [r3, #16]
 8002616:	f88d 2000 	strb.w	r2, [sp]
 800261a:	3304      	adds	r3, #4
 800261c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800261e:	f002 ffd9 	bl	80055d4 <USB_DevInit>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e00c      	b.n	800264e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f003 fb06 	bl	8005c58 <USB_DevDisconnect>

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002656:	b590      	push	{r4, r7, lr}
 8002658:	b08d      	sub	sp, #52	@ 0x34
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f003 fba7 	bl	8005dc0 <USB_GetMode>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	f040 848c 	bne.w	8002f92 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f003 fb0b 	bl	8005c9a <USB_ReadInterrupts>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 8482 	beq.w	8002f90 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f003 faf8 	bl	8005c9a <USB_ReadInterrupts>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d107      	bne.n	80026c4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f002 0202 	and.w	r2, r2, #2
 80026c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f003 fae6 	bl	8005c9a <USB_ReadInterrupts>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b10      	cmp	r3, #16
 80026d6:	d161      	bne.n	800279c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0210 	bic.w	r2, r2, #16
 80026e6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	f003 020f 	and.w	r2, r3, #15
 80026f4:	4613      	mov	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	4413      	add	r3, r2
 8002704:	3304      	adds	r3, #4
 8002706:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800270e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002712:	d124      	bne.n	800275e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d035      	beq.n	800278c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800272a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800272e:	b29b      	uxth	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	6a38      	ldr	r0, [r7, #32]
 8002734:	f003 fa38 	bl	8005ba8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002744:	441a      	add	r2, r3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002756:	441a      	add	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	615a      	str	r2, [r3, #20]
 800275c:	e016      	b.n	800278c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002764:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002768:	d110      	bne.n	800278c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002770:	2208      	movs	r2, #8
 8002772:	4619      	mov	r1, r3
 8002774:	6a38      	ldr	r0, [r7, #32]
 8002776:	f003 fa17 	bl	8005ba8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002786:	441a      	add	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0210 	orr.w	r2, r2, #16
 800279a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f003 fa7a 	bl	8005c9a <USB_ReadInterrupts>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027b0:	f040 80a7 	bne.w	8002902 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f003 fa7f 	bl	8005cc0 <USB_ReadDevAllOutEpInterrupt>
 80027c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80027c4:	e099      	b.n	80028fa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 808e 	beq.w	80028ee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f003 faa3 	bl	8005d28 <USB_ReadDevOutEPInterrupt>
 80027e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00c      	beq.n	8002808 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027fa:	461a      	mov	r2, r3
 80027fc:	2301      	movs	r3, #1
 80027fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002800:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fcfc 	bl	8003200 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00c      	beq.n	800282c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	4413      	add	r3, r2
 800281a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800281e:	461a      	mov	r2, r3
 8002820:	2308      	movs	r3, #8
 8002822:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002824:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fdd2 	bl	80033d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	4413      	add	r3, r2
 800283e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002842:	461a      	mov	r2, r3
 8002844:	2310      	movs	r3, #16
 8002846:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d030      	beq.n	80028b4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800285a:	2b80      	cmp	r3, #128	@ 0x80
 800285c:	d109      	bne.n	8002872 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	69fa      	ldr	r2, [r7, #28]
 8002868:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800286c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002870:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	4413      	add	r3, r2
 8002884:	3304      	adds	r3, #4
 8002886:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	78db      	ldrb	r3, [r3, #3]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d108      	bne.n	80028a2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2200      	movs	r2, #0
 8002894:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	b2db      	uxtb	r3, r3
 800289a:	4619      	mov	r1, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 fbc5 	bl	800302c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ae:	461a      	mov	r2, r3
 80028b0:	2302      	movs	r3, #2
 80028b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f003 0320 	and.w	r3, r3, #32
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	015a      	lsls	r2, r3, #5
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ca:	461a      	mov	r2, r3
 80028cc:	2320      	movs	r3, #32
 80028ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028e6:	461a      	mov	r2, r3
 80028e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	3301      	adds	r3, #1
 80028f2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80028f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f6:	085b      	lsrs	r3, r3, #1
 80028f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80028fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f47f af62 	bne.w	80027c6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f003 f9c7 	bl	8005c9a <USB_ReadInterrupts>
 800290c:	4603      	mov	r3, r0
 800290e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002912:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002916:	f040 80db 	bne.w	8002ad0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f003 f9e8 	bl	8005cf4 <USB_ReadDevAllInEpInterrupt>
 8002924:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800292a:	e0cd      	b.n	8002ac8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800292c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 80c2 	beq.w	8002abc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f003 fa0e 	bl	8005d64 <USB_ReadDevInEPInterrupt>
 8002948:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d057      	beq.n	8002a04 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	2201      	movs	r2, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002968:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	43db      	mvns	r3, r3
 800296e:	69f9      	ldr	r1, [r7, #28]
 8002970:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002974:	4013      	ands	r3, r2
 8002976:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	4413      	add	r3, r2
 8002980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002984:	461a      	mov	r2, r3
 8002986:	2301      	movs	r3, #1
 8002988:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	799b      	ldrb	r3, [r3, #6]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d132      	bne.n	80029f8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	3320      	adds	r3, #32
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4403      	add	r3, r0
 80029b2:	331c      	adds	r3, #28
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4419      	add	r1, r3
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4403      	add	r3, r0
 80029c6:	3320      	adds	r3, #32
 80029c8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d113      	bne.n	80029f8 <HAL_PCD_IRQHandler+0x3a2>
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	3324      	adds	r3, #36	@ 0x24
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d108      	bne.n	80029f8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029f0:	461a      	mov	r2, r3
 80029f2:	2101      	movs	r1, #1
 80029f4:	f003 fa16 	bl	8005e24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	4619      	mov	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fad6 	bl	8002fb0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d008      	beq.n	8002a20 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2308      	movs	r3, #8
 8002a1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a36:	461a      	mov	r2, r3
 8002a38:	2310      	movs	r3, #16
 8002a3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a52:	461a      	mov	r2, r3
 8002a54:	2340      	movs	r3, #64	@ 0x40
 8002a56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d023      	beq.n	8002aaa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a64:	6a38      	ldr	r0, [r7, #32]
 8002a66:	f002 ff19 	bl	800589c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	3310      	adds	r3, #16
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	78db      	ldrb	r3, [r3, #3]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d108      	bne.n	8002a98 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	4619      	mov	r1, r3
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fad6 	bl	8003044 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ab4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fb15 	bl	80030e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	3301      	adds	r3, #1
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac4:	085b      	lsrs	r3, r3, #1
 8002ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f47f af2e 	bne.w	800292c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f003 f8e0 	bl	8005c9a <USB_ReadInterrupts>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ae4:	d122      	bne.n	8002b2c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d108      	bne.n	8002b16 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fca4 	bl	800345c <HAL_PCDEx_LPM_Callback>
 8002b14:	e002      	b.n	8002b1c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fa7e 	bl	8003018 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f003 f8b2 	bl	8005c9a <USB_ReadInterrupts>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b40:	d112      	bne.n	8002b68 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d102      	bne.n	8002b58 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fa56 	bl	8003004 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002b66:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f003 f894 	bl	8005c9a <USB_ReadInterrupts>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b7c:	f040 80b7 	bne.w	8002cee <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	69fa      	ldr	r2, [r7, #28]
 8002b8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2110      	movs	r1, #16
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f002 fe7e 	bl	800589c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ba4:	e046      	b.n	8002c34 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002bb8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bca:	0151      	lsls	r1, r2, #5
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	440a      	add	r2, r1
 8002bd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002bd4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002bd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002be6:	461a      	mov	r2, r3
 8002be8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002bec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bfe:	0151      	lsls	r1, r2, #5
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	440a      	add	r2, r1
 8002c04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c08:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c1e:	0151      	lsls	r1, r2, #5
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	440a      	add	r2, r1
 8002c24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002c2c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c30:	3301      	adds	r3, #1
 8002c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	791b      	ldrb	r3, [r3, #4]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d3b2      	bcc.n	8002ba6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c4e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002c52:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7bdb      	ldrb	r3, [r3, #15]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d016      	beq.n	8002c8a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c66:	69fa      	ldr	r2, [r7, #28]
 8002c68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c6c:	f043 030b 	orr.w	r3, r3, #11
 8002c70:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c82:	f043 030b 	orr.w	r3, r3, #11
 8002c86:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c88:	e015      	b.n	8002cb6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c9c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002ca0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cb0:	f043 030b 	orr.w	r3, r3, #11
 8002cb4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cc4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002cc8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f003 f8a3 	bl	8005e24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002cec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f002 ffd1 	bl	8005c9a <USB_ReadInterrupts>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d02:	d123      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f003 f867 	bl	8005ddc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f002 fe3b 	bl	800598e <USB_GetDevSpeed>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681c      	ldr	r4, [r3, #0]
 8002d24:	f001 f80a 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8002d28:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d2e:	461a      	mov	r2, r3
 8002d30:	4620      	mov	r0, r4
 8002d32:	f002 fb4f 	bl	80053d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f95a 	bl	8002ff0 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002d4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f002 ffa2 	bl	8005c9a <USB_ReadInterrupts>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d10a      	bne.n	8002d76 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f93b 	bl	8002fdc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f002 0208 	and.w	r2, r2, #8
 8002d74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 ff8d 	bl	8005c9a <USB_ReadInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d86:	2b80      	cmp	r3, #128	@ 0x80
 8002d88:	d123      	bne.n	8002dd2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d96:	2301      	movs	r3, #1
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d9a:	e014      	b.n	8002dc6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d105      	bne.n	8002dc0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	4619      	mov	r1, r3
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f962 	bl	8003084 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	791b      	ldrb	r3, [r3, #4]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d3e4      	bcc.n	8002d9c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f002 ff5f 	bl	8005c9a <USB_ReadInterrupts>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002de2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002de6:	d13c      	bne.n	8002e62 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002de8:	2301      	movs	r3, #1
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dec:	e02b      	b.n	8002e46 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	3318      	adds	r3, #24
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d115      	bne.n	8002e40 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e14:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	da12      	bge.n	8002e40 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1e:	4613      	mov	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	3317      	adds	r3, #23
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f922 	bl	8003084 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e42:	3301      	adds	r3, #1
 8002e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	791b      	ldrb	r3, [r3, #4]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d3cd      	bcc.n	8002dee <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002e60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f002 ff17 	bl	8005c9a <USB_ReadInterrupts>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e76:	d156      	bne.n	8002f26 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e78:	2301      	movs	r3, #1
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7c:	e045      	b.n	8002f0a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e92:	4613      	mov	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d12e      	bne.n	8002f04 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ea6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	da2b      	bge.n	8002f04 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	0c1a      	lsrs	r2, r3, #16
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002eb6:	4053      	eors	r3, r2
 8002eb8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d121      	bne.n	8002f04 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10a      	bne.n	8002f04 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002efc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f00:	6053      	str	r3, [r2, #4]
            break;
 8002f02:	e008      	b.n	8002f16 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f06:	3301      	adds	r3, #1
 8002f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	791b      	ldrb	r3, [r3, #4]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d3b3      	bcc.n	8002e7e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f002 feb5 	bl	8005c9a <USB_ReadInterrupts>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f3a:	d10a      	bne.n	8002f52 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f88d 	bl	800305c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f002 fe9f 	bl	8005c9a <USB_ReadInterrupts>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d115      	bne.n	8002f92 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f879 	bl	8003070 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6859      	ldr	r1, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	e000      	b.n	8002f92 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002f90:	bf00      	nop
    }
  }
}
 8002f92:	3734      	adds	r7, #52	@ 0x34
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd90      	pop	{r4, r7, pc}

08002f98 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003094:	2b00      	cmp	r3, #0
 8003096:	da0c      	bge.n	80030b2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	f003 020f 	and.w	r2, r3, #15
 800309e:	4613      	mov	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	3310      	adds	r3, #16
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	4413      	add	r3, r2
 80030ac:	3304      	adds	r3, #4
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	e00c      	b.n	80030cc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	f003 020f 	and.w	r2, r3, #15
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4413      	add	r3, r2
 80030c8:	3304      	adds	r3, #4
 80030ca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68f9      	ldr	r1, [r7, #12]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f002 fc80 	bl	80059d8 <USB_EPStopXfer>
 80030d8:	4603      	mov	r3, r0
 80030da:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030dc:	7afb      	ldrb	r3, [r7, #11]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b08a      	sub	sp, #40	@ 0x28
 80030ea:	af02      	add	r7, sp, #8
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	3310      	adds	r3, #16
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	4413      	add	r3, r2
 800310a:	3304      	adds	r3, #4
 800310c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	429a      	cmp	r2, r3
 8003118:	d901      	bls.n	800311e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e06b      	b.n	80031f6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	429a      	cmp	r2, r3
 8003132:	d902      	bls.n	800313a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3303      	adds	r3, #3
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003142:	e02a      	b.n	800319a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	429a      	cmp	r2, r3
 8003158:	d902      	bls.n	8003160 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	3303      	adds	r3, #3
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	68d9      	ldr	r1, [r3, #12]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	b2da      	uxtb	r2, r3
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	4603      	mov	r3, r0
 800317c:	6978      	ldr	r0, [r7, #20]
 800317e:	f002 fcd5 	bl	8005b2c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	441a      	add	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	441a      	add	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d809      	bhi.n	80031c4 <PCD_WriteEmptyTxFifo+0xde>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d203      	bcs.n	80031c4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1bf      	bne.n	8003144 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d811      	bhi.n	80031f4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	2201      	movs	r2, #1
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	6939      	ldr	r1, [r7, #16]
 80031ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031f0:	4013      	ands	r3, r2
 80031f2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3720      	adds	r7, #32
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	333c      	adds	r3, #60	@ 0x3c
 8003218:	3304      	adds	r3, #4
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	4413      	add	r3, r2
 8003226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	799b      	ldrb	r3, [r3, #6]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d17b      	bne.n	800332e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d015      	beq.n	800326c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	4a61      	ldr	r2, [pc, #388]	@ (80033c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	f240 80b9 	bls.w	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80b3 	beq.w	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003262:	461a      	mov	r2, r3
 8003264:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003268:	6093      	str	r3, [r2, #8]
 800326a:	e0a7      	b.n	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003282:	461a      	mov	r2, r3
 8003284:	2320      	movs	r3, #32
 8003286:	6093      	str	r3, [r2, #8]
 8003288:	e098      	b.n	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003290:	2b00      	cmp	r3, #0
 8003292:	f040 8093 	bne.w	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	4a4b      	ldr	r2, [pc, #300]	@ (80033c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d90f      	bls.n	80032be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032b4:	461a      	mov	r2, r3
 80032b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032ba:	6093      	str	r3, [r2, #8]
 80032bc:	e07e      	b.n	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	4413      	add	r3, r2
 80032d0:	3304      	adds	r3, #4
 80032d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a1a      	ldr	r2, [r3, #32]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	0159      	lsls	r1, r3, #5
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	440b      	add	r3, r1
 80032e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ea:	1ad2      	subs	r2, r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d114      	bne.n	8003320 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003308:	461a      	mov	r2, r3
 800330a:	2101      	movs	r1, #1
 800330c:	f002 fd8a 	bl	8005e24 <USB_EP0_OutStart>
 8003310:	e006      	b.n	8003320 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	441a      	add	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	4619      	mov	r1, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff fe36 	bl	8002f98 <HAL_PCD_DataOutStageCallback>
 800332c:	e046      	b.n	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	4a26      	ldr	r2, [pc, #152]	@ (80033cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d124      	bne.n	8003380 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800334c:	461a      	mov	r2, r3
 800334e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003352:	6093      	str	r3, [r2, #8]
 8003354:	e032      	b.n	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800336c:	461a      	mov	r2, r3
 800336e:	2320      	movs	r3, #32
 8003370:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	4619      	mov	r1, r3
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff fe0d 	bl	8002f98 <HAL_PCD_DataOutStageCallback>
 800337e:	e01d      	b.n	80033bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d114      	bne.n	80033b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d108      	bne.n	80033b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033a8:	461a      	mov	r2, r3
 80033aa:	2100      	movs	r1, #0
 80033ac:	f002 fd3a 	bl	8005e24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	4619      	mov	r1, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff fdee 	bl	8002f98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3720      	adds	r7, #32
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	4f54300a 	.word	0x4f54300a
 80033cc:	4f54310a 	.word	0x4f54310a

080033d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	333c      	adds	r3, #60	@ 0x3c
 80033e8:	3304      	adds	r3, #4
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a15      	ldr	r2, [pc, #84]	@ (8003458 <PCD_EP_OutSetupPacket_int+0x88>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d90e      	bls.n	8003424 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800340c:	2b00      	cmp	r3, #0
 800340e:	d009      	beq.n	8003424 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4413      	add	r3, r2
 8003418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800341c:	461a      	mov	r2, r3
 800341e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003422:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff fdcf 	bl	8002fc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <PCD_EP_OutSetupPacket_int+0x88>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d90c      	bls.n	800344c <PCD_EP_OutSetupPacket_int+0x7c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	799b      	ldrb	r3, [r3, #6]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d108      	bne.n	800344c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003444:	461a      	mov	r2, r3
 8003446:	2101      	movs	r1, #1
 8003448:	f002 fcec 	bl	8005e24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	4f54300a 	.word	0x4f54300a

0800345c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e267      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d075      	beq.n	800357e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003492:	4b88      	ldr	r3, [pc, #544]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	2b04      	cmp	r3, #4
 800349c:	d00c      	beq.n	80034b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800349e:	4b85      	ldr	r3, [pc, #532]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d112      	bne.n	80034d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034aa:	4b82      	ldr	r3, [pc, #520]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034b6:	d10b      	bne.n	80034d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b8:	4b7e      	ldr	r3, [pc, #504]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d05b      	beq.n	800357c <HAL_RCC_OscConfig+0x108>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d157      	bne.n	800357c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e242      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034d8:	d106      	bne.n	80034e8 <HAL_RCC_OscConfig+0x74>
 80034da:	4b76      	ldr	r3, [pc, #472]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a75      	ldr	r2, [pc, #468]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	e01d      	b.n	8003524 <HAL_RCC_OscConfig+0xb0>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034f0:	d10c      	bne.n	800350c <HAL_RCC_OscConfig+0x98>
 80034f2:	4b70      	ldr	r3, [pc, #448]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a6f      	ldr	r2, [pc, #444]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 80034f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b6d      	ldr	r3, [pc, #436]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a6c      	ldr	r2, [pc, #432]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e00b      	b.n	8003524 <HAL_RCC_OscConfig+0xb0>
 800350c:	4b69      	ldr	r3, [pc, #420]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a68      	ldr	r2, [pc, #416]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	4b66      	ldr	r3, [pc, #408]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a65      	ldr	r2, [pc, #404]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 800351e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d013      	beq.n	8003554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fe fb16 	bl	8001b5c <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003534:	f7fe fb12 	bl	8001b5c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	@ 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e207      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	4b5b      	ldr	r3, [pc, #364]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0xc0>
 8003552:	e014      	b.n	800357e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7fe fb02 	bl	8001b5c <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800355c:	f7fe fafe 	bl	8001b5c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	@ 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e1f3      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356e:	4b51      	ldr	r3, [pc, #324]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0xe8>
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d063      	beq.n	8003652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800358a:	4b4a      	ldr	r3, [pc, #296]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003596:	4b47      	ldr	r3, [pc, #284]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d11c      	bne.n	80035dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035a2:	4b44      	ldr	r3, [pc, #272]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d116      	bne.n	80035dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ae:	4b41      	ldr	r3, [pc, #260]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_RCC_OscConfig+0x152>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e1c7      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c6:	4b3b      	ldr	r3, [pc, #236]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4937      	ldr	r1, [pc, #220]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035da:	e03a      	b.n	8003652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d020      	beq.n	8003626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e4:	4b34      	ldr	r3, [pc, #208]	@ (80036b8 <HAL_RCC_OscConfig+0x244>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7fe fab7 	bl	8001b5c <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f2:	f7fe fab3 	bl	8001b5c <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e1a8      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003604:	4b2b      	ldr	r3, [pc, #172]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003610:	4b28      	ldr	r3, [pc, #160]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4925      	ldr	r1, [pc, #148]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]
 8003624:	e015      	b.n	8003652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003626:	4b24      	ldr	r3, [pc, #144]	@ (80036b8 <HAL_RCC_OscConfig+0x244>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fe fa96 	bl	8001b5c <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003634:	f7fe fa92 	bl	8001b5c <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e187      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003646:	4b1b      	ldr	r3, [pc, #108]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d036      	beq.n	80036cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d016      	beq.n	8003694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003666:	4b15      	ldr	r3, [pc, #84]	@ (80036bc <HAL_RCC_OscConfig+0x248>)
 8003668:	2201      	movs	r2, #1
 800366a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366c:	f7fe fa76 	bl	8001b5c <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003674:	f7fe fa72 	bl	8001b5c <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e167      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003686:	4b0b      	ldr	r3, [pc, #44]	@ (80036b4 <HAL_RCC_OscConfig+0x240>)
 8003688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x200>
 8003692:	e01b      	b.n	80036cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003694:	4b09      	ldr	r3, [pc, #36]	@ (80036bc <HAL_RCC_OscConfig+0x248>)
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369a:	f7fe fa5f 	bl	8001b5c <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a0:	e00e      	b.n	80036c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a2:	f7fe fa5b 	bl	8001b5c <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d907      	bls.n	80036c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e150      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
 80036b4:	40023800 	.word	0x40023800
 80036b8:	42470000 	.word	0x42470000
 80036bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c0:	4b88      	ldr	r3, [pc, #544]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 80036c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1ea      	bne.n	80036a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 8097 	beq.w	8003808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036da:	2300      	movs	r3, #0
 80036dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036de:	4b81      	ldr	r3, [pc, #516]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10f      	bne.n	800370a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	4b7d      	ldr	r3, [pc, #500]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	4a7c      	ldr	r2, [pc, #496]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 80036f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036fa:	4b7a      	ldr	r3, [pc, #488]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003706:	2301      	movs	r3, #1
 8003708:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370a:	4b77      	ldr	r3, [pc, #476]	@ (80038e8 <HAL_RCC_OscConfig+0x474>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d118      	bne.n	8003748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003716:	4b74      	ldr	r3, [pc, #464]	@ (80038e8 <HAL_RCC_OscConfig+0x474>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a73      	ldr	r2, [pc, #460]	@ (80038e8 <HAL_RCC_OscConfig+0x474>)
 800371c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003722:	f7fe fa1b 	bl	8001b5c <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372a:	f7fe fa17 	bl	8001b5c <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e10c      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	4b6a      	ldr	r3, [pc, #424]	@ (80038e8 <HAL_RCC_OscConfig+0x474>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d106      	bne.n	800375e <HAL_RCC_OscConfig+0x2ea>
 8003750:	4b64      	ldr	r3, [pc, #400]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003754:	4a63      	ldr	r2, [pc, #396]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	6713      	str	r3, [r2, #112]	@ 0x70
 800375c:	e01c      	b.n	8003798 <HAL_RCC_OscConfig+0x324>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b05      	cmp	r3, #5
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0x30c>
 8003766:	4b5f      	ldr	r3, [pc, #380]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376a:	4a5e      	ldr	r2, [pc, #376]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 800376c:	f043 0304 	orr.w	r3, r3, #4
 8003770:	6713      	str	r3, [r2, #112]	@ 0x70
 8003772:	4b5c      	ldr	r3, [pc, #368]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003776:	4a5b      	ldr	r2, [pc, #364]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	6713      	str	r3, [r2, #112]	@ 0x70
 800377e:	e00b      	b.n	8003798 <HAL_RCC_OscConfig+0x324>
 8003780:	4b58      	ldr	r3, [pc, #352]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003784:	4a57      	ldr	r2, [pc, #348]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	6713      	str	r3, [r2, #112]	@ 0x70
 800378c:	4b55      	ldr	r3, [pc, #340]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003790:	4a54      	ldr	r2, [pc, #336]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003792:	f023 0304 	bic.w	r3, r3, #4
 8003796:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d015      	beq.n	80037cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a0:	f7fe f9dc 	bl	8001b5c <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a6:	e00a      	b.n	80037be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a8:	f7fe f9d8 	bl	8001b5c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e0cb      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037be:	4b49      	ldr	r3, [pc, #292]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0ee      	beq.n	80037a8 <HAL_RCC_OscConfig+0x334>
 80037ca:	e014      	b.n	80037f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037cc:	f7fe f9c6 	bl	8001b5c <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	f7fe f9c2 	bl	8001b5c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e0b5      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ea:	4b3e      	ldr	r3, [pc, #248]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1ee      	bne.n	80037d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d105      	bne.n	8003808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fc:	4b39      	ldr	r3, [pc, #228]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	4a38      	ldr	r2, [pc, #224]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003802:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003806:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 80a1 	beq.w	8003954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003812:	4b34      	ldr	r3, [pc, #208]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b08      	cmp	r3, #8
 800381c:	d05c      	beq.n	80038d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d141      	bne.n	80038aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003826:	4b31      	ldr	r3, [pc, #196]	@ (80038ec <HAL_RCC_OscConfig+0x478>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fe f996 	bl	8001b5c <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003834:	f7fe f992 	bl	8001b5c <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e087      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003846:	4b27      	ldr	r3, [pc, #156]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	019b      	lsls	r3, r3, #6
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003868:	085b      	lsrs	r3, r3, #1
 800386a:	3b01      	subs	r3, #1
 800386c:	041b      	lsls	r3, r3, #16
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	491b      	ldr	r1, [pc, #108]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 8003878:	4313      	orrs	r3, r2
 800387a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800387c:	4b1b      	ldr	r3, [pc, #108]	@ (80038ec <HAL_RCC_OscConfig+0x478>)
 800387e:	2201      	movs	r2, #1
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003882:	f7fe f96b 	bl	8001b5c <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388a:	f7fe f967 	bl	8001b5c <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e05c      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389c:	4b11      	ldr	r3, [pc, #68]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x416>
 80038a8:	e054      	b.n	8003954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038aa:	4b10      	ldr	r3, [pc, #64]	@ (80038ec <HAL_RCC_OscConfig+0x478>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fe f954 	bl	8001b5c <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fe f950 	bl	8001b5c <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e045      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	4b06      	ldr	r3, [pc, #24]	@ (80038e4 <HAL_RCC_OscConfig+0x470>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x444>
 80038d6:	e03d      	b.n	8003954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d107      	bne.n	80038f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e038      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40007000 	.word	0x40007000
 80038ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003960 <HAL_RCC_OscConfig+0x4ec>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d028      	beq.n	8003950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d121      	bne.n	8003950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d11a      	bne.n	8003950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003920:	4013      	ands	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003928:	4293      	cmp	r3, r2
 800392a:	d111      	bne.n	8003950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003936:	085b      	lsrs	r3, r3, #1
 8003938:	3b01      	subs	r3, #1
 800393a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800393c:	429a      	cmp	r2, r3
 800393e:	d107      	bne.n	8003950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800

08003964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0cc      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003978:	4b68      	ldr	r3, [pc, #416]	@ (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d90c      	bls.n	80039a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003986:	4b65      	ldr	r3, [pc, #404]	@ (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	4b63      	ldr	r3, [pc, #396]	@ (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0b8      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d020      	beq.n	80039ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b8:	4b59      	ldr	r3, [pc, #356]	@ (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	4a58      	ldr	r2, [pc, #352]	@ (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d0:	4b53      	ldr	r3, [pc, #332]	@ (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	4a52      	ldr	r2, [pc, #328]	@ (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039dc:	4b50      	ldr	r3, [pc, #320]	@ (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	494d      	ldr	r1, [pc, #308]	@ (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d044      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d107      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	4b47      	ldr	r3, [pc, #284]	@ (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d119      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e07f      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d003      	beq.n	8003a22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d107      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a22:	4b3f      	ldr	r3, [pc, #252]	@ (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e06f      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a32:	4b3b      	ldr	r3, [pc, #236]	@ (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e067      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a42:	4b37      	ldr	r3, [pc, #220]	@ (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f023 0203 	bic.w	r2, r3, #3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	4934      	ldr	r1, [pc, #208]	@ (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a54:	f7fe f882 	bl	8001b5c <HAL_GetTick>
 8003a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a5c:	f7fe f87e 	bl	8001b5c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e04f      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a72:	4b2b      	ldr	r3, [pc, #172]	@ (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 020c 	and.w	r2, r3, #12
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d1eb      	bne.n	8003a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a84:	4b25      	ldr	r3, [pc, #148]	@ (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d20c      	bcs.n	8003aac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b22      	ldr	r3, [pc, #136]	@ (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b20      	ldr	r3, [pc, #128]	@ (8003b1c <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e032      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab8:	4b19      	ldr	r3, [pc, #100]	@ (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4916      	ldr	r1, [pc, #88]	@ (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ad6:	4b12      	ldr	r3, [pc, #72]	@ (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	490e      	ldr	r1, [pc, #56]	@ (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aea:	f000 f821 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8003aee:	4602      	mov	r2, r0
 8003af0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	490a      	ldr	r1, [pc, #40]	@ (8003b24 <HAL_RCC_ClockConfig+0x1c0>)
 8003afc:	5ccb      	ldrb	r3, [r1, r3]
 8003afe:	fa22 f303 	lsr.w	r3, r2, r3
 8003b02:	4a09      	ldr	r2, [pc, #36]	@ (8003b28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b06:	4b09      	ldr	r3, [pc, #36]	@ (8003b2c <HAL_RCC_ClockConfig+0x1c8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd ffe2 	bl	8001ad4 <HAL_InitTick>

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40023c00 	.word	0x40023c00
 8003b20:	40023800 	.word	0x40023800
 8003b24:	0800942c 	.word	0x0800942c
 8003b28:	20000000 	.word	0x20000000
 8003b2c:	20000004 	.word	0x20000004

08003b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b34:	b094      	sub	sp, #80	@ 0x50
 8003b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b48:	4b79      	ldr	r3, [pc, #484]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 030c 	and.w	r3, r3, #12
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d00d      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0x40>
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	f200 80e1 	bhi.w	8003d1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0x34>
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d003      	beq.n	8003b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b62:	e0db      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b64:	4b73      	ldr	r3, [pc, #460]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b68:	e0db      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b6a:	4b73      	ldr	r3, [pc, #460]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b6e:	e0d8      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b70:	4b6f      	ldr	r3, [pc, #444]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d063      	beq.n	8003c4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b86:	4b6a      	ldr	r3, [pc, #424]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	099b      	lsrs	r3, r3, #6
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b98:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ba2:	4622      	mov	r2, r4
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	f04f 0000 	mov.w	r0, #0
 8003baa:	f04f 0100 	mov.w	r1, #0
 8003bae:	0159      	lsls	r1, r3, #5
 8003bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb4:	0150      	lsls	r0, r2, #5
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4621      	mov	r1, r4
 8003bbc:	1a51      	subs	r1, r2, r1
 8003bbe:	6139      	str	r1, [r7, #16]
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bd4:	4659      	mov	r1, fp
 8003bd6:	018b      	lsls	r3, r1, #6
 8003bd8:	4651      	mov	r1, sl
 8003bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bde:	4651      	mov	r1, sl
 8003be0:	018a      	lsls	r2, r1, #6
 8003be2:	4651      	mov	r1, sl
 8003be4:	ebb2 0801 	subs.w	r8, r2, r1
 8003be8:	4659      	mov	r1, fp
 8003bea:	eb63 0901 	sbc.w	r9, r3, r1
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c02:	4690      	mov	r8, r2
 8003c04:	4699      	mov	r9, r3
 8003c06:	4623      	mov	r3, r4
 8003c08:	eb18 0303 	adds.w	r3, r8, r3
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	462b      	mov	r3, r5
 8003c10:	eb49 0303 	adc.w	r3, r9, r3
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c22:	4629      	mov	r1, r5
 8003c24:	024b      	lsls	r3, r1, #9
 8003c26:	4621      	mov	r1, r4
 8003c28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	024a      	lsls	r2, r1, #9
 8003c30:	4610      	mov	r0, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c36:	2200      	movs	r2, #0
 8003c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c40:	f7fc fb16 	bl	8000270 <__aeabi_uldivmod>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4613      	mov	r3, r2
 8003c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c4c:	e058      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c4e:	4b38      	ldr	r3, [pc, #224]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	099b      	lsrs	r3, r3, #6
 8003c54:	2200      	movs	r2, #0
 8003c56:	4618      	mov	r0, r3
 8003c58:	4611      	mov	r1, r2
 8003c5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c5e:	623b      	str	r3, [r7, #32]
 8003c60:	2300      	movs	r3, #0
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c68:	4642      	mov	r2, r8
 8003c6a:	464b      	mov	r3, r9
 8003c6c:	f04f 0000 	mov.w	r0, #0
 8003c70:	f04f 0100 	mov.w	r1, #0
 8003c74:	0159      	lsls	r1, r3, #5
 8003c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c7a:	0150      	lsls	r0, r2, #5
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4641      	mov	r1, r8
 8003c82:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c86:	4649      	mov	r1, r9
 8003c88:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ca0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ca4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	00eb      	lsls	r3, r5, #3
 8003cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cb6:	00e2      	lsls	r2, r4, #3
 8003cb8:	4614      	mov	r4, r2
 8003cba:	461d      	mov	r5, r3
 8003cbc:	4643      	mov	r3, r8
 8003cbe:	18e3      	adds	r3, r4, r3
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	eb45 0303 	adc.w	r3, r5, r3
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	028b      	lsls	r3, r1, #10
 8003cda:	4621      	mov	r1, r4
 8003cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	028a      	lsls	r2, r1, #10
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cea:	2200      	movs	r2, #0
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	61fa      	str	r2, [r7, #28]
 8003cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cf4:	f7fc fabc 	bl	8000270 <__aeabi_uldivmod>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d00:	4b0b      	ldr	r3, [pc, #44]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	0c1b      	lsrs	r3, r3, #16
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d1a:	e002      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3750      	adds	r7, #80	@ 0x50
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800
 8003d34:	00f42400 	.word	0x00f42400
 8003d38:	007a1200 	.word	0x007a1200

08003d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d40:	4b03      	ldr	r3, [pc, #12]	@ (8003d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000000 	.word	0x20000000

08003d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d58:	f7ff fff0 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4b05      	ldr	r3, [pc, #20]	@ (8003d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	0a9b      	lsrs	r3, r3, #10
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	4903      	ldr	r1, [pc, #12]	@ (8003d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d6a:	5ccb      	ldrb	r3, [r1, r3]
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40023800 	.word	0x40023800
 8003d78:	0800943c 	.word	0x0800943c

08003d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d80:	f7ff ffdc 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	@ (8003d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0b5b      	lsrs	r3, r3, #13
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4903      	ldr	r1, [pc, #12]	@ (8003da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	0800943c 	.word	0x0800943c

08003da4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e07b      	b.n	8003eae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d108      	bne.n	8003dd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dc6:	d009      	beq.n	8003ddc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	61da      	str	r2, [r3, #28]
 8003dce:	e005      	b.n	8003ddc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fd fc2e 	bl	8001658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e60:	ea42 0103 	orr.w	r1, r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	0c1b      	lsrs	r3, r3, #16
 8003e7a:	f003 0104 	and.w	r1, r3, #4
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e82:	f003 0210 	and.w	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b088      	sub	sp, #32
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ec6:	f7fd fe49 	bl	8001b5c <HAL_GetTick>
 8003eca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d001      	beq.n	8003ee0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
 8003ede:	e12a      	b.n	8004136 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_SPI_Transmit+0x36>
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e122      	b.n	8004136 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_SPI_Transmit+0x48>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e11b      	b.n	8004136 <HAL_SPI_Transmit+0x280>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2203      	movs	r2, #3
 8003f0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	88fa      	ldrh	r2, [r7, #6]
 8003f1e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	88fa      	ldrh	r2, [r7, #6]
 8003f24:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f4c:	d10f      	bne.n	8003f6e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f78:	2b40      	cmp	r3, #64	@ 0x40
 8003f7a:	d007      	beq.n	8003f8c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f94:	d152      	bne.n	800403c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_SPI_Transmit+0xee>
 8003f9e:	8b7b      	ldrh	r3, [r7, #26]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d145      	bne.n	8004030 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa8:	881a      	ldrh	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb4:	1c9a      	adds	r2, r3, #2
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fc8:	e032      	b.n	8004030 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d112      	bne.n	8003ffe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fdc:	881a      	ldrh	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe8:	1c9a      	adds	r2, r3, #2
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ffc:	e018      	b.n	8004030 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ffe:	f7fd fdad 	bl	8001b5c <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d803      	bhi.n	8004016 <HAL_SPI_Transmit+0x160>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d102      	bne.n	800401c <HAL_SPI_Transmit+0x166>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d109      	bne.n	8004030 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e082      	b.n	8004136 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1c7      	bne.n	8003fca <HAL_SPI_Transmit+0x114>
 800403a:	e053      	b.n	80040e4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_SPI_Transmit+0x194>
 8004044:	8b7b      	ldrh	r3, [r7, #26]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d147      	bne.n	80040da <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	7812      	ldrb	r2, [r2, #0]
 8004056:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004070:	e033      	b.n	80040da <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b02      	cmp	r3, #2
 800407e:	d113      	bne.n	80040a8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	330c      	adds	r3, #12
 800408a:	7812      	ldrb	r2, [r2, #0]
 800408c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80040a6:	e018      	b.n	80040da <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040a8:	f7fd fd58 	bl	8001b5c <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d803      	bhi.n	80040c0 <HAL_SPI_Transmit+0x20a>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040be:	d102      	bne.n	80040c6 <HAL_SPI_Transmit+0x210>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e02d      	b.n	8004136 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1c6      	bne.n	8004072 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	6839      	ldr	r1, [r7, #0]
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f8b1 	bl	8004250 <SPI_EndRxTxTransaction>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10a      	bne.n	8004118 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004134:	2300      	movs	r3, #0
  }
}
 8004136:	4618      	mov	r0, r3
 8004138:	3720      	adds	r7, #32
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004150:	f7fd fd04 	bl	8001b5c <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	4413      	add	r3, r2
 800415e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004160:	f7fd fcfc 	bl	8001b5c <HAL_GetTick>
 8004164:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004166:	4b39      	ldr	r3, [pc, #228]	@ (800424c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	015b      	lsls	r3, r3, #5
 800416c:	0d1b      	lsrs	r3, r3, #20
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	fb02 f303 	mul.w	r3, r2, r3
 8004174:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004176:	e055      	b.n	8004224 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417e:	d051      	beq.n	8004224 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004180:	f7fd fcec 	bl	8001b5c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	429a      	cmp	r2, r3
 800418e:	d902      	bls.n	8004196 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d13d      	bne.n	8004212 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80041a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041ae:	d111      	bne.n	80041d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041b8:	d004      	beq.n	80041c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041c2:	d107      	bne.n	80041d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041dc:	d10f      	bne.n	80041fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e018      	b.n	8004244 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d102      	bne.n	800421e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	e002      	b.n	8004224 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	3b01      	subs	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4013      	ands	r3, r2
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	429a      	cmp	r2, r3
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	461a      	mov	r2, r3
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	429a      	cmp	r2, r3
 8004240:	d19a      	bne.n	8004178 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3720      	adds	r7, #32
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000000 	.word	0x20000000

08004250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2201      	movs	r2, #1
 8004264:	2102      	movs	r1, #2
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f7ff ff6a 	bl	8004140 <SPI_WaitFlagStateUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004276:	f043 0220 	orr.w	r2, r3, #32
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e032      	b.n	80042e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004282:	4b1b      	ldr	r3, [pc, #108]	@ (80042f0 <SPI_EndRxTxTransaction+0xa0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1b      	ldr	r2, [pc, #108]	@ (80042f4 <SPI_EndRxTxTransaction+0xa4>)
 8004288:	fba2 2303 	umull	r2, r3, r2, r3
 800428c:	0d5b      	lsrs	r3, r3, #21
 800428e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004292:	fb02 f303 	mul.w	r3, r2, r3
 8004296:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042a0:	d112      	bne.n	80042c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2200      	movs	r2, #0
 80042aa:	2180      	movs	r1, #128	@ 0x80
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7ff ff47 	bl	8004140 <SPI_WaitFlagStateUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d016      	beq.n	80042e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042bc:	f043 0220 	orr.w	r2, r3, #32
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e00f      	b.n	80042e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042de:	2b80      	cmp	r3, #128	@ 0x80
 80042e0:	d0f2      	beq.n	80042c8 <SPI_EndRxTxTransaction+0x78>
 80042e2:	e000      	b.n	80042e6 <SPI_EndRxTxTransaction+0x96>
        break;
 80042e4:	bf00      	nop
  }

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20000000 	.word	0x20000000
 80042f4:	165e9f81 	.word	0x165e9f81

080042f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e041      	b.n	800438e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fd fa18 	bl	8001754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3304      	adds	r3, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f000 fa0c 	bl	8004754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d020      	beq.n	80043fa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01b      	beq.n	80043fa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f06f 0202 	mvn.w	r2, #2
 80043ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f999 	bl	8004718 <HAL_TIM_IC_CaptureCallback>
 80043e6:	e005      	b.n	80043f4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f98b 	bl	8004704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f99c 	bl	800472c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d020      	beq.n	8004446 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d01b      	beq.n	8004446 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f06f 0204 	mvn.w	r2, #4
 8004416:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f973 	bl	8004718 <HAL_TIM_IC_CaptureCallback>
 8004432:	e005      	b.n	8004440 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f965 	bl	8004704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f976 	bl	800472c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d020      	beq.n	8004492 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d01b      	beq.n	8004492 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0208 	mvn.w	r2, #8
 8004462:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2204      	movs	r2, #4
 8004468:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f94d 	bl	8004718 <HAL_TIM_IC_CaptureCallback>
 800447e:	e005      	b.n	800448c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f93f 	bl	8004704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f950 	bl	800472c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 0310 	and.w	r3, r3, #16
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d01b      	beq.n	80044de <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f06f 0210 	mvn.w	r2, #16
 80044ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2208      	movs	r2, #8
 80044b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f927 	bl	8004718 <HAL_TIM_IC_CaptureCallback>
 80044ca:	e005      	b.n	80044d8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f919 	bl	8004704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f92a 	bl	800472c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00c      	beq.n	8004502 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d007      	beq.n	8004502 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f06f 0201 	mvn.w	r2, #1
 80044fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7fc f873 	bl	80005e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00c      	beq.n	8004526 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800451e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fadd 	bl	8004ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00c      	beq.n	800454a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f8fb 	bl	8004740 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00c      	beq.n	800456e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	d007      	beq.n	800456e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f06f 0220 	mvn.w	r2, #32
 8004566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 faaf 	bl	8004acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800456e:	bf00      	nop
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_TIM_ConfigClockSource+0x1c>
 800458e:	2302      	movs	r3, #2
 8004590:	e0b4      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x186>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2202      	movs	r2, #2
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045b8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ca:	d03e      	beq.n	800464a <HAL_TIM_ConfigClockSource+0xd4>
 80045cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045d0:	f200 8087 	bhi.w	80046e2 <HAL_TIM_ConfigClockSource+0x16c>
 80045d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045d8:	f000 8086 	beq.w	80046e8 <HAL_TIM_ConfigClockSource+0x172>
 80045dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045e0:	d87f      	bhi.n	80046e2 <HAL_TIM_ConfigClockSource+0x16c>
 80045e2:	2b70      	cmp	r3, #112	@ 0x70
 80045e4:	d01a      	beq.n	800461c <HAL_TIM_ConfigClockSource+0xa6>
 80045e6:	2b70      	cmp	r3, #112	@ 0x70
 80045e8:	d87b      	bhi.n	80046e2 <HAL_TIM_ConfigClockSource+0x16c>
 80045ea:	2b60      	cmp	r3, #96	@ 0x60
 80045ec:	d050      	beq.n	8004690 <HAL_TIM_ConfigClockSource+0x11a>
 80045ee:	2b60      	cmp	r3, #96	@ 0x60
 80045f0:	d877      	bhi.n	80046e2 <HAL_TIM_ConfigClockSource+0x16c>
 80045f2:	2b50      	cmp	r3, #80	@ 0x50
 80045f4:	d03c      	beq.n	8004670 <HAL_TIM_ConfigClockSource+0xfa>
 80045f6:	2b50      	cmp	r3, #80	@ 0x50
 80045f8:	d873      	bhi.n	80046e2 <HAL_TIM_ConfigClockSource+0x16c>
 80045fa:	2b40      	cmp	r3, #64	@ 0x40
 80045fc:	d058      	beq.n	80046b0 <HAL_TIM_ConfigClockSource+0x13a>
 80045fe:	2b40      	cmp	r3, #64	@ 0x40
 8004600:	d86f      	bhi.n	80046e2 <HAL_TIM_ConfigClockSource+0x16c>
 8004602:	2b30      	cmp	r3, #48	@ 0x30
 8004604:	d064      	beq.n	80046d0 <HAL_TIM_ConfigClockSource+0x15a>
 8004606:	2b30      	cmp	r3, #48	@ 0x30
 8004608:	d86b      	bhi.n	80046e2 <HAL_TIM_ConfigClockSource+0x16c>
 800460a:	2b20      	cmp	r3, #32
 800460c:	d060      	beq.n	80046d0 <HAL_TIM_ConfigClockSource+0x15a>
 800460e:	2b20      	cmp	r3, #32
 8004610:	d867      	bhi.n	80046e2 <HAL_TIM_ConfigClockSource+0x16c>
 8004612:	2b00      	cmp	r3, #0
 8004614:	d05c      	beq.n	80046d0 <HAL_TIM_ConfigClockSource+0x15a>
 8004616:	2b10      	cmp	r3, #16
 8004618:	d05a      	beq.n	80046d0 <HAL_TIM_ConfigClockSource+0x15a>
 800461a:	e062      	b.n	80046e2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800462c:	f000 f9b2 	bl	8004994 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800463e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	609a      	str	r2, [r3, #8]
      break;
 8004648:	e04f      	b.n	80046ea <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800465a:	f000 f99b 	bl	8004994 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800466c:	609a      	str	r2, [r3, #8]
      break;
 800466e:	e03c      	b.n	80046ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800467c:	461a      	mov	r2, r3
 800467e:	f000 f90f 	bl	80048a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2150      	movs	r1, #80	@ 0x50
 8004688:	4618      	mov	r0, r3
 800468a:	f000 f968 	bl	800495e <TIM_ITRx_SetConfig>
      break;
 800468e:	e02c      	b.n	80046ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800469c:	461a      	mov	r2, r3
 800469e:	f000 f92e 	bl	80048fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2160      	movs	r1, #96	@ 0x60
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 f958 	bl	800495e <TIM_ITRx_SetConfig>
      break;
 80046ae:	e01c      	b.n	80046ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046bc:	461a      	mov	r2, r3
 80046be:	f000 f8ef 	bl	80048a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2140      	movs	r1, #64	@ 0x40
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 f948 	bl	800495e <TIM_ITRx_SetConfig>
      break;
 80046ce:	e00c      	b.n	80046ea <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4619      	mov	r1, r3
 80046da:	4610      	mov	r0, r2
 80046dc:	f000 f93f 	bl	800495e <TIM_ITRx_SetConfig>
      break;
 80046e0:	e003      	b.n	80046ea <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
      break;
 80046e6:	e000      	b.n	80046ea <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a43      	ldr	r2, [pc, #268]	@ (8004874 <TIM_Base_SetConfig+0x120>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004772:	d00f      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a40      	ldr	r2, [pc, #256]	@ (8004878 <TIM_Base_SetConfig+0x124>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00b      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a3f      	ldr	r2, [pc, #252]	@ (800487c <TIM_Base_SetConfig+0x128>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d007      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a3e      	ldr	r2, [pc, #248]	@ (8004880 <TIM_Base_SetConfig+0x12c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d003      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a3d      	ldr	r2, [pc, #244]	@ (8004884 <TIM_Base_SetConfig+0x130>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d108      	bne.n	80047a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800479a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a32      	ldr	r2, [pc, #200]	@ (8004874 <TIM_Base_SetConfig+0x120>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d02b      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b4:	d027      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004878 <TIM_Base_SetConfig+0x124>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d023      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a2e      	ldr	r2, [pc, #184]	@ (800487c <TIM_Base_SetConfig+0x128>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d01f      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004880 <TIM_Base_SetConfig+0x12c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d01b      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004884 <TIM_Base_SetConfig+0x130>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d017      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004888 <TIM_Base_SetConfig+0x134>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a2a      	ldr	r2, [pc, #168]	@ (800488c <TIM_Base_SetConfig+0x138>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00f      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a29      	ldr	r2, [pc, #164]	@ (8004890 <TIM_Base_SetConfig+0x13c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00b      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a28      	ldr	r2, [pc, #160]	@ (8004894 <TIM_Base_SetConfig+0x140>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d007      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a27      	ldr	r2, [pc, #156]	@ (8004898 <TIM_Base_SetConfig+0x144>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a26      	ldr	r2, [pc, #152]	@ (800489c <TIM_Base_SetConfig+0x148>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d108      	bne.n	8004818 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800480c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a0e      	ldr	r2, [pc, #56]	@ (8004874 <TIM_Base_SetConfig+0x120>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d003      	beq.n	8004846 <TIM_Base_SetConfig+0xf2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a10      	ldr	r2, [pc, #64]	@ (8004884 <TIM_Base_SetConfig+0x130>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d103      	bne.n	800484e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f043 0204 	orr.w	r2, r3, #4
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	601a      	str	r2, [r3, #0]
}
 8004866:	bf00      	nop
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40010000 	.word	0x40010000
 8004878:	40000400 	.word	0x40000400
 800487c:	40000800 	.word	0x40000800
 8004880:	40000c00 	.word	0x40000c00
 8004884:	40010400 	.word	0x40010400
 8004888:	40014000 	.word	0x40014000
 800488c:	40014400 	.word	0x40014400
 8004890:	40014800 	.word	0x40014800
 8004894:	40001800 	.word	0x40001800
 8004898:	40001c00 	.word	0x40001c00
 800489c:	40002000 	.word	0x40002000

080048a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f023 0201 	bic.w	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f023 030a 	bic.w	r3, r3, #10
 80048dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	621a      	str	r2, [r3, #32]
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048fe:	b480      	push	{r7}
 8004900:	b087      	sub	sp, #28
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f023 0210 	bic.w	r2, r3, #16
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004928:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	031b      	lsls	r3, r3, #12
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800493a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	621a      	str	r2, [r3, #32]
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800495e:	b480      	push	{r7}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004974:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	f043 0307 	orr.w	r3, r3, #7
 8004980:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	609a      	str	r2, [r3, #8]
}
 8004988:	bf00      	nop
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	021a      	lsls	r2, r3, #8
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	609a      	str	r2, [r3, #8]
}
 80049c8:	bf00      	nop
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e05a      	b.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a21      	ldr	r2, [pc, #132]	@ (8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d022      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a38:	d01d      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d018      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1a      	ldr	r2, [pc, #104]	@ (8004abc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00e      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a18      	ldr	r2, [pc, #96]	@ (8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d009      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a17      	ldr	r2, [pc, #92]	@ (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d004      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a15      	ldr	r2, [pc, #84]	@ (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d10c      	bne.n	8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40010000 	.word	0x40010000
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	40000800 	.word	0x40000800
 8004abc:	40000c00 	.word	0x40000c00
 8004ac0:	40010400 	.word	0x40010400
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40001800 	.word	0x40001800

08004acc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e042      	b.n	8004b8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d106      	bne.n	8004b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fc fe58 	bl	80017d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2224      	movs	r2, #36	@ 0x24
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f973 	bl	8004e24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695a      	ldr	r2, [r3, #20]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	@ 0x28
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d175      	bne.n	8004ca0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_UART_Transmit+0x2c>
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e06e      	b.n	8004ca2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2221      	movs	r2, #33	@ 0x21
 8004bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bd2:	f7fc ffc3 	bl	8001b5c <HAL_GetTick>
 8004bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	88fa      	ldrh	r2, [r7, #6]
 8004bdc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	88fa      	ldrh	r2, [r7, #6]
 8004be2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bec:	d108      	bne.n	8004c00 <HAL_UART_Transmit+0x6c>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d104      	bne.n	8004c00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	61bb      	str	r3, [r7, #24]
 8004bfe:	e003      	b.n	8004c08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c08:	e02e      	b.n	8004c68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2200      	movs	r2, #0
 8004c12:	2180      	movs	r1, #128	@ 0x80
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f848 	bl	8004caa <UART_WaitOnFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e03a      	b.n	8004ca2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10b      	bne.n	8004c4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	3302      	adds	r3, #2
 8004c46:	61bb      	str	r3, [r7, #24]
 8004c48:	e007      	b.n	8004c5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	781a      	ldrb	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	3301      	adds	r3, #1
 8004c58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1cb      	bne.n	8004c0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2140      	movs	r1, #64	@ 0x40
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f814 	bl	8004caa <UART_WaitOnFlagUntilTimeout>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e006      	b.n	8004ca2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	e000      	b.n	8004ca2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ca0:	2302      	movs	r3, #2
  }
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3720      	adds	r7, #32
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b086      	sub	sp, #24
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	603b      	str	r3, [r7, #0]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cba:	e03b      	b.n	8004d34 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d037      	beq.n	8004d34 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc4:	f7fc ff4a 	bl	8001b5c <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	6a3a      	ldr	r2, [r7, #32]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d302      	bcc.n	8004cda <UART_WaitOnFlagUntilTimeout+0x30>
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e03a      	b.n	8004d54 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d023      	beq.n	8004d34 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b80      	cmp	r3, #128	@ 0x80
 8004cf0:	d020      	beq.n	8004d34 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b40      	cmp	r3, #64	@ 0x40
 8004cf6:	d01d      	beq.n	8004d34 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d116      	bne.n	8004d34 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f81d 	bl	8004d5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2208      	movs	r2, #8
 8004d26:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e00f      	b.n	8004d54 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	bf0c      	ite	eq
 8004d44:	2301      	moveq	r3, #1
 8004d46:	2300      	movne	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	79fb      	ldrb	r3, [r7, #7]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d0b4      	beq.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b095      	sub	sp, #84	@ 0x54
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	330c      	adds	r3, #12
 8004d6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d84:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e5      	bne.n	8004d64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3314      	adds	r3, #20
 8004d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	e853 3f00 	ldrex	r3, [r3]
 8004da6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3314      	adds	r3, #20
 8004db6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004db8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e5      	bne.n	8004d98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d119      	bne.n	8004e08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	330c      	adds	r3, #12
 8004dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	e853 3f00 	ldrex	r3, [r3]
 8004de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f023 0310 	bic.w	r3, r3, #16
 8004dea:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	330c      	adds	r3, #12
 8004df2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004df4:	61ba      	str	r2, [r7, #24]
 8004df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df8:	6979      	ldr	r1, [r7, #20]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	e841 2300 	strex	r3, r2, [r1]
 8004e00:	613b      	str	r3, [r7, #16]
   return(result);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e5      	bne.n	8004dd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e16:	bf00      	nop
 8004e18:	3754      	adds	r7, #84	@ 0x54
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
	...

08004e24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e28:	b0c0      	sub	sp, #256	@ 0x100
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e40:	68d9      	ldr	r1, [r3, #12]
 8004e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	ea40 0301 	orr.w	r3, r0, r1
 8004e4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	431a      	orrs	r2, r3
 8004e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e7c:	f021 010c 	bic.w	r1, r1, #12
 8004e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e8a:	430b      	orrs	r3, r1
 8004e8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9e:	6999      	ldr	r1, [r3, #24]
 8004ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	ea40 0301 	orr.w	r3, r0, r1
 8004eaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4b8f      	ldr	r3, [pc, #572]	@ (80050f0 <UART_SetConfig+0x2cc>)
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d005      	beq.n	8004ec4 <UART_SetConfig+0xa0>
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4b8d      	ldr	r3, [pc, #564]	@ (80050f4 <UART_SetConfig+0x2d0>)
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d104      	bne.n	8004ece <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ec4:	f7fe ff5a 	bl	8003d7c <HAL_RCC_GetPCLK2Freq>
 8004ec8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ecc:	e003      	b.n	8004ed6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ece:	f7fe ff41 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 8004ed2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ee0:	f040 810c 	bne.w	80050fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ee4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004eee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ef2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	462b      	mov	r3, r5
 8004efa:	1891      	adds	r1, r2, r2
 8004efc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004efe:	415b      	adcs	r3, r3
 8004f00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f06:	4621      	mov	r1, r4
 8004f08:	eb12 0801 	adds.w	r8, r2, r1
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	eb43 0901 	adc.w	r9, r3, r1
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f26:	4690      	mov	r8, r2
 8004f28:	4699      	mov	r9, r3
 8004f2a:	4623      	mov	r3, r4
 8004f2c:	eb18 0303 	adds.w	r3, r8, r3
 8004f30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f34:	462b      	mov	r3, r5
 8004f36:	eb49 0303 	adc.w	r3, r9, r3
 8004f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f52:	460b      	mov	r3, r1
 8004f54:	18db      	adds	r3, r3, r3
 8004f56:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f58:	4613      	mov	r3, r2
 8004f5a:	eb42 0303 	adc.w	r3, r2, r3
 8004f5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f68:	f7fb f982 	bl	8000270 <__aeabi_uldivmod>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4b61      	ldr	r3, [pc, #388]	@ (80050f8 <UART_SetConfig+0x2d4>)
 8004f72:	fba3 2302 	umull	r2, r3, r3, r2
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	011c      	lsls	r4, r3, #4
 8004f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	464b      	mov	r3, r9
 8004f90:	1891      	adds	r1, r2, r2
 8004f92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f94:	415b      	adcs	r3, r3
 8004f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f9c:	4641      	mov	r1, r8
 8004f9e:	eb12 0a01 	adds.w	sl, r2, r1
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	eb43 0b01 	adc.w	fp, r3, r1
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fbc:	4692      	mov	sl, r2
 8004fbe:	469b      	mov	fp, r3
 8004fc0:	4643      	mov	r3, r8
 8004fc2:	eb1a 0303 	adds.w	r3, sl, r3
 8004fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fca:	464b      	mov	r3, r9
 8004fcc:	eb4b 0303 	adc.w	r3, fp, r3
 8004fd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fe0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004fe4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	18db      	adds	r3, r3, r3
 8004fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fee:	4613      	mov	r3, r2
 8004ff0:	eb42 0303 	adc.w	r3, r2, r3
 8004ff4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ff6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ffa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ffe:	f7fb f937 	bl	8000270 <__aeabi_uldivmod>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4611      	mov	r1, r2
 8005008:	4b3b      	ldr	r3, [pc, #236]	@ (80050f8 <UART_SetConfig+0x2d4>)
 800500a:	fba3 2301 	umull	r2, r3, r3, r1
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	2264      	movs	r2, #100	@ 0x64
 8005012:	fb02 f303 	mul.w	r3, r2, r3
 8005016:	1acb      	subs	r3, r1, r3
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800501e:	4b36      	ldr	r3, [pc, #216]	@ (80050f8 <UART_SetConfig+0x2d4>)
 8005020:	fba3 2302 	umull	r2, r3, r3, r2
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800502c:	441c      	add	r4, r3
 800502e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005032:	2200      	movs	r2, #0
 8005034:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005038:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800503c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005040:	4642      	mov	r2, r8
 8005042:	464b      	mov	r3, r9
 8005044:	1891      	adds	r1, r2, r2
 8005046:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005048:	415b      	adcs	r3, r3
 800504a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800504c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005050:	4641      	mov	r1, r8
 8005052:	1851      	adds	r1, r2, r1
 8005054:	6339      	str	r1, [r7, #48]	@ 0x30
 8005056:	4649      	mov	r1, r9
 8005058:	414b      	adcs	r3, r1
 800505a:	637b      	str	r3, [r7, #52]	@ 0x34
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005068:	4659      	mov	r1, fp
 800506a:	00cb      	lsls	r3, r1, #3
 800506c:	4651      	mov	r1, sl
 800506e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005072:	4651      	mov	r1, sl
 8005074:	00ca      	lsls	r2, r1, #3
 8005076:	4610      	mov	r0, r2
 8005078:	4619      	mov	r1, r3
 800507a:	4603      	mov	r3, r0
 800507c:	4642      	mov	r2, r8
 800507e:	189b      	adds	r3, r3, r2
 8005080:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005084:	464b      	mov	r3, r9
 8005086:	460a      	mov	r2, r1
 8005088:	eb42 0303 	adc.w	r3, r2, r3
 800508c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800509c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80050a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050a4:	460b      	mov	r3, r1
 80050a6:	18db      	adds	r3, r3, r3
 80050a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050aa:	4613      	mov	r3, r2
 80050ac:	eb42 0303 	adc.w	r3, r2, r3
 80050b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80050ba:	f7fb f8d9 	bl	8000270 <__aeabi_uldivmod>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	4b0d      	ldr	r3, [pc, #52]	@ (80050f8 <UART_SetConfig+0x2d4>)
 80050c4:	fba3 1302 	umull	r1, r3, r3, r2
 80050c8:	095b      	lsrs	r3, r3, #5
 80050ca:	2164      	movs	r1, #100	@ 0x64
 80050cc:	fb01 f303 	mul.w	r3, r1, r3
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	3332      	adds	r3, #50	@ 0x32
 80050d6:	4a08      	ldr	r2, [pc, #32]	@ (80050f8 <UART_SetConfig+0x2d4>)
 80050d8:	fba2 2303 	umull	r2, r3, r2, r3
 80050dc:	095b      	lsrs	r3, r3, #5
 80050de:	f003 0207 	and.w	r2, r3, #7
 80050e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4422      	add	r2, r4
 80050ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050ec:	e106      	b.n	80052fc <UART_SetConfig+0x4d8>
 80050ee:	bf00      	nop
 80050f0:	40011000 	.word	0x40011000
 80050f4:	40011400 	.word	0x40011400
 80050f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005100:	2200      	movs	r2, #0
 8005102:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005106:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800510a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800510e:	4642      	mov	r2, r8
 8005110:	464b      	mov	r3, r9
 8005112:	1891      	adds	r1, r2, r2
 8005114:	6239      	str	r1, [r7, #32]
 8005116:	415b      	adcs	r3, r3
 8005118:	627b      	str	r3, [r7, #36]	@ 0x24
 800511a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800511e:	4641      	mov	r1, r8
 8005120:	1854      	adds	r4, r2, r1
 8005122:	4649      	mov	r1, r9
 8005124:	eb43 0501 	adc.w	r5, r3, r1
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	00eb      	lsls	r3, r5, #3
 8005132:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005136:	00e2      	lsls	r2, r4, #3
 8005138:	4614      	mov	r4, r2
 800513a:	461d      	mov	r5, r3
 800513c:	4643      	mov	r3, r8
 800513e:	18e3      	adds	r3, r4, r3
 8005140:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005144:	464b      	mov	r3, r9
 8005146:	eb45 0303 	adc.w	r3, r5, r3
 800514a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800514e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800515a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	f04f 0300 	mov.w	r3, #0
 8005166:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800516a:	4629      	mov	r1, r5
 800516c:	008b      	lsls	r3, r1, #2
 800516e:	4621      	mov	r1, r4
 8005170:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005174:	4621      	mov	r1, r4
 8005176:	008a      	lsls	r2, r1, #2
 8005178:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800517c:	f7fb f878 	bl	8000270 <__aeabi_uldivmod>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4b60      	ldr	r3, [pc, #384]	@ (8005308 <UART_SetConfig+0x4e4>)
 8005186:	fba3 2302 	umull	r2, r3, r3, r2
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	011c      	lsls	r4, r3, #4
 800518e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005192:	2200      	movs	r2, #0
 8005194:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005198:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800519c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80051a0:	4642      	mov	r2, r8
 80051a2:	464b      	mov	r3, r9
 80051a4:	1891      	adds	r1, r2, r2
 80051a6:	61b9      	str	r1, [r7, #24]
 80051a8:	415b      	adcs	r3, r3
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051b0:	4641      	mov	r1, r8
 80051b2:	1851      	adds	r1, r2, r1
 80051b4:	6139      	str	r1, [r7, #16]
 80051b6:	4649      	mov	r1, r9
 80051b8:	414b      	adcs	r3, r1
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051c8:	4659      	mov	r1, fp
 80051ca:	00cb      	lsls	r3, r1, #3
 80051cc:	4651      	mov	r1, sl
 80051ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051d2:	4651      	mov	r1, sl
 80051d4:	00ca      	lsls	r2, r1, #3
 80051d6:	4610      	mov	r0, r2
 80051d8:	4619      	mov	r1, r3
 80051da:	4603      	mov	r3, r0
 80051dc:	4642      	mov	r2, r8
 80051de:	189b      	adds	r3, r3, r2
 80051e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051e4:	464b      	mov	r3, r9
 80051e6:	460a      	mov	r2, r1
 80051e8:	eb42 0303 	adc.w	r3, r2, r3
 80051ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005208:	4649      	mov	r1, r9
 800520a:	008b      	lsls	r3, r1, #2
 800520c:	4641      	mov	r1, r8
 800520e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005212:	4641      	mov	r1, r8
 8005214:	008a      	lsls	r2, r1, #2
 8005216:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800521a:	f7fb f829 	bl	8000270 <__aeabi_uldivmod>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4611      	mov	r1, r2
 8005224:	4b38      	ldr	r3, [pc, #224]	@ (8005308 <UART_SetConfig+0x4e4>)
 8005226:	fba3 2301 	umull	r2, r3, r3, r1
 800522a:	095b      	lsrs	r3, r3, #5
 800522c:	2264      	movs	r2, #100	@ 0x64
 800522e:	fb02 f303 	mul.w	r3, r2, r3
 8005232:	1acb      	subs	r3, r1, r3
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	3332      	adds	r3, #50	@ 0x32
 8005238:	4a33      	ldr	r2, [pc, #204]	@ (8005308 <UART_SetConfig+0x4e4>)
 800523a:	fba2 2303 	umull	r2, r3, r2, r3
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005244:	441c      	add	r4, r3
 8005246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800524a:	2200      	movs	r2, #0
 800524c:	673b      	str	r3, [r7, #112]	@ 0x70
 800524e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005250:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005254:	4642      	mov	r2, r8
 8005256:	464b      	mov	r3, r9
 8005258:	1891      	adds	r1, r2, r2
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	415b      	adcs	r3, r3
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005264:	4641      	mov	r1, r8
 8005266:	1851      	adds	r1, r2, r1
 8005268:	6039      	str	r1, [r7, #0]
 800526a:	4649      	mov	r1, r9
 800526c:	414b      	adcs	r3, r1
 800526e:	607b      	str	r3, [r7, #4]
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800527c:	4659      	mov	r1, fp
 800527e:	00cb      	lsls	r3, r1, #3
 8005280:	4651      	mov	r1, sl
 8005282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005286:	4651      	mov	r1, sl
 8005288:	00ca      	lsls	r2, r1, #3
 800528a:	4610      	mov	r0, r2
 800528c:	4619      	mov	r1, r3
 800528e:	4603      	mov	r3, r0
 8005290:	4642      	mov	r2, r8
 8005292:	189b      	adds	r3, r3, r2
 8005294:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005296:	464b      	mov	r3, r9
 8005298:	460a      	mov	r2, r1
 800529a:	eb42 0303 	adc.w	r3, r2, r3
 800529e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80052aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80052b8:	4649      	mov	r1, r9
 80052ba:	008b      	lsls	r3, r1, #2
 80052bc:	4641      	mov	r1, r8
 80052be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052c2:	4641      	mov	r1, r8
 80052c4:	008a      	lsls	r2, r1, #2
 80052c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80052ca:	f7fa ffd1 	bl	8000270 <__aeabi_uldivmod>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005308 <UART_SetConfig+0x4e4>)
 80052d4:	fba3 1302 	umull	r1, r3, r3, r2
 80052d8:	095b      	lsrs	r3, r3, #5
 80052da:	2164      	movs	r1, #100	@ 0x64
 80052dc:	fb01 f303 	mul.w	r3, r1, r3
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	3332      	adds	r3, #50	@ 0x32
 80052e6:	4a08      	ldr	r2, [pc, #32]	@ (8005308 <UART_SetConfig+0x4e4>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	f003 020f 	and.w	r2, r3, #15
 80052f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4422      	add	r2, r4
 80052fa:	609a      	str	r2, [r3, #8]
}
 80052fc:	bf00      	nop
 80052fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005302:	46bd      	mov	sp, r7
 8005304:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005308:	51eb851f 	.word	0x51eb851f

0800530c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800530c:	b084      	sub	sp, #16
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	f107 001c 	add.w	r0, r7, #28
 800531a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800531e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005322:	2b01      	cmp	r3, #1
 8005324:	d123      	bne.n	800536e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800533a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800534e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005352:	2b01      	cmp	r3, #1
 8005354:	d105      	bne.n	8005362 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fdbc 	bl	8005ee0 <USB_CoreReset>
 8005368:	4603      	mov	r3, r0
 800536a:	73fb      	strb	r3, [r7, #15]
 800536c:	e01b      	b.n	80053a6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fdb0 	bl	8005ee0 <USB_CoreReset>
 8005380:	4603      	mov	r3, r0
 8005382:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005384:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005388:	2b00      	cmp	r3, #0
 800538a:	d106      	bne.n	800539a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005390:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	639a      	str	r2, [r3, #56]	@ 0x38
 8005398:	e005      	b.n	80053a6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053a6:	7fbb      	ldrb	r3, [r7, #30]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d10b      	bne.n	80053c4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f043 0206 	orr.w	r2, r3, #6
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f043 0220 	orr.w	r2, r3, #32
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053d0:	b004      	add	sp, #16
 80053d2:	4770      	bx	lr

080053d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	4613      	mov	r3, r2
 80053e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d165      	bne.n	80054b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4a41      	ldr	r2, [pc, #260]	@ (80054f0 <USB_SetTurnaroundTime+0x11c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d906      	bls.n	80053fe <USB_SetTurnaroundTime+0x2a>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4a40      	ldr	r2, [pc, #256]	@ (80054f4 <USB_SetTurnaroundTime+0x120>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d202      	bcs.n	80053fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80053f8:	230f      	movs	r3, #15
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	e062      	b.n	80054c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4a3c      	ldr	r2, [pc, #240]	@ (80054f4 <USB_SetTurnaroundTime+0x120>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d306      	bcc.n	8005414 <USB_SetTurnaroundTime+0x40>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4a3b      	ldr	r2, [pc, #236]	@ (80054f8 <USB_SetTurnaroundTime+0x124>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d202      	bcs.n	8005414 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800540e:	230e      	movs	r3, #14
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e057      	b.n	80054c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4a38      	ldr	r2, [pc, #224]	@ (80054f8 <USB_SetTurnaroundTime+0x124>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d306      	bcc.n	800542a <USB_SetTurnaroundTime+0x56>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4a37      	ldr	r2, [pc, #220]	@ (80054fc <USB_SetTurnaroundTime+0x128>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d202      	bcs.n	800542a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005424:	230d      	movs	r3, #13
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	e04c      	b.n	80054c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	4a33      	ldr	r2, [pc, #204]	@ (80054fc <USB_SetTurnaroundTime+0x128>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d306      	bcc.n	8005440 <USB_SetTurnaroundTime+0x6c>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4a32      	ldr	r2, [pc, #200]	@ (8005500 <USB_SetTurnaroundTime+0x12c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d802      	bhi.n	8005440 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800543a:	230c      	movs	r3, #12
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	e041      	b.n	80054c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4a2f      	ldr	r2, [pc, #188]	@ (8005500 <USB_SetTurnaroundTime+0x12c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d906      	bls.n	8005456 <USB_SetTurnaroundTime+0x82>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4a2e      	ldr	r2, [pc, #184]	@ (8005504 <USB_SetTurnaroundTime+0x130>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d802      	bhi.n	8005456 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005450:	230b      	movs	r3, #11
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e036      	b.n	80054c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4a2a      	ldr	r2, [pc, #168]	@ (8005504 <USB_SetTurnaroundTime+0x130>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d906      	bls.n	800546c <USB_SetTurnaroundTime+0x98>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4a29      	ldr	r2, [pc, #164]	@ (8005508 <USB_SetTurnaroundTime+0x134>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d802      	bhi.n	800546c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005466:	230a      	movs	r3, #10
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	e02b      	b.n	80054c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4a26      	ldr	r2, [pc, #152]	@ (8005508 <USB_SetTurnaroundTime+0x134>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d906      	bls.n	8005482 <USB_SetTurnaroundTime+0xae>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4a25      	ldr	r2, [pc, #148]	@ (800550c <USB_SetTurnaroundTime+0x138>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d202      	bcs.n	8005482 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800547c:	2309      	movs	r3, #9
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	e020      	b.n	80054c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4a21      	ldr	r2, [pc, #132]	@ (800550c <USB_SetTurnaroundTime+0x138>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d306      	bcc.n	8005498 <USB_SetTurnaroundTime+0xc4>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4a20      	ldr	r2, [pc, #128]	@ (8005510 <USB_SetTurnaroundTime+0x13c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d802      	bhi.n	8005498 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005492:	2308      	movs	r3, #8
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	e015      	b.n	80054c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4a1d      	ldr	r2, [pc, #116]	@ (8005510 <USB_SetTurnaroundTime+0x13c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d906      	bls.n	80054ae <USB_SetTurnaroundTime+0xda>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005514 <USB_SetTurnaroundTime+0x140>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d202      	bcs.n	80054ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054a8:	2307      	movs	r3, #7
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	e00a      	b.n	80054c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80054ae:	2306      	movs	r3, #6
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	e007      	b.n	80054c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d102      	bne.n	80054c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80054ba:	2309      	movs	r3, #9
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	e001      	b.n	80054c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80054c0:	2309      	movs	r3, #9
 80054c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	029b      	lsls	r3, r3, #10
 80054d8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80054dc:	431a      	orrs	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	371c      	adds	r7, #28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	00d8acbf 	.word	0x00d8acbf
 80054f4:	00e4e1c0 	.word	0x00e4e1c0
 80054f8:	00f42400 	.word	0x00f42400
 80054fc:	01067380 	.word	0x01067380
 8005500:	011a499f 	.word	0x011a499f
 8005504:	01312cff 	.word	0x01312cff
 8005508:	014ca43f 	.word	0x014ca43f
 800550c:	016e3600 	.word	0x016e3600
 8005510:	01a6ab1f 	.word	0x01a6ab1f
 8005514:	01e84800 	.word	0x01e84800

08005518 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f023 0201 	bic.w	r2, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	460b      	mov	r3, r1
 8005544:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005556:	78fb      	ldrb	r3, [r7, #3]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d115      	bne.n	8005588 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005568:	200a      	movs	r0, #10
 800556a:	f7fc fb03 	bl	8001b74 <HAL_Delay>
      ms += 10U;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	330a      	adds	r3, #10
 8005572:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fc23 	bl	8005dc0 <USB_GetMode>
 800557a:	4603      	mov	r3, r0
 800557c:	2b01      	cmp	r3, #1
 800557e:	d01e      	beq.n	80055be <USB_SetCurrentMode+0x84>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2bc7      	cmp	r3, #199	@ 0xc7
 8005584:	d9f0      	bls.n	8005568 <USB_SetCurrentMode+0x2e>
 8005586:	e01a      	b.n	80055be <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d115      	bne.n	80055ba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800559a:	200a      	movs	r0, #10
 800559c:	f7fc faea 	bl	8001b74 <HAL_Delay>
      ms += 10U;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	330a      	adds	r3, #10
 80055a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fc0a 	bl	8005dc0 <USB_GetMode>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <USB_SetCurrentMode+0x84>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2bc7      	cmp	r3, #199	@ 0xc7
 80055b6:	d9f0      	bls.n	800559a <USB_SetCurrentMode+0x60>
 80055b8:	e001      	b.n	80055be <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e005      	b.n	80055ca <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2bc8      	cmp	r3, #200	@ 0xc8
 80055c2:	d101      	bne.n	80055c8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055d4:	b084      	sub	sp, #16
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b086      	sub	sp, #24
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80055e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055ee:	2300      	movs	r3, #0
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	e009      	b.n	8005608 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	3340      	adds	r3, #64	@ 0x40
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	2200      	movs	r2, #0
 8005600:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	3301      	adds	r3, #1
 8005606:	613b      	str	r3, [r7, #16]
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	2b0e      	cmp	r3, #14
 800560c:	d9f2      	bls.n	80055f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800560e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005612:	2b00      	cmp	r3, #0
 8005614:	d11c      	bne.n	8005650 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005624:	f043 0302 	orr.w	r3, r3, #2
 8005628:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005646:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	639a      	str	r2, [r3, #56]	@ 0x38
 800564e:	e00b      	b.n	8005668 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005654:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005660:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800566e:	461a      	mov	r2, r3
 8005670:	2300      	movs	r3, #0
 8005672:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005674:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005678:	2b01      	cmp	r3, #1
 800567a:	d10d      	bne.n	8005698 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800567c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005680:	2b00      	cmp	r3, #0
 8005682:	d104      	bne.n	800568e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005684:	2100      	movs	r1, #0
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f968 	bl	800595c <USB_SetDevSpeed>
 800568c:	e008      	b.n	80056a0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800568e:	2101      	movs	r1, #1
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f963 	bl	800595c <USB_SetDevSpeed>
 8005696:	e003      	b.n	80056a0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005698:	2103      	movs	r1, #3
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f95e 	bl	800595c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056a0:	2110      	movs	r1, #16
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f8fa 	bl	800589c <USB_FlushTxFifo>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f924 	bl	8005900 <USB_FlushRxFifo>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c8:	461a      	mov	r2, r3
 80056ca:	2300      	movs	r3, #0
 80056cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056d4:	461a      	mov	r2, r3
 80056d6:	2300      	movs	r3, #0
 80056d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e0:	461a      	mov	r2, r3
 80056e2:	2300      	movs	r3, #0
 80056e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056e6:	2300      	movs	r3, #0
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	e043      	b.n	8005774 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005702:	d118      	bne.n	8005736 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10a      	bne.n	8005720 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005716:	461a      	mov	r2, r3
 8005718:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	e013      	b.n	8005748 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800572c:	461a      	mov	r2, r3
 800572e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	e008      	b.n	8005748 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005742:	461a      	mov	r2, r3
 8005744:	2300      	movs	r3, #0
 8005746:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005754:	461a      	mov	r2, r3
 8005756:	2300      	movs	r3, #0
 8005758:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005766:	461a      	mov	r2, r3
 8005768:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800576c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	3301      	adds	r3, #1
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005778:	461a      	mov	r2, r3
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4293      	cmp	r3, r2
 800577e:	d3b5      	bcc.n	80056ec <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005780:	2300      	movs	r3, #0
 8005782:	613b      	str	r3, [r7, #16]
 8005784:	e043      	b.n	800580e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005798:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800579c:	d118      	bne.n	80057d0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b0:	461a      	mov	r2, r3
 80057b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	e013      	b.n	80057e2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c6:	461a      	mov	r2, r3
 80057c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	e008      	b.n	80057e2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057dc:	461a      	mov	r2, r3
 80057de:	2300      	movs	r3, #0
 80057e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ee:	461a      	mov	r2, r3
 80057f0:	2300      	movs	r3, #0
 80057f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005800:	461a      	mov	r2, r3
 8005802:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005806:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	3301      	adds	r3, #1
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005812:	461a      	mov	r2, r3
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	4293      	cmp	r3, r2
 8005818:	d3b5      	bcc.n	8005786 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005828:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800582c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800583a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800583c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005840:	2b00      	cmp	r3, #0
 8005842:	d105      	bne.n	8005850 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	f043 0210 	orr.w	r2, r3, #16
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	699a      	ldr	r2, [r3, #24]
 8005854:	4b10      	ldr	r3, [pc, #64]	@ (8005898 <USB_DevInit+0x2c4>)
 8005856:	4313      	orrs	r3, r2
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800585c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	f043 0208 	orr.w	r2, r3, #8
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005870:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005874:	2b01      	cmp	r3, #1
 8005876:	d107      	bne.n	8005888 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005880:	f043 0304 	orr.w	r3, r3, #4
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005888:	7dfb      	ldrb	r3, [r7, #23]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005894:	b004      	add	sp, #16
 8005896:	4770      	bx	lr
 8005898:	803c3800 	.word	0x803c3800

0800589c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3301      	adds	r3, #1
 80058ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058b6:	d901      	bls.n	80058bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e01b      	b.n	80058f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	daf2      	bge.n	80058aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	019b      	lsls	r3, r3, #6
 80058cc:	f043 0220 	orr.w	r2, r3, #32
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3301      	adds	r3, #1
 80058d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058e0:	d901      	bls.n	80058e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e006      	b.n	80058f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b20      	cmp	r3, #32
 80058f0:	d0f0      	beq.n	80058d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3301      	adds	r3, #1
 8005910:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005918:	d901      	bls.n	800591e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e018      	b.n	8005950 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	daf2      	bge.n	800590c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2210      	movs	r2, #16
 800592e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3301      	adds	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800593c:	d901      	bls.n	8005942 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e006      	b.n	8005950 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0310 	and.w	r3, r3, #16
 800594a:	2b10      	cmp	r3, #16
 800594c:	d0f0      	beq.n	8005930 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	68f9      	ldr	r1, [r7, #12]
 8005978:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800597c:	4313      	orrs	r3, r2
 800597e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800598e:	b480      	push	{r7}
 8005990:	b087      	sub	sp, #28
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 0306 	and.w	r3, r3, #6
 80059a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d102      	bne.n	80059b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80059ae:	2300      	movs	r3, #0
 80059b0:	75fb      	strb	r3, [r7, #23]
 80059b2:	e00a      	b.n	80059ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d002      	beq.n	80059c0 <USB_GetDevSpeed+0x32>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b06      	cmp	r3, #6
 80059be:	d102      	bne.n	80059c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059c0:	2302      	movs	r3, #2
 80059c2:	75fb      	strb	r3, [r7, #23]
 80059c4:	e001      	b.n	80059ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80059c6:	230f      	movs	r3, #15
 80059c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	371c      	adds	r7, #28
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	785b      	ldrb	r3, [r3, #1]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d14a      	bne.n	8005a8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a0e:	f040 8086 	bne.w	8005b1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	7812      	ldrb	r2, [r2, #0]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	7812      	ldrb	r2, [r2, #0]
 8005a4a:	0151      	lsls	r1, r2, #5
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	440a      	add	r2, r1
 8005a50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d902      	bls.n	8005a70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	75fb      	strb	r3, [r7, #23]
          break;
 8005a6e:	e056      	b.n	8005b1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a88:	d0e7      	beq.n	8005a5a <USB_EPStopXfer+0x82>
 8005a8a:	e048      	b.n	8005b1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005aa4:	d13b      	bne.n	8005b1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	7812      	ldrb	r2, [r2, #0]
 8005aba:	0151      	lsls	r1, r2, #5
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	440a      	add	r2, r1
 8005ac0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ac4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ac8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	7812      	ldrb	r2, [r2, #0]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ae8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005aec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3301      	adds	r3, #1
 8005af2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d902      	bls.n	8005b04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	75fb      	strb	r3, [r7, #23]
          break;
 8005b02:	e00c      	b.n	8005b1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b1c:	d0e7      	beq.n	8005aee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	371c      	adds	r7, #28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b089      	sub	sp, #36	@ 0x24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	4611      	mov	r1, r2
 8005b38:	461a      	mov	r2, r3
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	71fb      	strb	r3, [r7, #7]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d123      	bne.n	8005b9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b52:	88bb      	ldrh	r3, [r7, #4]
 8005b54:	3303      	adds	r3, #3
 8005b56:	089b      	lsrs	r3, r3, #2
 8005b58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61bb      	str	r3, [r7, #24]
 8005b5e:	e018      	b.n	8005b92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	031a      	lsls	r2, r3, #12
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	3301      	adds	r3, #1
 8005b78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	3301      	adds	r3, #1
 8005b84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	61bb      	str	r3, [r7, #24]
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d3e2      	bcc.n	8005b60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3724      	adds	r7, #36	@ 0x24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b08b      	sub	sp, #44	@ 0x2c
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005bbe:	88fb      	ldrh	r3, [r7, #6]
 8005bc0:	089b      	lsrs	r3, r3, #2
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005bc6:	88fb      	ldrh	r3, [r7, #6]
 8005bc8:	f003 0303 	and.w	r3, r3, #3
 8005bcc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005bce:	2300      	movs	r3, #0
 8005bd0:	623b      	str	r3, [r7, #32]
 8005bd2:	e014      	b.n	8005bfe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	601a      	str	r2, [r3, #0]
    pDest++;
 8005be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be2:	3301      	adds	r3, #1
 8005be4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	3301      	adds	r3, #1
 8005bea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bee:	3301      	adds	r3, #1
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	623b      	str	r3, [r7, #32]
 8005bfe:	6a3a      	ldr	r2, [r7, #32]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d3e6      	bcc.n	8005bd4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c06:	8bfb      	ldrh	r3, [r7, #30]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01e      	beq.n	8005c4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c16:	461a      	mov	r2, r3
 8005c18:	f107 0310 	add.w	r3, r7, #16
 8005c1c:	6812      	ldr	r2, [r2, #0]
 8005c1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	fa22 f303 	lsr.w	r3, r2, r3
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	701a      	strb	r2, [r3, #0]
      i++;
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	3301      	adds	r3, #1
 8005c36:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005c3e:	8bfb      	ldrh	r3, [r7, #30]
 8005c40:	3b01      	subs	r3, #1
 8005c42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c44:	8bfb      	ldrh	r3, [r7, #30]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1ea      	bne.n	8005c20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	372c      	adds	r7, #44	@ 0x2c
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005c72:	f023 0303 	bic.w	r3, r3, #3
 8005c76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c86:	f043 0302 	orr.w	r3, r3, #2
 8005c8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b085      	sub	sp, #20
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	0c1b      	lsrs	r3, r3, #16
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	4013      	ands	r3, r2
 8005d16:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	b29b      	uxth	r3, r3
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	4013      	ands	r3, r2
 8005d54:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d56:	68bb      	ldr	r3, [r7, #8]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d86:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005d88:	78fb      	ldrb	r3, [r7, #3]
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	fa22 f303 	lsr.w	r3, r2, r3
 8005d94:	01db      	lsls	r3, r3, #7
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d9e:	78fb      	ldrb	r3, [r7, #3]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4013      	ands	r3, r2
 8005db0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005db2:	68bb      	ldr	r3, [r7, #8]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	371c      	adds	r7, #28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005df6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005dfa:	f023 0307 	bic.w	r3, r3, #7
 8005dfe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
	...

08005e24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	333c      	adds	r3, #60	@ 0x3c
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	4a26      	ldr	r2, [pc, #152]	@ (8005edc <USB_EP0_OutStart+0xb8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d90a      	bls.n	8005e5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e58:	d101      	bne.n	8005e5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e037      	b.n	8005ece <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e64:	461a      	mov	r2, r3
 8005e66:	2300      	movs	r3, #0
 8005e68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e8c:	f043 0318 	orr.w	r3, r3, #24
 8005e90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ea0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005ea4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ea6:	7afb      	ldrb	r3, [r7, #11]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d10f      	bne.n	8005ecc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ec6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005eca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	371c      	adds	r7, #28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	4f54300a 	.word	0x4f54300a

08005ee0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ef8:	d901      	bls.n	8005efe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e022      	b.n	8005f44 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	daf2      	bge.n	8005eec <USB_CoreReset+0xc>

  count = 10U;
 8005f06:	230a      	movs	r3, #10
 8005f08:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005f0a:	e002      	b.n	8005f12 <USB_CoreReset+0x32>
  {
    count--;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1f9      	bne.n	8005f0c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	f043 0201 	orr.w	r2, r3, #1
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3301      	adds	r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f30:	d901      	bls.n	8005f36 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e006      	b.n	8005f44 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d0f0      	beq.n	8005f24 <USB_CoreReset+0x44>

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <malloc>:
 8005f50:	4b02      	ldr	r3, [pc, #8]	@ (8005f5c <malloc+0xc>)
 8005f52:	4601      	mov	r1, r0
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	f000 b825 	b.w	8005fa4 <_malloc_r>
 8005f5a:	bf00      	nop
 8005f5c:	2000000c 	.word	0x2000000c

08005f60 <sbrk_aligned>:
 8005f60:	b570      	push	{r4, r5, r6, lr}
 8005f62:	4e0f      	ldr	r6, [pc, #60]	@ (8005fa0 <sbrk_aligned+0x40>)
 8005f64:	460c      	mov	r4, r1
 8005f66:	6831      	ldr	r1, [r6, #0]
 8005f68:	4605      	mov	r5, r0
 8005f6a:	b911      	cbnz	r1, 8005f72 <sbrk_aligned+0x12>
 8005f6c:	f000 f8d0 	bl	8006110 <_sbrk_r>
 8005f70:	6030      	str	r0, [r6, #0]
 8005f72:	4621      	mov	r1, r4
 8005f74:	4628      	mov	r0, r5
 8005f76:	f000 f8cb 	bl	8006110 <_sbrk_r>
 8005f7a:	1c43      	adds	r3, r0, #1
 8005f7c:	d103      	bne.n	8005f86 <sbrk_aligned+0x26>
 8005f7e:	f04f 34ff 	mov.w	r4, #4294967295
 8005f82:	4620      	mov	r0, r4
 8005f84:	bd70      	pop	{r4, r5, r6, pc}
 8005f86:	1cc4      	adds	r4, r0, #3
 8005f88:	f024 0403 	bic.w	r4, r4, #3
 8005f8c:	42a0      	cmp	r0, r4
 8005f8e:	d0f8      	beq.n	8005f82 <sbrk_aligned+0x22>
 8005f90:	1a21      	subs	r1, r4, r0
 8005f92:	4628      	mov	r0, r5
 8005f94:	f000 f8bc 	bl	8006110 <_sbrk_r>
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d1f2      	bne.n	8005f82 <sbrk_aligned+0x22>
 8005f9c:	e7ef      	b.n	8005f7e <sbrk_aligned+0x1e>
 8005f9e:	bf00      	nop
 8005fa0:	20000764 	.word	0x20000764

08005fa4 <_malloc_r>:
 8005fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fa8:	1ccd      	adds	r5, r1, #3
 8005faa:	f025 0503 	bic.w	r5, r5, #3
 8005fae:	3508      	adds	r5, #8
 8005fb0:	2d0c      	cmp	r5, #12
 8005fb2:	bf38      	it	cc
 8005fb4:	250c      	movcc	r5, #12
 8005fb6:	2d00      	cmp	r5, #0
 8005fb8:	4606      	mov	r6, r0
 8005fba:	db01      	blt.n	8005fc0 <_malloc_r+0x1c>
 8005fbc:	42a9      	cmp	r1, r5
 8005fbe:	d904      	bls.n	8005fca <_malloc_r+0x26>
 8005fc0:	230c      	movs	r3, #12
 8005fc2:	6033      	str	r3, [r6, #0]
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060a0 <_malloc_r+0xfc>
 8005fce:	f000 f869 	bl	80060a4 <__malloc_lock>
 8005fd2:	f8d8 3000 	ldr.w	r3, [r8]
 8005fd6:	461c      	mov	r4, r3
 8005fd8:	bb44      	cbnz	r4, 800602c <_malloc_r+0x88>
 8005fda:	4629      	mov	r1, r5
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f7ff ffbf 	bl	8005f60 <sbrk_aligned>
 8005fe2:	1c43      	adds	r3, r0, #1
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	d158      	bne.n	800609a <_malloc_r+0xf6>
 8005fe8:	f8d8 4000 	ldr.w	r4, [r8]
 8005fec:	4627      	mov	r7, r4
 8005fee:	2f00      	cmp	r7, #0
 8005ff0:	d143      	bne.n	800607a <_malloc_r+0xd6>
 8005ff2:	2c00      	cmp	r4, #0
 8005ff4:	d04b      	beq.n	800608e <_malloc_r+0xea>
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	eb04 0903 	add.w	r9, r4, r3
 8006000:	f000 f886 	bl	8006110 <_sbrk_r>
 8006004:	4581      	cmp	r9, r0
 8006006:	d142      	bne.n	800608e <_malloc_r+0xea>
 8006008:	6821      	ldr	r1, [r4, #0]
 800600a:	1a6d      	subs	r5, r5, r1
 800600c:	4629      	mov	r1, r5
 800600e:	4630      	mov	r0, r6
 8006010:	f7ff ffa6 	bl	8005f60 <sbrk_aligned>
 8006014:	3001      	adds	r0, #1
 8006016:	d03a      	beq.n	800608e <_malloc_r+0xea>
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	442b      	add	r3, r5
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	f8d8 3000 	ldr.w	r3, [r8]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	bb62      	cbnz	r2, 8006080 <_malloc_r+0xdc>
 8006026:	f8c8 7000 	str.w	r7, [r8]
 800602a:	e00f      	b.n	800604c <_malloc_r+0xa8>
 800602c:	6822      	ldr	r2, [r4, #0]
 800602e:	1b52      	subs	r2, r2, r5
 8006030:	d420      	bmi.n	8006074 <_malloc_r+0xd0>
 8006032:	2a0b      	cmp	r2, #11
 8006034:	d917      	bls.n	8006066 <_malloc_r+0xc2>
 8006036:	1961      	adds	r1, r4, r5
 8006038:	42a3      	cmp	r3, r4
 800603a:	6025      	str	r5, [r4, #0]
 800603c:	bf18      	it	ne
 800603e:	6059      	strne	r1, [r3, #4]
 8006040:	6863      	ldr	r3, [r4, #4]
 8006042:	bf08      	it	eq
 8006044:	f8c8 1000 	streq.w	r1, [r8]
 8006048:	5162      	str	r2, [r4, r5]
 800604a:	604b      	str	r3, [r1, #4]
 800604c:	4630      	mov	r0, r6
 800604e:	f000 f82f 	bl	80060b0 <__malloc_unlock>
 8006052:	f104 000b 	add.w	r0, r4, #11
 8006056:	1d23      	adds	r3, r4, #4
 8006058:	f020 0007 	bic.w	r0, r0, #7
 800605c:	1ac2      	subs	r2, r0, r3
 800605e:	bf1c      	itt	ne
 8006060:	1a1b      	subne	r3, r3, r0
 8006062:	50a3      	strne	r3, [r4, r2]
 8006064:	e7af      	b.n	8005fc6 <_malloc_r+0x22>
 8006066:	6862      	ldr	r2, [r4, #4]
 8006068:	42a3      	cmp	r3, r4
 800606a:	bf0c      	ite	eq
 800606c:	f8c8 2000 	streq.w	r2, [r8]
 8006070:	605a      	strne	r2, [r3, #4]
 8006072:	e7eb      	b.n	800604c <_malloc_r+0xa8>
 8006074:	4623      	mov	r3, r4
 8006076:	6864      	ldr	r4, [r4, #4]
 8006078:	e7ae      	b.n	8005fd8 <_malloc_r+0x34>
 800607a:	463c      	mov	r4, r7
 800607c:	687f      	ldr	r7, [r7, #4]
 800607e:	e7b6      	b.n	8005fee <_malloc_r+0x4a>
 8006080:	461a      	mov	r2, r3
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	42a3      	cmp	r3, r4
 8006086:	d1fb      	bne.n	8006080 <_malloc_r+0xdc>
 8006088:	2300      	movs	r3, #0
 800608a:	6053      	str	r3, [r2, #4]
 800608c:	e7de      	b.n	800604c <_malloc_r+0xa8>
 800608e:	230c      	movs	r3, #12
 8006090:	6033      	str	r3, [r6, #0]
 8006092:	4630      	mov	r0, r6
 8006094:	f000 f80c 	bl	80060b0 <__malloc_unlock>
 8006098:	e794      	b.n	8005fc4 <_malloc_r+0x20>
 800609a:	6005      	str	r5, [r0, #0]
 800609c:	e7d6      	b.n	800604c <_malloc_r+0xa8>
 800609e:	bf00      	nop
 80060a0:	20000768 	.word	0x20000768

080060a4 <__malloc_lock>:
 80060a4:	4801      	ldr	r0, [pc, #4]	@ (80060ac <__malloc_lock+0x8>)
 80060a6:	f000 b86d 	b.w	8006184 <__retarget_lock_acquire_recursive>
 80060aa:	bf00      	nop
 80060ac:	200008a8 	.word	0x200008a8

080060b0 <__malloc_unlock>:
 80060b0:	4801      	ldr	r0, [pc, #4]	@ (80060b8 <__malloc_unlock+0x8>)
 80060b2:	f000 b868 	b.w	8006186 <__retarget_lock_release_recursive>
 80060b6:	bf00      	nop
 80060b8:	200008a8 	.word	0x200008a8

080060bc <siprintf>:
 80060bc:	b40e      	push	{r1, r2, r3}
 80060be:	b510      	push	{r4, lr}
 80060c0:	b09d      	sub	sp, #116	@ 0x74
 80060c2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80060c4:	9002      	str	r0, [sp, #8]
 80060c6:	9006      	str	r0, [sp, #24]
 80060c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80060cc:	480a      	ldr	r0, [pc, #40]	@ (80060f8 <siprintf+0x3c>)
 80060ce:	9107      	str	r1, [sp, #28]
 80060d0:	9104      	str	r1, [sp, #16]
 80060d2:	490a      	ldr	r1, [pc, #40]	@ (80060fc <siprintf+0x40>)
 80060d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80060d8:	9105      	str	r1, [sp, #20]
 80060da:	2400      	movs	r4, #0
 80060dc:	a902      	add	r1, sp, #8
 80060de:	6800      	ldr	r0, [r0, #0]
 80060e0:	9301      	str	r3, [sp, #4]
 80060e2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80060e4:	f000 f8f6 	bl	80062d4 <_svfiprintf_r>
 80060e8:	9b02      	ldr	r3, [sp, #8]
 80060ea:	701c      	strb	r4, [r3, #0]
 80060ec:	b01d      	add	sp, #116	@ 0x74
 80060ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060f2:	b003      	add	sp, #12
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	2000000c 	.word	0x2000000c
 80060fc:	ffff0208 	.word	0xffff0208

08006100 <memset>:
 8006100:	4402      	add	r2, r0
 8006102:	4603      	mov	r3, r0
 8006104:	4293      	cmp	r3, r2
 8006106:	d100      	bne.n	800610a <memset+0xa>
 8006108:	4770      	bx	lr
 800610a:	f803 1b01 	strb.w	r1, [r3], #1
 800610e:	e7f9      	b.n	8006104 <memset+0x4>

08006110 <_sbrk_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4d06      	ldr	r5, [pc, #24]	@ (800612c <_sbrk_r+0x1c>)
 8006114:	2300      	movs	r3, #0
 8006116:	4604      	mov	r4, r0
 8006118:	4608      	mov	r0, r1
 800611a:	602b      	str	r3, [r5, #0]
 800611c:	f7fb fc46 	bl	80019ac <_sbrk>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d102      	bne.n	800612a <_sbrk_r+0x1a>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	b103      	cbz	r3, 800612a <_sbrk_r+0x1a>
 8006128:	6023      	str	r3, [r4, #0]
 800612a:	bd38      	pop	{r3, r4, r5, pc}
 800612c:	200008a4 	.word	0x200008a4

08006130 <__errno>:
 8006130:	4b01      	ldr	r3, [pc, #4]	@ (8006138 <__errno+0x8>)
 8006132:	6818      	ldr	r0, [r3, #0]
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	2000000c 	.word	0x2000000c

0800613c <__libc_init_array>:
 800613c:	b570      	push	{r4, r5, r6, lr}
 800613e:	4d0d      	ldr	r5, [pc, #52]	@ (8006174 <__libc_init_array+0x38>)
 8006140:	4c0d      	ldr	r4, [pc, #52]	@ (8006178 <__libc_init_array+0x3c>)
 8006142:	1b64      	subs	r4, r4, r5
 8006144:	10a4      	asrs	r4, r4, #2
 8006146:	2600      	movs	r6, #0
 8006148:	42a6      	cmp	r6, r4
 800614a:	d109      	bne.n	8006160 <__libc_init_array+0x24>
 800614c:	4d0b      	ldr	r5, [pc, #44]	@ (800617c <__libc_init_array+0x40>)
 800614e:	4c0c      	ldr	r4, [pc, #48]	@ (8006180 <__libc_init_array+0x44>)
 8006150:	f000 fba6 	bl	80068a0 <_init>
 8006154:	1b64      	subs	r4, r4, r5
 8006156:	10a4      	asrs	r4, r4, #2
 8006158:	2600      	movs	r6, #0
 800615a:	42a6      	cmp	r6, r4
 800615c:	d105      	bne.n	800616a <__libc_init_array+0x2e>
 800615e:	bd70      	pop	{r4, r5, r6, pc}
 8006160:	f855 3b04 	ldr.w	r3, [r5], #4
 8006164:	4798      	blx	r3
 8006166:	3601      	adds	r6, #1
 8006168:	e7ee      	b.n	8006148 <__libc_init_array+0xc>
 800616a:	f855 3b04 	ldr.w	r3, [r5], #4
 800616e:	4798      	blx	r3
 8006170:	3601      	adds	r6, #1
 8006172:	e7f2      	b.n	800615a <__libc_init_array+0x1e>
 8006174:	08009480 	.word	0x08009480
 8006178:	08009480 	.word	0x08009480
 800617c:	08009480 	.word	0x08009480
 8006180:	08009484 	.word	0x08009484

08006184 <__retarget_lock_acquire_recursive>:
 8006184:	4770      	bx	lr

08006186 <__retarget_lock_release_recursive>:
 8006186:	4770      	bx	lr

08006188 <_free_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	4605      	mov	r5, r0
 800618c:	2900      	cmp	r1, #0
 800618e:	d041      	beq.n	8006214 <_free_r+0x8c>
 8006190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006194:	1f0c      	subs	r4, r1, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	bfb8      	it	lt
 800619a:	18e4      	addlt	r4, r4, r3
 800619c:	f7ff ff82 	bl	80060a4 <__malloc_lock>
 80061a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006218 <_free_r+0x90>)
 80061a2:	6813      	ldr	r3, [r2, #0]
 80061a4:	b933      	cbnz	r3, 80061b4 <_free_r+0x2c>
 80061a6:	6063      	str	r3, [r4, #4]
 80061a8:	6014      	str	r4, [r2, #0]
 80061aa:	4628      	mov	r0, r5
 80061ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061b0:	f7ff bf7e 	b.w	80060b0 <__malloc_unlock>
 80061b4:	42a3      	cmp	r3, r4
 80061b6:	d908      	bls.n	80061ca <_free_r+0x42>
 80061b8:	6820      	ldr	r0, [r4, #0]
 80061ba:	1821      	adds	r1, r4, r0
 80061bc:	428b      	cmp	r3, r1
 80061be:	bf01      	itttt	eq
 80061c0:	6819      	ldreq	r1, [r3, #0]
 80061c2:	685b      	ldreq	r3, [r3, #4]
 80061c4:	1809      	addeq	r1, r1, r0
 80061c6:	6021      	streq	r1, [r4, #0]
 80061c8:	e7ed      	b.n	80061a6 <_free_r+0x1e>
 80061ca:	461a      	mov	r2, r3
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	b10b      	cbz	r3, 80061d4 <_free_r+0x4c>
 80061d0:	42a3      	cmp	r3, r4
 80061d2:	d9fa      	bls.n	80061ca <_free_r+0x42>
 80061d4:	6811      	ldr	r1, [r2, #0]
 80061d6:	1850      	adds	r0, r2, r1
 80061d8:	42a0      	cmp	r0, r4
 80061da:	d10b      	bne.n	80061f4 <_free_r+0x6c>
 80061dc:	6820      	ldr	r0, [r4, #0]
 80061de:	4401      	add	r1, r0
 80061e0:	1850      	adds	r0, r2, r1
 80061e2:	4283      	cmp	r3, r0
 80061e4:	6011      	str	r1, [r2, #0]
 80061e6:	d1e0      	bne.n	80061aa <_free_r+0x22>
 80061e8:	6818      	ldr	r0, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	6053      	str	r3, [r2, #4]
 80061ee:	4408      	add	r0, r1
 80061f0:	6010      	str	r0, [r2, #0]
 80061f2:	e7da      	b.n	80061aa <_free_r+0x22>
 80061f4:	d902      	bls.n	80061fc <_free_r+0x74>
 80061f6:	230c      	movs	r3, #12
 80061f8:	602b      	str	r3, [r5, #0]
 80061fa:	e7d6      	b.n	80061aa <_free_r+0x22>
 80061fc:	6820      	ldr	r0, [r4, #0]
 80061fe:	1821      	adds	r1, r4, r0
 8006200:	428b      	cmp	r3, r1
 8006202:	bf04      	itt	eq
 8006204:	6819      	ldreq	r1, [r3, #0]
 8006206:	685b      	ldreq	r3, [r3, #4]
 8006208:	6063      	str	r3, [r4, #4]
 800620a:	bf04      	itt	eq
 800620c:	1809      	addeq	r1, r1, r0
 800620e:	6021      	streq	r1, [r4, #0]
 8006210:	6054      	str	r4, [r2, #4]
 8006212:	e7ca      	b.n	80061aa <_free_r+0x22>
 8006214:	bd38      	pop	{r3, r4, r5, pc}
 8006216:	bf00      	nop
 8006218:	20000768 	.word	0x20000768

0800621c <__ssputs_r>:
 800621c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006220:	688e      	ldr	r6, [r1, #8]
 8006222:	461f      	mov	r7, r3
 8006224:	42be      	cmp	r6, r7
 8006226:	680b      	ldr	r3, [r1, #0]
 8006228:	4682      	mov	sl, r0
 800622a:	460c      	mov	r4, r1
 800622c:	4690      	mov	r8, r2
 800622e:	d82d      	bhi.n	800628c <__ssputs_r+0x70>
 8006230:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006234:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006238:	d026      	beq.n	8006288 <__ssputs_r+0x6c>
 800623a:	6965      	ldr	r5, [r4, #20]
 800623c:	6909      	ldr	r1, [r1, #16]
 800623e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006242:	eba3 0901 	sub.w	r9, r3, r1
 8006246:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800624a:	1c7b      	adds	r3, r7, #1
 800624c:	444b      	add	r3, r9
 800624e:	106d      	asrs	r5, r5, #1
 8006250:	429d      	cmp	r5, r3
 8006252:	bf38      	it	cc
 8006254:	461d      	movcc	r5, r3
 8006256:	0553      	lsls	r3, r2, #21
 8006258:	d527      	bpl.n	80062aa <__ssputs_r+0x8e>
 800625a:	4629      	mov	r1, r5
 800625c:	f7ff fea2 	bl	8005fa4 <_malloc_r>
 8006260:	4606      	mov	r6, r0
 8006262:	b360      	cbz	r0, 80062be <__ssputs_r+0xa2>
 8006264:	6921      	ldr	r1, [r4, #16]
 8006266:	464a      	mov	r2, r9
 8006268:	f000 fad6 	bl	8006818 <memcpy>
 800626c:	89a3      	ldrh	r3, [r4, #12]
 800626e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006276:	81a3      	strh	r3, [r4, #12]
 8006278:	6126      	str	r6, [r4, #16]
 800627a:	6165      	str	r5, [r4, #20]
 800627c:	444e      	add	r6, r9
 800627e:	eba5 0509 	sub.w	r5, r5, r9
 8006282:	6026      	str	r6, [r4, #0]
 8006284:	60a5      	str	r5, [r4, #8]
 8006286:	463e      	mov	r6, r7
 8006288:	42be      	cmp	r6, r7
 800628a:	d900      	bls.n	800628e <__ssputs_r+0x72>
 800628c:	463e      	mov	r6, r7
 800628e:	6820      	ldr	r0, [r4, #0]
 8006290:	4632      	mov	r2, r6
 8006292:	4641      	mov	r1, r8
 8006294:	f000 faa6 	bl	80067e4 <memmove>
 8006298:	68a3      	ldr	r3, [r4, #8]
 800629a:	1b9b      	subs	r3, r3, r6
 800629c:	60a3      	str	r3, [r4, #8]
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	4433      	add	r3, r6
 80062a2:	6023      	str	r3, [r4, #0]
 80062a4:	2000      	movs	r0, #0
 80062a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062aa:	462a      	mov	r2, r5
 80062ac:	f000 fac2 	bl	8006834 <_realloc_r>
 80062b0:	4606      	mov	r6, r0
 80062b2:	2800      	cmp	r0, #0
 80062b4:	d1e0      	bne.n	8006278 <__ssputs_r+0x5c>
 80062b6:	6921      	ldr	r1, [r4, #16]
 80062b8:	4650      	mov	r0, sl
 80062ba:	f7ff ff65 	bl	8006188 <_free_r>
 80062be:	230c      	movs	r3, #12
 80062c0:	f8ca 3000 	str.w	r3, [sl]
 80062c4:	89a3      	ldrh	r3, [r4, #12]
 80062c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ca:	81a3      	strh	r3, [r4, #12]
 80062cc:	f04f 30ff 	mov.w	r0, #4294967295
 80062d0:	e7e9      	b.n	80062a6 <__ssputs_r+0x8a>
	...

080062d4 <_svfiprintf_r>:
 80062d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d8:	4698      	mov	r8, r3
 80062da:	898b      	ldrh	r3, [r1, #12]
 80062dc:	061b      	lsls	r3, r3, #24
 80062de:	b09d      	sub	sp, #116	@ 0x74
 80062e0:	4607      	mov	r7, r0
 80062e2:	460d      	mov	r5, r1
 80062e4:	4614      	mov	r4, r2
 80062e6:	d510      	bpl.n	800630a <_svfiprintf_r+0x36>
 80062e8:	690b      	ldr	r3, [r1, #16]
 80062ea:	b973      	cbnz	r3, 800630a <_svfiprintf_r+0x36>
 80062ec:	2140      	movs	r1, #64	@ 0x40
 80062ee:	f7ff fe59 	bl	8005fa4 <_malloc_r>
 80062f2:	6028      	str	r0, [r5, #0]
 80062f4:	6128      	str	r0, [r5, #16]
 80062f6:	b930      	cbnz	r0, 8006306 <_svfiprintf_r+0x32>
 80062f8:	230c      	movs	r3, #12
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	b01d      	add	sp, #116	@ 0x74
 8006302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006306:	2340      	movs	r3, #64	@ 0x40
 8006308:	616b      	str	r3, [r5, #20]
 800630a:	2300      	movs	r3, #0
 800630c:	9309      	str	r3, [sp, #36]	@ 0x24
 800630e:	2320      	movs	r3, #32
 8006310:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006314:	f8cd 800c 	str.w	r8, [sp, #12]
 8006318:	2330      	movs	r3, #48	@ 0x30
 800631a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80064b8 <_svfiprintf_r+0x1e4>
 800631e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006322:	f04f 0901 	mov.w	r9, #1
 8006326:	4623      	mov	r3, r4
 8006328:	469a      	mov	sl, r3
 800632a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800632e:	b10a      	cbz	r2, 8006334 <_svfiprintf_r+0x60>
 8006330:	2a25      	cmp	r2, #37	@ 0x25
 8006332:	d1f9      	bne.n	8006328 <_svfiprintf_r+0x54>
 8006334:	ebba 0b04 	subs.w	fp, sl, r4
 8006338:	d00b      	beq.n	8006352 <_svfiprintf_r+0x7e>
 800633a:	465b      	mov	r3, fp
 800633c:	4622      	mov	r2, r4
 800633e:	4629      	mov	r1, r5
 8006340:	4638      	mov	r0, r7
 8006342:	f7ff ff6b 	bl	800621c <__ssputs_r>
 8006346:	3001      	adds	r0, #1
 8006348:	f000 80a7 	beq.w	800649a <_svfiprintf_r+0x1c6>
 800634c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800634e:	445a      	add	r2, fp
 8006350:	9209      	str	r2, [sp, #36]	@ 0x24
 8006352:	f89a 3000 	ldrb.w	r3, [sl]
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 809f 	beq.w	800649a <_svfiprintf_r+0x1c6>
 800635c:	2300      	movs	r3, #0
 800635e:	f04f 32ff 	mov.w	r2, #4294967295
 8006362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006366:	f10a 0a01 	add.w	sl, sl, #1
 800636a:	9304      	str	r3, [sp, #16]
 800636c:	9307      	str	r3, [sp, #28]
 800636e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006372:	931a      	str	r3, [sp, #104]	@ 0x68
 8006374:	4654      	mov	r4, sl
 8006376:	2205      	movs	r2, #5
 8006378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800637c:	484e      	ldr	r0, [pc, #312]	@ (80064b8 <_svfiprintf_r+0x1e4>)
 800637e:	f7f9 ff27 	bl	80001d0 <memchr>
 8006382:	9a04      	ldr	r2, [sp, #16]
 8006384:	b9d8      	cbnz	r0, 80063be <_svfiprintf_r+0xea>
 8006386:	06d0      	lsls	r0, r2, #27
 8006388:	bf44      	itt	mi
 800638a:	2320      	movmi	r3, #32
 800638c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006390:	0711      	lsls	r1, r2, #28
 8006392:	bf44      	itt	mi
 8006394:	232b      	movmi	r3, #43	@ 0x2b
 8006396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800639a:	f89a 3000 	ldrb.w	r3, [sl]
 800639e:	2b2a      	cmp	r3, #42	@ 0x2a
 80063a0:	d015      	beq.n	80063ce <_svfiprintf_r+0xfa>
 80063a2:	9a07      	ldr	r2, [sp, #28]
 80063a4:	4654      	mov	r4, sl
 80063a6:	2000      	movs	r0, #0
 80063a8:	f04f 0c0a 	mov.w	ip, #10
 80063ac:	4621      	mov	r1, r4
 80063ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063b2:	3b30      	subs	r3, #48	@ 0x30
 80063b4:	2b09      	cmp	r3, #9
 80063b6:	d94b      	bls.n	8006450 <_svfiprintf_r+0x17c>
 80063b8:	b1b0      	cbz	r0, 80063e8 <_svfiprintf_r+0x114>
 80063ba:	9207      	str	r2, [sp, #28]
 80063bc:	e014      	b.n	80063e8 <_svfiprintf_r+0x114>
 80063be:	eba0 0308 	sub.w	r3, r0, r8
 80063c2:	fa09 f303 	lsl.w	r3, r9, r3
 80063c6:	4313      	orrs	r3, r2
 80063c8:	9304      	str	r3, [sp, #16]
 80063ca:	46a2      	mov	sl, r4
 80063cc:	e7d2      	b.n	8006374 <_svfiprintf_r+0xa0>
 80063ce:	9b03      	ldr	r3, [sp, #12]
 80063d0:	1d19      	adds	r1, r3, #4
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	9103      	str	r1, [sp, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bfbb      	ittet	lt
 80063da:	425b      	neglt	r3, r3
 80063dc:	f042 0202 	orrlt.w	r2, r2, #2
 80063e0:	9307      	strge	r3, [sp, #28]
 80063e2:	9307      	strlt	r3, [sp, #28]
 80063e4:	bfb8      	it	lt
 80063e6:	9204      	strlt	r2, [sp, #16]
 80063e8:	7823      	ldrb	r3, [r4, #0]
 80063ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80063ec:	d10a      	bne.n	8006404 <_svfiprintf_r+0x130>
 80063ee:	7863      	ldrb	r3, [r4, #1]
 80063f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80063f2:	d132      	bne.n	800645a <_svfiprintf_r+0x186>
 80063f4:	9b03      	ldr	r3, [sp, #12]
 80063f6:	1d1a      	adds	r2, r3, #4
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	9203      	str	r2, [sp, #12]
 80063fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006400:	3402      	adds	r4, #2
 8006402:	9305      	str	r3, [sp, #20]
 8006404:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80064c8 <_svfiprintf_r+0x1f4>
 8006408:	7821      	ldrb	r1, [r4, #0]
 800640a:	2203      	movs	r2, #3
 800640c:	4650      	mov	r0, sl
 800640e:	f7f9 fedf 	bl	80001d0 <memchr>
 8006412:	b138      	cbz	r0, 8006424 <_svfiprintf_r+0x150>
 8006414:	9b04      	ldr	r3, [sp, #16]
 8006416:	eba0 000a 	sub.w	r0, r0, sl
 800641a:	2240      	movs	r2, #64	@ 0x40
 800641c:	4082      	lsls	r2, r0
 800641e:	4313      	orrs	r3, r2
 8006420:	3401      	adds	r4, #1
 8006422:	9304      	str	r3, [sp, #16]
 8006424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006428:	4824      	ldr	r0, [pc, #144]	@ (80064bc <_svfiprintf_r+0x1e8>)
 800642a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800642e:	2206      	movs	r2, #6
 8006430:	f7f9 fece 	bl	80001d0 <memchr>
 8006434:	2800      	cmp	r0, #0
 8006436:	d036      	beq.n	80064a6 <_svfiprintf_r+0x1d2>
 8006438:	4b21      	ldr	r3, [pc, #132]	@ (80064c0 <_svfiprintf_r+0x1ec>)
 800643a:	bb1b      	cbnz	r3, 8006484 <_svfiprintf_r+0x1b0>
 800643c:	9b03      	ldr	r3, [sp, #12]
 800643e:	3307      	adds	r3, #7
 8006440:	f023 0307 	bic.w	r3, r3, #7
 8006444:	3308      	adds	r3, #8
 8006446:	9303      	str	r3, [sp, #12]
 8006448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800644a:	4433      	add	r3, r6
 800644c:	9309      	str	r3, [sp, #36]	@ 0x24
 800644e:	e76a      	b.n	8006326 <_svfiprintf_r+0x52>
 8006450:	fb0c 3202 	mla	r2, ip, r2, r3
 8006454:	460c      	mov	r4, r1
 8006456:	2001      	movs	r0, #1
 8006458:	e7a8      	b.n	80063ac <_svfiprintf_r+0xd8>
 800645a:	2300      	movs	r3, #0
 800645c:	3401      	adds	r4, #1
 800645e:	9305      	str	r3, [sp, #20]
 8006460:	4619      	mov	r1, r3
 8006462:	f04f 0c0a 	mov.w	ip, #10
 8006466:	4620      	mov	r0, r4
 8006468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800646c:	3a30      	subs	r2, #48	@ 0x30
 800646e:	2a09      	cmp	r2, #9
 8006470:	d903      	bls.n	800647a <_svfiprintf_r+0x1a6>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d0c6      	beq.n	8006404 <_svfiprintf_r+0x130>
 8006476:	9105      	str	r1, [sp, #20]
 8006478:	e7c4      	b.n	8006404 <_svfiprintf_r+0x130>
 800647a:	fb0c 2101 	mla	r1, ip, r1, r2
 800647e:	4604      	mov	r4, r0
 8006480:	2301      	movs	r3, #1
 8006482:	e7f0      	b.n	8006466 <_svfiprintf_r+0x192>
 8006484:	ab03      	add	r3, sp, #12
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	462a      	mov	r2, r5
 800648a:	4b0e      	ldr	r3, [pc, #56]	@ (80064c4 <_svfiprintf_r+0x1f0>)
 800648c:	a904      	add	r1, sp, #16
 800648e:	4638      	mov	r0, r7
 8006490:	f3af 8000 	nop.w
 8006494:	1c42      	adds	r2, r0, #1
 8006496:	4606      	mov	r6, r0
 8006498:	d1d6      	bne.n	8006448 <_svfiprintf_r+0x174>
 800649a:	89ab      	ldrh	r3, [r5, #12]
 800649c:	065b      	lsls	r3, r3, #25
 800649e:	f53f af2d 	bmi.w	80062fc <_svfiprintf_r+0x28>
 80064a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064a4:	e72c      	b.n	8006300 <_svfiprintf_r+0x2c>
 80064a6:	ab03      	add	r3, sp, #12
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	462a      	mov	r2, r5
 80064ac:	4b05      	ldr	r3, [pc, #20]	@ (80064c4 <_svfiprintf_r+0x1f0>)
 80064ae:	a904      	add	r1, sp, #16
 80064b0:	4638      	mov	r0, r7
 80064b2:	f000 f879 	bl	80065a8 <_printf_i>
 80064b6:	e7ed      	b.n	8006494 <_svfiprintf_r+0x1c0>
 80064b8:	08009444 	.word	0x08009444
 80064bc:	0800944e 	.word	0x0800944e
 80064c0:	00000000 	.word	0x00000000
 80064c4:	0800621d 	.word	0x0800621d
 80064c8:	0800944a 	.word	0x0800944a

080064cc <_printf_common>:
 80064cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d0:	4616      	mov	r6, r2
 80064d2:	4698      	mov	r8, r3
 80064d4:	688a      	ldr	r2, [r1, #8]
 80064d6:	690b      	ldr	r3, [r1, #16]
 80064d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064dc:	4293      	cmp	r3, r2
 80064de:	bfb8      	it	lt
 80064e0:	4613      	movlt	r3, r2
 80064e2:	6033      	str	r3, [r6, #0]
 80064e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064e8:	4607      	mov	r7, r0
 80064ea:	460c      	mov	r4, r1
 80064ec:	b10a      	cbz	r2, 80064f2 <_printf_common+0x26>
 80064ee:	3301      	adds	r3, #1
 80064f0:	6033      	str	r3, [r6, #0]
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	0699      	lsls	r1, r3, #26
 80064f6:	bf42      	ittt	mi
 80064f8:	6833      	ldrmi	r3, [r6, #0]
 80064fa:	3302      	addmi	r3, #2
 80064fc:	6033      	strmi	r3, [r6, #0]
 80064fe:	6825      	ldr	r5, [r4, #0]
 8006500:	f015 0506 	ands.w	r5, r5, #6
 8006504:	d106      	bne.n	8006514 <_printf_common+0x48>
 8006506:	f104 0a19 	add.w	sl, r4, #25
 800650a:	68e3      	ldr	r3, [r4, #12]
 800650c:	6832      	ldr	r2, [r6, #0]
 800650e:	1a9b      	subs	r3, r3, r2
 8006510:	42ab      	cmp	r3, r5
 8006512:	dc26      	bgt.n	8006562 <_printf_common+0x96>
 8006514:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006518:	6822      	ldr	r2, [r4, #0]
 800651a:	3b00      	subs	r3, #0
 800651c:	bf18      	it	ne
 800651e:	2301      	movne	r3, #1
 8006520:	0692      	lsls	r2, r2, #26
 8006522:	d42b      	bmi.n	800657c <_printf_common+0xb0>
 8006524:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006528:	4641      	mov	r1, r8
 800652a:	4638      	mov	r0, r7
 800652c:	47c8      	blx	r9
 800652e:	3001      	adds	r0, #1
 8006530:	d01e      	beq.n	8006570 <_printf_common+0xa4>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	6922      	ldr	r2, [r4, #16]
 8006536:	f003 0306 	and.w	r3, r3, #6
 800653a:	2b04      	cmp	r3, #4
 800653c:	bf02      	ittt	eq
 800653e:	68e5      	ldreq	r5, [r4, #12]
 8006540:	6833      	ldreq	r3, [r6, #0]
 8006542:	1aed      	subeq	r5, r5, r3
 8006544:	68a3      	ldr	r3, [r4, #8]
 8006546:	bf0c      	ite	eq
 8006548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800654c:	2500      	movne	r5, #0
 800654e:	4293      	cmp	r3, r2
 8006550:	bfc4      	itt	gt
 8006552:	1a9b      	subgt	r3, r3, r2
 8006554:	18ed      	addgt	r5, r5, r3
 8006556:	2600      	movs	r6, #0
 8006558:	341a      	adds	r4, #26
 800655a:	42b5      	cmp	r5, r6
 800655c:	d11a      	bne.n	8006594 <_printf_common+0xc8>
 800655e:	2000      	movs	r0, #0
 8006560:	e008      	b.n	8006574 <_printf_common+0xa8>
 8006562:	2301      	movs	r3, #1
 8006564:	4652      	mov	r2, sl
 8006566:	4641      	mov	r1, r8
 8006568:	4638      	mov	r0, r7
 800656a:	47c8      	blx	r9
 800656c:	3001      	adds	r0, #1
 800656e:	d103      	bne.n	8006578 <_printf_common+0xac>
 8006570:	f04f 30ff 	mov.w	r0, #4294967295
 8006574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006578:	3501      	adds	r5, #1
 800657a:	e7c6      	b.n	800650a <_printf_common+0x3e>
 800657c:	18e1      	adds	r1, r4, r3
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	2030      	movs	r0, #48	@ 0x30
 8006582:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006586:	4422      	add	r2, r4
 8006588:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800658c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006590:	3302      	adds	r3, #2
 8006592:	e7c7      	b.n	8006524 <_printf_common+0x58>
 8006594:	2301      	movs	r3, #1
 8006596:	4622      	mov	r2, r4
 8006598:	4641      	mov	r1, r8
 800659a:	4638      	mov	r0, r7
 800659c:	47c8      	blx	r9
 800659e:	3001      	adds	r0, #1
 80065a0:	d0e6      	beq.n	8006570 <_printf_common+0xa4>
 80065a2:	3601      	adds	r6, #1
 80065a4:	e7d9      	b.n	800655a <_printf_common+0x8e>
	...

080065a8 <_printf_i>:
 80065a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065ac:	7e0f      	ldrb	r7, [r1, #24]
 80065ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065b0:	2f78      	cmp	r7, #120	@ 0x78
 80065b2:	4691      	mov	r9, r2
 80065b4:	4680      	mov	r8, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	469a      	mov	sl, r3
 80065ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065be:	d807      	bhi.n	80065d0 <_printf_i+0x28>
 80065c0:	2f62      	cmp	r7, #98	@ 0x62
 80065c2:	d80a      	bhi.n	80065da <_printf_i+0x32>
 80065c4:	2f00      	cmp	r7, #0
 80065c6:	f000 80d1 	beq.w	800676c <_printf_i+0x1c4>
 80065ca:	2f58      	cmp	r7, #88	@ 0x58
 80065cc:	f000 80b8 	beq.w	8006740 <_printf_i+0x198>
 80065d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065d8:	e03a      	b.n	8006650 <_printf_i+0xa8>
 80065da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065de:	2b15      	cmp	r3, #21
 80065e0:	d8f6      	bhi.n	80065d0 <_printf_i+0x28>
 80065e2:	a101      	add	r1, pc, #4	@ (adr r1, 80065e8 <_printf_i+0x40>)
 80065e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065e8:	08006641 	.word	0x08006641
 80065ec:	08006655 	.word	0x08006655
 80065f0:	080065d1 	.word	0x080065d1
 80065f4:	080065d1 	.word	0x080065d1
 80065f8:	080065d1 	.word	0x080065d1
 80065fc:	080065d1 	.word	0x080065d1
 8006600:	08006655 	.word	0x08006655
 8006604:	080065d1 	.word	0x080065d1
 8006608:	080065d1 	.word	0x080065d1
 800660c:	080065d1 	.word	0x080065d1
 8006610:	080065d1 	.word	0x080065d1
 8006614:	08006753 	.word	0x08006753
 8006618:	0800667f 	.word	0x0800667f
 800661c:	0800670d 	.word	0x0800670d
 8006620:	080065d1 	.word	0x080065d1
 8006624:	080065d1 	.word	0x080065d1
 8006628:	08006775 	.word	0x08006775
 800662c:	080065d1 	.word	0x080065d1
 8006630:	0800667f 	.word	0x0800667f
 8006634:	080065d1 	.word	0x080065d1
 8006638:	080065d1 	.word	0x080065d1
 800663c:	08006715 	.word	0x08006715
 8006640:	6833      	ldr	r3, [r6, #0]
 8006642:	1d1a      	adds	r2, r3, #4
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6032      	str	r2, [r6, #0]
 8006648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800664c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006650:	2301      	movs	r3, #1
 8006652:	e09c      	b.n	800678e <_printf_i+0x1e6>
 8006654:	6833      	ldr	r3, [r6, #0]
 8006656:	6820      	ldr	r0, [r4, #0]
 8006658:	1d19      	adds	r1, r3, #4
 800665a:	6031      	str	r1, [r6, #0]
 800665c:	0606      	lsls	r6, r0, #24
 800665e:	d501      	bpl.n	8006664 <_printf_i+0xbc>
 8006660:	681d      	ldr	r5, [r3, #0]
 8006662:	e003      	b.n	800666c <_printf_i+0xc4>
 8006664:	0645      	lsls	r5, r0, #25
 8006666:	d5fb      	bpl.n	8006660 <_printf_i+0xb8>
 8006668:	f9b3 5000 	ldrsh.w	r5, [r3]
 800666c:	2d00      	cmp	r5, #0
 800666e:	da03      	bge.n	8006678 <_printf_i+0xd0>
 8006670:	232d      	movs	r3, #45	@ 0x2d
 8006672:	426d      	negs	r5, r5
 8006674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006678:	4858      	ldr	r0, [pc, #352]	@ (80067dc <_printf_i+0x234>)
 800667a:	230a      	movs	r3, #10
 800667c:	e011      	b.n	80066a2 <_printf_i+0xfa>
 800667e:	6821      	ldr	r1, [r4, #0]
 8006680:	6833      	ldr	r3, [r6, #0]
 8006682:	0608      	lsls	r0, r1, #24
 8006684:	f853 5b04 	ldr.w	r5, [r3], #4
 8006688:	d402      	bmi.n	8006690 <_printf_i+0xe8>
 800668a:	0649      	lsls	r1, r1, #25
 800668c:	bf48      	it	mi
 800668e:	b2ad      	uxthmi	r5, r5
 8006690:	2f6f      	cmp	r7, #111	@ 0x6f
 8006692:	4852      	ldr	r0, [pc, #328]	@ (80067dc <_printf_i+0x234>)
 8006694:	6033      	str	r3, [r6, #0]
 8006696:	bf14      	ite	ne
 8006698:	230a      	movne	r3, #10
 800669a:	2308      	moveq	r3, #8
 800669c:	2100      	movs	r1, #0
 800669e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066a2:	6866      	ldr	r6, [r4, #4]
 80066a4:	60a6      	str	r6, [r4, #8]
 80066a6:	2e00      	cmp	r6, #0
 80066a8:	db05      	blt.n	80066b6 <_printf_i+0x10e>
 80066aa:	6821      	ldr	r1, [r4, #0]
 80066ac:	432e      	orrs	r6, r5
 80066ae:	f021 0104 	bic.w	r1, r1, #4
 80066b2:	6021      	str	r1, [r4, #0]
 80066b4:	d04b      	beq.n	800674e <_printf_i+0x1a6>
 80066b6:	4616      	mov	r6, r2
 80066b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80066bc:	fb03 5711 	mls	r7, r3, r1, r5
 80066c0:	5dc7      	ldrb	r7, [r0, r7]
 80066c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066c6:	462f      	mov	r7, r5
 80066c8:	42bb      	cmp	r3, r7
 80066ca:	460d      	mov	r5, r1
 80066cc:	d9f4      	bls.n	80066b8 <_printf_i+0x110>
 80066ce:	2b08      	cmp	r3, #8
 80066d0:	d10b      	bne.n	80066ea <_printf_i+0x142>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	07df      	lsls	r7, r3, #31
 80066d6:	d508      	bpl.n	80066ea <_printf_i+0x142>
 80066d8:	6923      	ldr	r3, [r4, #16]
 80066da:	6861      	ldr	r1, [r4, #4]
 80066dc:	4299      	cmp	r1, r3
 80066de:	bfde      	ittt	le
 80066e0:	2330      	movle	r3, #48	@ 0x30
 80066e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066ea:	1b92      	subs	r2, r2, r6
 80066ec:	6122      	str	r2, [r4, #16]
 80066ee:	f8cd a000 	str.w	sl, [sp]
 80066f2:	464b      	mov	r3, r9
 80066f4:	aa03      	add	r2, sp, #12
 80066f6:	4621      	mov	r1, r4
 80066f8:	4640      	mov	r0, r8
 80066fa:	f7ff fee7 	bl	80064cc <_printf_common>
 80066fe:	3001      	adds	r0, #1
 8006700:	d14a      	bne.n	8006798 <_printf_i+0x1f0>
 8006702:	f04f 30ff 	mov.w	r0, #4294967295
 8006706:	b004      	add	sp, #16
 8006708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	f043 0320 	orr.w	r3, r3, #32
 8006712:	6023      	str	r3, [r4, #0]
 8006714:	4832      	ldr	r0, [pc, #200]	@ (80067e0 <_printf_i+0x238>)
 8006716:	2778      	movs	r7, #120	@ 0x78
 8006718:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	6831      	ldr	r1, [r6, #0]
 8006720:	061f      	lsls	r7, r3, #24
 8006722:	f851 5b04 	ldr.w	r5, [r1], #4
 8006726:	d402      	bmi.n	800672e <_printf_i+0x186>
 8006728:	065f      	lsls	r7, r3, #25
 800672a:	bf48      	it	mi
 800672c:	b2ad      	uxthmi	r5, r5
 800672e:	6031      	str	r1, [r6, #0]
 8006730:	07d9      	lsls	r1, r3, #31
 8006732:	bf44      	itt	mi
 8006734:	f043 0320 	orrmi.w	r3, r3, #32
 8006738:	6023      	strmi	r3, [r4, #0]
 800673a:	b11d      	cbz	r5, 8006744 <_printf_i+0x19c>
 800673c:	2310      	movs	r3, #16
 800673e:	e7ad      	b.n	800669c <_printf_i+0xf4>
 8006740:	4826      	ldr	r0, [pc, #152]	@ (80067dc <_printf_i+0x234>)
 8006742:	e7e9      	b.n	8006718 <_printf_i+0x170>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	f023 0320 	bic.w	r3, r3, #32
 800674a:	6023      	str	r3, [r4, #0]
 800674c:	e7f6      	b.n	800673c <_printf_i+0x194>
 800674e:	4616      	mov	r6, r2
 8006750:	e7bd      	b.n	80066ce <_printf_i+0x126>
 8006752:	6833      	ldr	r3, [r6, #0]
 8006754:	6825      	ldr	r5, [r4, #0]
 8006756:	6961      	ldr	r1, [r4, #20]
 8006758:	1d18      	adds	r0, r3, #4
 800675a:	6030      	str	r0, [r6, #0]
 800675c:	062e      	lsls	r6, r5, #24
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	d501      	bpl.n	8006766 <_printf_i+0x1be>
 8006762:	6019      	str	r1, [r3, #0]
 8006764:	e002      	b.n	800676c <_printf_i+0x1c4>
 8006766:	0668      	lsls	r0, r5, #25
 8006768:	d5fb      	bpl.n	8006762 <_printf_i+0x1ba>
 800676a:	8019      	strh	r1, [r3, #0]
 800676c:	2300      	movs	r3, #0
 800676e:	6123      	str	r3, [r4, #16]
 8006770:	4616      	mov	r6, r2
 8006772:	e7bc      	b.n	80066ee <_printf_i+0x146>
 8006774:	6833      	ldr	r3, [r6, #0]
 8006776:	1d1a      	adds	r2, r3, #4
 8006778:	6032      	str	r2, [r6, #0]
 800677a:	681e      	ldr	r6, [r3, #0]
 800677c:	6862      	ldr	r2, [r4, #4]
 800677e:	2100      	movs	r1, #0
 8006780:	4630      	mov	r0, r6
 8006782:	f7f9 fd25 	bl	80001d0 <memchr>
 8006786:	b108      	cbz	r0, 800678c <_printf_i+0x1e4>
 8006788:	1b80      	subs	r0, r0, r6
 800678a:	6060      	str	r0, [r4, #4]
 800678c:	6863      	ldr	r3, [r4, #4]
 800678e:	6123      	str	r3, [r4, #16]
 8006790:	2300      	movs	r3, #0
 8006792:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006796:	e7aa      	b.n	80066ee <_printf_i+0x146>
 8006798:	6923      	ldr	r3, [r4, #16]
 800679a:	4632      	mov	r2, r6
 800679c:	4649      	mov	r1, r9
 800679e:	4640      	mov	r0, r8
 80067a0:	47d0      	blx	sl
 80067a2:	3001      	adds	r0, #1
 80067a4:	d0ad      	beq.n	8006702 <_printf_i+0x15a>
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	079b      	lsls	r3, r3, #30
 80067aa:	d413      	bmi.n	80067d4 <_printf_i+0x22c>
 80067ac:	68e0      	ldr	r0, [r4, #12]
 80067ae:	9b03      	ldr	r3, [sp, #12]
 80067b0:	4298      	cmp	r0, r3
 80067b2:	bfb8      	it	lt
 80067b4:	4618      	movlt	r0, r3
 80067b6:	e7a6      	b.n	8006706 <_printf_i+0x15e>
 80067b8:	2301      	movs	r3, #1
 80067ba:	4632      	mov	r2, r6
 80067bc:	4649      	mov	r1, r9
 80067be:	4640      	mov	r0, r8
 80067c0:	47d0      	blx	sl
 80067c2:	3001      	adds	r0, #1
 80067c4:	d09d      	beq.n	8006702 <_printf_i+0x15a>
 80067c6:	3501      	adds	r5, #1
 80067c8:	68e3      	ldr	r3, [r4, #12]
 80067ca:	9903      	ldr	r1, [sp, #12]
 80067cc:	1a5b      	subs	r3, r3, r1
 80067ce:	42ab      	cmp	r3, r5
 80067d0:	dcf2      	bgt.n	80067b8 <_printf_i+0x210>
 80067d2:	e7eb      	b.n	80067ac <_printf_i+0x204>
 80067d4:	2500      	movs	r5, #0
 80067d6:	f104 0619 	add.w	r6, r4, #25
 80067da:	e7f5      	b.n	80067c8 <_printf_i+0x220>
 80067dc:	08009455 	.word	0x08009455
 80067e0:	08009466 	.word	0x08009466

080067e4 <memmove>:
 80067e4:	4288      	cmp	r0, r1
 80067e6:	b510      	push	{r4, lr}
 80067e8:	eb01 0402 	add.w	r4, r1, r2
 80067ec:	d902      	bls.n	80067f4 <memmove+0x10>
 80067ee:	4284      	cmp	r4, r0
 80067f0:	4623      	mov	r3, r4
 80067f2:	d807      	bhi.n	8006804 <memmove+0x20>
 80067f4:	1e43      	subs	r3, r0, #1
 80067f6:	42a1      	cmp	r1, r4
 80067f8:	d008      	beq.n	800680c <memmove+0x28>
 80067fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006802:	e7f8      	b.n	80067f6 <memmove+0x12>
 8006804:	4402      	add	r2, r0
 8006806:	4601      	mov	r1, r0
 8006808:	428a      	cmp	r2, r1
 800680a:	d100      	bne.n	800680e <memmove+0x2a>
 800680c:	bd10      	pop	{r4, pc}
 800680e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006812:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006816:	e7f7      	b.n	8006808 <memmove+0x24>

08006818 <memcpy>:
 8006818:	440a      	add	r2, r1
 800681a:	4291      	cmp	r1, r2
 800681c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006820:	d100      	bne.n	8006824 <memcpy+0xc>
 8006822:	4770      	bx	lr
 8006824:	b510      	push	{r4, lr}
 8006826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800682a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800682e:	4291      	cmp	r1, r2
 8006830:	d1f9      	bne.n	8006826 <memcpy+0xe>
 8006832:	bd10      	pop	{r4, pc}

08006834 <_realloc_r>:
 8006834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006838:	4607      	mov	r7, r0
 800683a:	4614      	mov	r4, r2
 800683c:	460d      	mov	r5, r1
 800683e:	b921      	cbnz	r1, 800684a <_realloc_r+0x16>
 8006840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006844:	4611      	mov	r1, r2
 8006846:	f7ff bbad 	b.w	8005fa4 <_malloc_r>
 800684a:	b92a      	cbnz	r2, 8006858 <_realloc_r+0x24>
 800684c:	f7ff fc9c 	bl	8006188 <_free_r>
 8006850:	4625      	mov	r5, r4
 8006852:	4628      	mov	r0, r5
 8006854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006858:	f000 f81a 	bl	8006890 <_malloc_usable_size_r>
 800685c:	4284      	cmp	r4, r0
 800685e:	4606      	mov	r6, r0
 8006860:	d802      	bhi.n	8006868 <_realloc_r+0x34>
 8006862:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006866:	d8f4      	bhi.n	8006852 <_realloc_r+0x1e>
 8006868:	4621      	mov	r1, r4
 800686a:	4638      	mov	r0, r7
 800686c:	f7ff fb9a 	bl	8005fa4 <_malloc_r>
 8006870:	4680      	mov	r8, r0
 8006872:	b908      	cbnz	r0, 8006878 <_realloc_r+0x44>
 8006874:	4645      	mov	r5, r8
 8006876:	e7ec      	b.n	8006852 <_realloc_r+0x1e>
 8006878:	42b4      	cmp	r4, r6
 800687a:	4622      	mov	r2, r4
 800687c:	4629      	mov	r1, r5
 800687e:	bf28      	it	cs
 8006880:	4632      	movcs	r2, r6
 8006882:	f7ff ffc9 	bl	8006818 <memcpy>
 8006886:	4629      	mov	r1, r5
 8006888:	4638      	mov	r0, r7
 800688a:	f7ff fc7d 	bl	8006188 <_free_r>
 800688e:	e7f1      	b.n	8006874 <_realloc_r+0x40>

08006890 <_malloc_usable_size_r>:
 8006890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006894:	1f18      	subs	r0, r3, #4
 8006896:	2b00      	cmp	r3, #0
 8006898:	bfbc      	itt	lt
 800689a:	580b      	ldrlt	r3, [r1, r0]
 800689c:	18c0      	addlt	r0, r0, r3
 800689e:	4770      	bx	lr

080068a0 <_init>:
 80068a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a2:	bf00      	nop
 80068a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a6:	bc08      	pop	{r3}
 80068a8:	469e      	mov	lr, r3
 80068aa:	4770      	bx	lr

080068ac <_fini>:
 80068ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ae:	bf00      	nop
 80068b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068b2:	bc08      	pop	{r3}
 80068b4:	469e      	mov	lr, r3
 80068b6:	4770      	bx	lr
