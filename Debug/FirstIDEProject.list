
FirstIDEProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cb8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bec  08005e48  08005e48  00006e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a34  08008a34  0000a05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008a34  08008a34  00009a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a3c  08008a3c  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a3c  08008a3c  00009a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a40  08008a40  00009a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008a44  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a05c  2**0
                  CONTENTS
 10 .bss          000007b8  2000005c  2000005c  0000a05c  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20000814  20000814  0000a05c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011c70  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000270b  00000000  00000000  0001bcfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f88  00000000  00000000  0001e408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c13  00000000  00000000  0001f390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223b6  00000000  00000000  0001ffa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013cba  00000000  00000000  00042359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cac6d  00000000  00000000  00056013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120c80  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004728  00000000  00000000  00120cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001253ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e30 	.word	0x08005e30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005e30 	.word	0x08005e30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <EPD_352_SendCommand>:
 * @brief Send Command to the EPD 3.52" display through SPI.
 * 
 * @param Reg data to be sent as command.
 */
void EPD_352_SendCommand(uint8_t Reg)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DAT_COM_GPIO_Port, DAT_COM_Pin, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2102      	movs	r1, #2
 80005aa:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <EPD_352_SendCommand+0x44>)
 80005ac:	f001 fcac 	bl	8001f08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b6:	480a      	ldr	r0, [pc, #40]	@ (80005e0 <EPD_352_SendCommand+0x44>)
 80005b8:	f001 fca6 	bl	8001f08 <HAL_GPIO_WritePin>
  //HAL_SPI_Transmit(&hspi2, &Reg, 1, 1000);
  HAL_SPI_Transmit(&hspi1, &Reg, 1, 1000);
 80005bc:	1df9      	adds	r1, r7, #7
 80005be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005c2:	2201      	movs	r2, #1
 80005c4:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <EPD_352_SendCommand+0x48>)
 80005c6:	f003 fb3c 	bl	8003c42 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d0:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <EPD_352_SendCommand+0x44>)
 80005d2:	f001 fc99 	bl	8001f08 <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40020800 	.word	0x40020800
 80005e4:	200000e8 	.word	0x200000e8

080005e8 <EPD_352_SendData>:
 * @brief Send Data to the EPD 3.52" display through SPI.
 * 
 * @param Data data to be sent.
 */
void EPD_352_SendData(uint8_t Data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DAT_COM_GPIO_Port, DAT_COM_Pin, 1);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2102      	movs	r1, #2
 80005f6:	480d      	ldr	r0, [pc, #52]	@ (800062c <EPD_352_SendData+0x44>)
 80005f8:	f001 fc86 	bl	8001f08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000602:	480a      	ldr	r0, [pc, #40]	@ (800062c <EPD_352_SendData+0x44>)
 8000604:	f001 fc80 	bl	8001f08 <HAL_GPIO_WritePin>
  //HAL_SPI_Transmit(&hspi2, &Data, 1, 1000);
  HAL_SPI_Transmit(&hspi1, &Data, 1, 1000);
 8000608:	1df9      	adds	r1, r7, #7
 800060a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800060e:	2201      	movs	r2, #1
 8000610:	4807      	ldr	r0, [pc, #28]	@ (8000630 <EPD_352_SendData+0x48>)
 8000612:	f003 fb16 	bl	8003c42 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800061c:	4803      	ldr	r0, [pc, #12]	@ (800062c <EPD_352_SendData+0x44>)
 800061e:	f001 fc73 	bl	8001f08 <HAL_GPIO_WritePin>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40020800 	.word	0x40020800
 8000630:	200000e8 	.word	0x200000e8

08000634 <EPD_352_refresh>:
/**
 * @brief 
 * 
 */
void EPD_352_refresh(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
    uint8_t busy = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	71fb      	strb	r3, [r7, #7]
    EPD_352_SendCommand(0x17);
 800063e:	2017      	movs	r0, #23
 8000640:	f7ff ffac 	bl	800059c <EPD_352_SendCommand>
    EPD_352_SendData(0xA5);
 8000644:	20a5      	movs	r0, #165	@ 0xa5
 8000646:	f7ff ffcf 	bl	80005e8 <EPD_352_SendData>
    while(!busy)
 800064a:	e005      	b.n	8000658 <EPD_352_refresh+0x24>
    busy = HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin);
 800064c:	2140      	movs	r1, #64	@ 0x40
 800064e:	4807      	ldr	r0, [pc, #28]	@ (800066c <EPD_352_refresh+0x38>)
 8000650:	f001 fc42 	bl	8001ed8 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	71fb      	strb	r3, [r7, #7]
    while(!busy)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f6      	beq.n	800064c <EPD_352_refresh+0x18>
    HAL_Delay(200);
 800065e:	20c8      	movs	r0, #200	@ 0xc8
 8000660:	f001 f968 	bl	8001934 <HAL_Delay>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40020800 	.word	0x40020800

08000670 <EPD_352_lut_GC>:
/**
 * @brief
 *
 */
void EPD_352_lut_GC(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
    uint8_t count;
    EPD_352_SendCommand(0x20); // Set vcom
 8000676:	2020      	movs	r0, #32
 8000678:	f7ff ff90 	bl	800059c <EPD_352_SendCommand>
    for (count = 0; count< 56; count++)
 800067c:	2300      	movs	r3, #0
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	e008      	b.n	8000694 <EPD_352_lut_GC+0x24>
    {
        EPD_352_SendData(EPD_3IN52_lut_R20_GC[count]);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	4a41      	ldr	r2, [pc, #260]	@ (800078c <EPD_352_lut_GC+0x11c>)
 8000686:	5cd3      	ldrb	r3, [r2, r3]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ffad 	bl	80005e8 <EPD_352_SendData>
    for (count = 0; count< 56; count++)
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	3301      	adds	r3, #1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	2b37      	cmp	r3, #55	@ 0x37
 8000698:	d9f3      	bls.n	8000682 <EPD_352_lut_GC+0x12>
    }
    EPD_352_SendCommand(0x21); // red not use
 800069a:	2021      	movs	r0, #33	@ 0x21
 800069c:	f7ff ff7e 	bl	800059c <EPD_352_SendCommand>
    for (count = 0; count< 42; count++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	e008      	b.n	80006b8 <EPD_352_lut_GC+0x48>
    {
        EPD_352_SendData(EPD_3IN52_lut_R21_GC[count]);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4a39      	ldr	r2, [pc, #228]	@ (8000790 <EPD_352_lut_GC+0x120>)
 80006aa:	5cd3      	ldrb	r3, [r2, r3]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff9b 	bl	80005e8 <EPD_352_SendData>
    for (count = 0; count< 42; count++)
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	3301      	adds	r3, #1
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2b29      	cmp	r3, #41	@ 0x29
 80006bc:	d9f3      	bls.n	80006a6 <EPD_352_lut_GC+0x36>
    }
    EPD_352_SendCommand(0x24); // Set bb b
 80006be:	2024      	movs	r0, #36	@ 0x24
 80006c0:	f7ff ff6c 	bl	800059c <EPD_352_SendCommand>
    for (count = 0; count< 42; count++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	71fb      	strb	r3, [r7, #7]
 80006c8:	e008      	b.n	80006dc <EPD_352_lut_GC+0x6c>
    {
        EPD_352_SendData(EPD_3IN52_lut_R24_GC[count]);
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	4a31      	ldr	r2, [pc, #196]	@ (8000794 <EPD_352_lut_GC+0x124>)
 80006ce:	5cd3      	ldrb	r3, [r2, r3]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff89 	bl	80005e8 <EPD_352_SendData>
    for (count = 0; count< 42; count++)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	3301      	adds	r3, #1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	2b29      	cmp	r3, #41	@ 0x29
 80006e0:	d9f3      	bls.n	80006ca <EPD_352_lut_GC+0x5a>
    }
    if (EPD_352_FLAG == 0)
 80006e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <EPD_352_lut_GC+0x128>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d127      	bne.n	800073a <EPD_352_lut_GC+0xca>
    {
        EPD_352_SendCommand(0x22); // Set bw r
 80006ea:	2022      	movs	r0, #34	@ 0x22
 80006ec:	f7ff ff56 	bl	800059c <EPD_352_SendCommand>
        for (count = 0; count< 56; count++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	e008      	b.n	8000708 <EPD_352_lut_GC+0x98>
        {
            EPD_352_SendData(EPD_3IN52_lut_R22_GC[count]);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4a28      	ldr	r2, [pc, #160]	@ (800079c <EPD_352_lut_GC+0x12c>)
 80006fa:	5cd3      	ldrb	r3, [r2, r3]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff73 	bl	80005e8 <EPD_352_SendData>
        for (count = 0; count< 56; count++)
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	3301      	adds	r3, #1
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	2b37      	cmp	r3, #55	@ 0x37
 800070c:	d9f3      	bls.n	80006f6 <EPD_352_lut_GC+0x86>
        }
        EPD_352_SendCommand(0x23); // Set wb w
 800070e:	2023      	movs	r0, #35	@ 0x23
 8000710:	f7ff ff44 	bl	800059c <EPD_352_SendCommand>
        for (count = 0; count< 42; count++)
 8000714:	2300      	movs	r3, #0
 8000716:	71fb      	strb	r3, [r7, #7]
 8000718:	e008      	b.n	800072c <EPD_352_lut_GC+0xbc>
        {
            EPD_352_SendData(EPD_3IN52_lut_R23_GC[count]);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4a20      	ldr	r2, [pc, #128]	@ (80007a0 <EPD_352_lut_GC+0x130>)
 800071e:	5cd3      	ldrb	r3, [r2, r3]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff61 	bl	80005e8 <EPD_352_SendData>
        for (count = 0; count< 42; count++)
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	3301      	adds	r3, #1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b29      	cmp	r3, #41	@ 0x29
 8000730:	d9f3      	bls.n	800071a <EPD_352_lut_GC+0xaa>
        }
        EPD_352_FLAG = 1; // Set flag to indicate that GC LUT has been loaded
 8000732:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <EPD_352_lut_GC+0x128>)
 8000734:	2201      	movs	r2, #1
 8000736:	701a      	strb	r2, [r3, #0]
        for (count = 0; count< 56; count++)
        {
            EPD_352_SendData(EPD_3IN52_lut_R22_GC[count]);
        }
    }
}
 8000738:	e023      	b.n	8000782 <EPD_352_lut_GC+0x112>
        EPD_352_SendCommand(0x22); // Set bw r
 800073a:	2022      	movs	r0, #34	@ 0x22
 800073c:	f7ff ff2e 	bl	800059c <EPD_352_SendCommand>
        for (count = 0; count< 42; count++)
 8000740:	2300      	movs	r3, #0
 8000742:	71fb      	strb	r3, [r7, #7]
 8000744:	e008      	b.n	8000758 <EPD_352_lut_GC+0xe8>
            EPD_352_SendData(EPD_3IN52_lut_R23_GC[count]);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	4a15      	ldr	r2, [pc, #84]	@ (80007a0 <EPD_352_lut_GC+0x130>)
 800074a:	5cd3      	ldrb	r3, [r2, r3]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff4b 	bl	80005e8 <EPD_352_SendData>
        for (count = 0; count< 42; count++)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	3301      	adds	r3, #1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	2b29      	cmp	r3, #41	@ 0x29
 800075c:	d9f3      	bls.n	8000746 <EPD_352_lut_GC+0xd6>
        EPD_352_SendCommand(0x23); // Set wb w
 800075e:	2023      	movs	r0, #35	@ 0x23
 8000760:	f7ff ff1c 	bl	800059c <EPD_352_SendCommand>
        for (count = 0; count< 56; count++)
 8000764:	2300      	movs	r3, #0
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	e008      	b.n	800077c <EPD_352_lut_GC+0x10c>
            EPD_352_SendData(EPD_3IN52_lut_R22_GC[count]);
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	4a0b      	ldr	r2, [pc, #44]	@ (800079c <EPD_352_lut_GC+0x12c>)
 800076e:	5cd3      	ldrb	r3, [r2, r3]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff39 	bl	80005e8 <EPD_352_SendData>
        for (count = 0; count< 56; count++)
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	3301      	adds	r3, #1
 800077a:	71fb      	strb	r3, [r7, #7]
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b37      	cmp	r3, #55	@ 0x37
 8000780:	d9f3      	bls.n	800076a <EPD_352_lut_GC+0xfa>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	08005eb0 	.word	0x08005eb0
 8000790:	08005ee8 	.word	0x08005ee8
 8000794:	08005f84 	.word	0x08005f84
 8000798:	20000078 	.word	0x20000078
 800079c:	08005f14 	.word	0x08005f14
 80007a0:	08005f4c 	.word	0x08005f4c

080007a4 <EPD_352_Init>:
/**
 * @brief 
 * 
 */
void EPD_352_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    EPD_352_FLAG = 0;
 80007a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000860 <EPD_352_Init+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
    EPD_352_Reset(); // Reset the display
 80007ae:	f000 f95b 	bl	8000a68 <EPD_352_Reset>

    //HAL_GPIO_WritePin(SPI1_SCK_GPIO_Port,SPI1_SCK_Pin,GPIO_PIN_RESET);
    EPD_352_SendCommand(0x00); // SPI INIT
 80007b2:	2000      	movs	r0, #0
 80007b4:	f7ff fef2 	bl	800059c <EPD_352_SendCommand>
    EPD_352_SendCommand(0x00); // Panel setting
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff feef 	bl	800059c <EPD_352_SendCommand>
    EPD_352_SendData(0xFF); // 0x0F: 1/7.5, 0x0B: 1/7, 0x0A: 1/6.5, 0x09: 1/6
 80007be:	20ff      	movs	r0, #255	@ 0xff
 80007c0:	f7ff ff12 	bl	80005e8 <EPD_352_SendData>
    EPD_352_SendData(0x01); // 0x0F: 1/7.5, 0x0B: 1/7, 0x0A: 1/6.5, 0x09: 1/6
 80007c4:	2001      	movs	r0, #1
 80007c6:	f7ff ff0f 	bl	80005e8 <EPD_352_SendData>

    EPD_352_SendCommand(0x01); // Power setting
 80007ca:	2001      	movs	r0, #1
 80007cc:	f7ff fee6 	bl	800059c <EPD_352_SendCommand>
    EPD_352_SendData(0x03); // 0x03: VDS_EN, VDG_EN, VCOM_EN
 80007d0:	2003      	movs	r0, #3
 80007d2:	f7ff ff09 	bl	80005e8 <EPD_352_SendData>
    EPD_352_SendData(0x10);            //  x x x VCOM_SLWE VGH[3:0]   VGH=20V, VGL=-20V	
 80007d6:	2010      	movs	r0, #16
 80007d8:	f7ff ff06 	bl	80005e8 <EPD_352_SendData>
    EPD_352_SendData(0x3F);            //  x x VSH[5:0]	VSH = 15V
 80007dc:	203f      	movs	r0, #63	@ 0x3f
 80007de:	f7ff ff03 	bl	80005e8 <EPD_352_SendData>
    EPD_352_SendData(0x3F);            //  x x VSL[5:0]	VSL=-15V
 80007e2:	203f      	movs	r0, #63	@ 0x3f
 80007e4:	f7ff ff00 	bl	80005e8 <EPD_352_SendData>
    EPD_352_SendData(0x03);            //  OPTEN VDHR[6:0]  VHDR=6.4V
 80007e8:	2003      	movs	r0, #3
 80007ea:	f7ff fefd 	bl	80005e8 <EPD_352_SendData>
                                       // T_VDS_OFF[1:0] 00=1 frame; 01=2 frame; 10=3 frame; 11=4 frame
    EPD_352_SendCommand(0x06);         // booster soft start   BTST 
 80007ee:	2006      	movs	r0, #6
 80007f0:	f7ff fed4 	bl	800059c <EPD_352_SendCommand>
    EPD_352_SendData(0x37);            //  BT_PHA[7:0]  	
 80007f4:	2037      	movs	r0, #55	@ 0x37
 80007f6:	f7ff fef7 	bl	80005e8 <EPD_352_SendData>
    EPD_352_SendData(0x3D);            //  BT_PHB[7:0]	
 80007fa:	203d      	movs	r0, #61	@ 0x3d
 80007fc:	f7ff fef4 	bl	80005e8 <EPD_352_SendData>
    EPD_352_SendData(0x3D);            //  x x BT_PHC[5:0]	
 8000800:	203d      	movs	r0, #61	@ 0x3d
 8000802:	f7ff fef1 	bl	80005e8 <EPD_352_SendData>

    EPD_352_SendCommand(0x60);         // TCON setting			TCON 
 8000806:	2060      	movs	r0, #96	@ 0x60
 8000808:	f7ff fec8 	bl	800059c <EPD_352_SendCommand>
    EPD_352_SendData(0x22);            // S2G[3:0] G2S[3:0]   non-overlap = 12		
 800080c:	2022      	movs	r0, #34	@ 0x22
 800080e:	f7ff feeb 	bl	80005e8 <EPD_352_SendData>

    EPD_352_SendCommand(0x82);         // VCOM_DC setting		VDCS 
 8000812:	2082      	movs	r0, #130	@ 0x82
 8000814:	f7ff fec2 	bl	800059c <EPD_352_SendCommand>
    EPD_352_SendData(0x07);            // x  VDCS[6:0]	VCOM_DC value= -1.9v    00~3f,0x12=-1.9v
 8000818:	2007      	movs	r0, #7
 800081a:	f7ff fee5 	bl	80005e8 <EPD_352_SendData>

    EPD_352_SendCommand(0x30);			 
 800081e:	2030      	movs	r0, #48	@ 0x30
 8000820:	f7ff febc 	bl	800059c <EPD_352_SendCommand>
    EPD_352_SendData(0x09);		
 8000824:	2009      	movs	r0, #9
 8000826:	f7ff fedf 	bl	80005e8 <EPD_352_SendData>

    EPD_352_SendCommand(0xe3);         // power saving			PWS 
 800082a:	20e3      	movs	r0, #227	@ 0xe3
 800082c:	f7ff feb6 	bl	800059c <EPD_352_SendCommand>
    EPD_352_SendData(0x88);            // VCOM_W[3:0] SD_W[3:0]
 8000830:	2088      	movs	r0, #136	@ 0x88
 8000832:	f7ff fed9 	bl	80005e8 <EPD_352_SendData>

    EPD_352_SendCommand(0x61);         // resoultion setting 
 8000836:	2061      	movs	r0, #97	@ 0x61
 8000838:	f7ff feb0 	bl	800059c <EPD_352_SendCommand>
    EPD_352_SendData(0xf0);            //  HRES[7:3] 0 0 0	
 800083c:	20f0      	movs	r0, #240	@ 0xf0
 800083e:	f7ff fed3 	bl	80005e8 <EPD_352_SendData>
    EPD_352_SendData(0x01);            //  x x x x x x x VRES[8]	
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff fed0 	bl	80005e8 <EPD_352_SendData>
    EPD_352_SendData(0x68);            //  VRES[7:0]
 8000848:	2068      	movs	r0, #104	@ 0x68
 800084a:	f7ff fecd 	bl	80005e8 <EPD_352_SendData>

    EPD_352_SendCommand(0x50);			
 800084e:	2050      	movs	r0, #80	@ 0x50
 8000850:	f7ff fea4 	bl	800059c <EPD_352_SendCommand>
    EPD_352_SendData(0xB7);	
 8000854:	20b7      	movs	r0, #183	@ 0xb7
 8000856:	f7ff fec7 	bl	80005e8 <EPD_352_SendData>
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000078 	.word	0x20000078

08000864 <EPD_352_display>:
 * @brief 
 * 
 * @param picData 
 */
void EPD_352_display(uint8_t* picData)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
    uint16_t i;
    EPD_352_SendCommand(0x13);		     //Transfer new data
 800086c:	2013      	movs	r0, #19
 800086e:	f7ff fe95 	bl	800059c <EPD_352_SendCommand>
    for(i=0;i<(EPD_3IN52_WIDTH*EPD_3IN52_HEIGHT/8);i++)	     
 8000872:	2300      	movs	r3, #0
 8000874:	81fb      	strh	r3, [r7, #14]
 8000876:	e00a      	b.n	800088e <EPD_352_display+0x2a>
    {
        EPD_352_SendData(*picData);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff feb3 	bl	80005e8 <EPD_352_SendData>
        picData++;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3301      	adds	r3, #1
 8000886:	607b      	str	r3, [r7, #4]
    for(i=0;i<(EPD_3IN52_WIDTH*EPD_3IN52_HEIGHT/8);i++)	     
 8000888:	89fb      	ldrh	r3, [r7, #14]
 800088a:	3301      	adds	r3, #1
 800088c:	81fb      	strh	r3, [r7, #14]
 800088e:	89fb      	ldrh	r3, [r7, #14]
 8000890:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8000894:	4293      	cmp	r3, r2
 8000896:	d9ef      	bls.n	8000878 <EPD_352_display+0x14>
    }
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <EPD_352_display_NUM>:
 * @brief
 *
 * @param NUM
 */
void EPD_352_display_NUM(uint8_t NUM)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
    uint16_t row, column;
    EPD_352_SendCommand(0x13);
 80008ae:	2013      	movs	r0, #19
 80008b0:	f7ff fe74 	bl	800059c <EPD_352_SendCommand>
    for(column = 0; column < 200; column++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	81bb      	strh	r3, [r7, #12]
 80008b8:	e0cd      	b.n	8000a56 <EPD_352_display_NUM+0x1b2>
    {
        for(row = 0; row < 200; row++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	81fb      	strh	r3, [r7, #14]
 80008be:	e0c3      	b.n	8000a48 <EPD_352_display_NUM+0x1a4>
        {
            switch (NUM)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2bff      	cmp	r3, #255	@ 0xff
 80008c4:	d03b      	beq.n	800093e <EPD_352_display_NUM+0x9a>
 80008c6:	2bff      	cmp	r3, #255	@ 0xff
 80008c8:	f300 80ba 	bgt.w	8000a40 <EPD_352_display_NUM+0x19c>
 80008cc:	2bf0      	cmp	r3, #240	@ 0xf0
 80008ce:	d074      	beq.n	80009ba <EPD_352_display_NUM+0x116>
 80008d0:	2bf0      	cmp	r3, #240	@ 0xf0
 80008d2:	f300 80b5 	bgt.w	8000a40 <EPD_352_display_NUM+0x19c>
 80008d6:	2baa      	cmp	r3, #170	@ 0xaa
 80008d8:	d039      	beq.n	800094e <EPD_352_display_NUM+0xaa>
 80008da:	2baa      	cmp	r3, #170	@ 0xaa
 80008dc:	f300 80b0 	bgt.w	8000a40 <EPD_352_display_NUM+0x19c>
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	dc29      	bgt.n	8000938 <EPD_352_display_NUM+0x94>
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	f2c0 80ab 	blt.w	8000a40 <EPD_352_display_NUM+0x19c>
 80008ea:	2b0f      	cmp	r3, #15
 80008ec:	f200 80a8 	bhi.w	8000a40 <EPD_352_display_NUM+0x19c>
 80008f0:	a201      	add	r2, pc, #4	@ (adr r2, 80008f8 <EPD_352_display_NUM+0x54>)
 80008f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f6:	bf00      	nop
 80008f8:	08000947 	.word	0x08000947
 80008fc:	080009d1 	.word	0x080009d1
 8000900:	08000a0d 	.word	0x08000a0d
 8000904:	08000973 	.word	0x08000973
 8000908:	08000a41 	.word	0x08000a41
 800090c:	08000a41 	.word	0x08000a41
 8000910:	08000a41 	.word	0x08000a41
 8000914:	08000a41 	.word	0x08000a41
 8000918:	08000a41 	.word	0x08000a41
 800091c:	08000a41 	.word	0x08000a41
 8000920:	08000a41 	.word	0x08000a41
 8000924:	08000a41 	.word	0x08000a41
 8000928:	08000a41 	.word	0x08000a41
 800092c:	08000a41 	.word	0x08000a41
 8000930:	08000a41 	.word	0x08000a41
 8000934:	080009a5 	.word	0x080009a5
 8000938:	2b55      	cmp	r3, #85	@ 0x55
 800093a:	d00c      	beq.n	8000956 <EPD_352_display_NUM+0xb2>
                case EPD_3IN52_Image:
                        //EPD_3IN52_SendData(gImage_1[pcnt++]);
                    break;  
                                        
                default:
                    break;
 800093c:	e080      	b.n	8000a40 <EPD_352_display_NUM+0x19c>
                    EPD_352_SendData(0xFF);
 800093e:	20ff      	movs	r0, #255	@ 0xff
 8000940:	f7ff fe52 	bl	80005e8 <EPD_352_SendData>
                    break;  
 8000944:	e07d      	b.n	8000a42 <EPD_352_display_NUM+0x19e>
                    EPD_352_SendData(0x00);
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff fe4e 	bl	80005e8 <EPD_352_SendData>
                    break;  
 800094c:	e079      	b.n	8000a42 <EPD_352_display_NUM+0x19e>
                    EPD_352_SendData(0xAA);  
 800094e:	20aa      	movs	r0, #170	@ 0xaa
 8000950:	f7ff fe4a 	bl	80005e8 <EPD_352_SendData>
                    break;
 8000954:	e075      	b.n	8000a42 <EPD_352_display_NUM+0x19e>
                    if(column%2)
 8000956:	89bb      	ldrh	r3, [r7, #12]
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	b29b      	uxth	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <EPD_352_display_NUM+0xc6>
                        EPD_352_SendData(0xff); //An odd number of Gate line  
 8000962:	20ff      	movs	r0, #255	@ 0xff
 8000964:	f7ff fe40 	bl	80005e8 <EPD_352_SendData>
                    break;			
 8000968:	e06b      	b.n	8000a42 <EPD_352_display_NUM+0x19e>
                        EPD_352_SendData(0x00); //The even line Gate  
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff fe3c 	bl	80005e8 <EPD_352_SendData>
                    break;			
 8000970:	e067      	b.n	8000a42 <EPD_352_display_NUM+0x19e>
                    if(row>=(EPD_3IN52_WIDTH/8/2)&&column>=(EPD_3IN52_HEIGHT/2))
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	2b0e      	cmp	r3, #14
 8000976:	d906      	bls.n	8000986 <EPD_352_display_NUM+0xe2>
 8000978:	89bb      	ldrh	r3, [r7, #12]
 800097a:	2bb3      	cmp	r3, #179	@ 0xb3
 800097c:	d903      	bls.n	8000986 <EPD_352_display_NUM+0xe2>
                        EPD_352_SendData(0xff);
 800097e:	20ff      	movs	r0, #255	@ 0xff
 8000980:	f7ff fe32 	bl	80005e8 <EPD_352_SendData>
 8000984:	e00d      	b.n	80009a2 <EPD_352_display_NUM+0xfe>
                    else if(row<(EPD_3IN52_WIDTH/8/2)&&column<(EPD_3IN52_HEIGHT/2))
 8000986:	89fb      	ldrh	r3, [r7, #14]
 8000988:	2b0e      	cmp	r3, #14
 800098a:	d806      	bhi.n	800099a <EPD_352_display_NUM+0xf6>
 800098c:	89bb      	ldrh	r3, [r7, #12]
 800098e:	2bb3      	cmp	r3, #179	@ 0xb3
 8000990:	d803      	bhi.n	800099a <EPD_352_display_NUM+0xf6>
                        EPD_352_SendData(0xff);										
 8000992:	20ff      	movs	r0, #255	@ 0xff
 8000994:	f7ff fe28 	bl	80005e8 <EPD_352_SendData>
 8000998:	e003      	b.n	80009a2 <EPD_352_display_NUM+0xfe>
                        EPD_352_SendData(0x00);
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff fe24 	bl	80005e8 <EPD_352_SendData>
                    break; 			
 80009a0:	e04f      	b.n	8000a42 <EPD_352_display_NUM+0x19e>
 80009a2:	e04e      	b.n	8000a42 <EPD_352_display_NUM+0x19e>
                    if(row>=(EPD_3IN52_WIDTH/8/2))
 80009a4:	89fb      	ldrh	r3, [r7, #14]
 80009a6:	2b0e      	cmp	r3, #14
 80009a8:	d903      	bls.n	80009b2 <EPD_352_display_NUM+0x10e>
                        EPD_352_SendData(0xff);
 80009aa:	20ff      	movs	r0, #255	@ 0xff
 80009ac:	f7ff fe1c 	bl	80005e8 <EPD_352_SendData>
                    break;
 80009b0:	e047      	b.n	8000a42 <EPD_352_display_NUM+0x19e>
                        EPD_352_SendData(0x00);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff fe18 	bl	80005e8 <EPD_352_SendData>
                    break;
 80009b8:	e043      	b.n	8000a42 <EPD_352_display_NUM+0x19e>
                    if(column>=(EPD_3IN52_HEIGHT/2))
 80009ba:	89bb      	ldrh	r3, [r7, #12]
 80009bc:	2bb3      	cmp	r3, #179	@ 0xb3
 80009be:	d903      	bls.n	80009c8 <EPD_352_display_NUM+0x124>
                        EPD_352_SendData(0xFF);
 80009c0:	20ff      	movs	r0, #255	@ 0xff
 80009c2:	f7ff fe11 	bl	80005e8 <EPD_352_SendData>
                    break;
 80009c6:	e03c      	b.n	8000a42 <EPD_352_display_NUM+0x19e>
                        EPD_352_SendData(0x00);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff fe0d 	bl	80005e8 <EPD_352_SendData>
                    break;
 80009ce:	e038      	b.n	8000a42 <EPD_352_display_NUM+0x19e>
                    if(column==0||column==(EPD_3IN52_HEIGHT-1))
 80009d0:	89bb      	ldrh	r3, [r7, #12]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d004      	beq.n	80009e0 <EPD_352_display_NUM+0x13c>
 80009d6:	89bb      	ldrh	r3, [r7, #12]
 80009d8:	f240 1267 	movw	r2, #359	@ 0x167
 80009dc:	4293      	cmp	r3, r2
 80009de:	d103      	bne.n	80009e8 <EPD_352_display_NUM+0x144>
                        EPD_352_SendData(0x00);						
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff fe01 	bl	80005e8 <EPD_352_SendData>
                    break; 					
 80009e6:	e02c      	b.n	8000a42 <EPD_352_display_NUM+0x19e>
                    else if(row==0)
 80009e8:	89fb      	ldrh	r3, [r7, #14]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d103      	bne.n	80009f6 <EPD_352_display_NUM+0x152>
                        EPD_352_SendData(0x7F);
 80009ee:	207f      	movs	r0, #127	@ 0x7f
 80009f0:	f7ff fdfa 	bl	80005e8 <EPD_352_SendData>
                    break; 					
 80009f4:	e025      	b.n	8000a42 <EPD_352_display_NUM+0x19e>
                    else if(row==(EPD_3IN52_WIDTH/8-1))
 80009f6:	89fb      	ldrh	r3, [r7, #14]
 80009f8:	2b1d      	cmp	r3, #29
 80009fa:	d103      	bne.n	8000a04 <EPD_352_display_NUM+0x160>
                        EPD_352_SendData(0xFE);					
 80009fc:	20fe      	movs	r0, #254	@ 0xfe
 80009fe:	f7ff fdf3 	bl	80005e8 <EPD_352_SendData>
                    break; 					
 8000a02:	e01e      	b.n	8000a42 <EPD_352_display_NUM+0x19e>
                        EPD_352_SendData(0xFF);
 8000a04:	20ff      	movs	r0, #255	@ 0xff
 8000a06:	f7ff fdef 	bl	80005e8 <EPD_352_SendData>
                    break; 					
 8000a0a:	e01a      	b.n	8000a42 <EPD_352_display_NUM+0x19e>
                    if((row>=(EPD_3IN52_WIDTH/8/3)&&row<=(EPD_3IN52_WIDTH/8/3*2)&&column<=(EPD_3IN52_HEIGHT/3))||(row>=(EPD_3IN52_WIDTH/8/3)&&row<=(EPD_3IN52_WIDTH/8/3*2)&&column>=(EPD_3IN52_HEIGHT/3*2)))
 8000a0c:	89fb      	ldrh	r3, [r7, #14]
 8000a0e:	2b09      	cmp	r3, #9
 8000a10:	d905      	bls.n	8000a1e <EPD_352_display_NUM+0x17a>
 8000a12:	89fb      	ldrh	r3, [r7, #14]
 8000a14:	2b14      	cmp	r3, #20
 8000a16:	d802      	bhi.n	8000a1e <EPD_352_display_NUM+0x17a>
 8000a18:	89bb      	ldrh	r3, [r7, #12]
 8000a1a:	2b78      	cmp	r3, #120	@ 0x78
 8000a1c:	d908      	bls.n	8000a30 <EPD_352_display_NUM+0x18c>
 8000a1e:	89fb      	ldrh	r3, [r7, #14]
 8000a20:	2b09      	cmp	r3, #9
 8000a22:	d909      	bls.n	8000a38 <EPD_352_display_NUM+0x194>
 8000a24:	89fb      	ldrh	r3, [r7, #14]
 8000a26:	2b14      	cmp	r3, #20
 8000a28:	d806      	bhi.n	8000a38 <EPD_352_display_NUM+0x194>
 8000a2a:	89bb      	ldrh	r3, [r7, #12]
 8000a2c:	2bef      	cmp	r3, #239	@ 0xef
 8000a2e:	d903      	bls.n	8000a38 <EPD_352_display_NUM+0x194>
                        EPD_352_SendData(0x00);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f7ff fdd9 	bl	80005e8 <EPD_352_SendData>
                    break; 					
 8000a36:	e004      	b.n	8000a42 <EPD_352_display_NUM+0x19e>
                        EPD_352_SendData(0xFF);
 8000a38:	20ff      	movs	r0, #255	@ 0xff
 8000a3a:	f7ff fdd5 	bl	80005e8 <EPD_352_SendData>
                    break; 					
 8000a3e:	e000      	b.n	8000a42 <EPD_352_display_NUM+0x19e>
                    break;
 8000a40:	bf00      	nop
        for(row = 0; row < 200; row++)
 8000a42:	89fb      	ldrh	r3, [r7, #14]
 8000a44:	3301      	adds	r3, #1
 8000a46:	81fb      	strh	r3, [r7, #14]
 8000a48:	89fb      	ldrh	r3, [r7, #14]
 8000a4a:	2bc7      	cmp	r3, #199	@ 0xc7
 8000a4c:	f67f af38 	bls.w	80008c0 <EPD_352_display_NUM+0x1c>
    for(column = 0; column < 200; column++)
 8000a50:	89bb      	ldrh	r3, [r7, #12]
 8000a52:	3301      	adds	r3, #1
 8000a54:	81bb      	strh	r3, [r7, #12]
 8000a56:	89bb      	ldrh	r3, [r7, #12]
 8000a58:	2bc7      	cmp	r3, #199	@ 0xc7
 8000a5a:	f67f af2e 	bls.w	80008ba <EPD_352_display_NUM+0x16>
            }
        }
    }
}
 8000a5e:	bf00      	nop
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <EPD_352_Reset>:
/**
 * @brief Reset the EPD 3.52" display.
 * 
 */
void EPD_352_Reset(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2180      	movs	r1, #128	@ 0x80
 8000a70:	480b      	ldr	r0, [pc, #44]	@ (8000aa0 <EPD_352_Reset+0x38>)
 8000a72:	f001 fa49 	bl	8001f08 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8000a76:	20c8      	movs	r0, #200	@ 0xc8
 8000a78:	f000 ff5c 	bl	8001934 <HAL_Delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2180      	movs	r1, #128	@ 0x80
 8000a80:	4807      	ldr	r0, [pc, #28]	@ (8000aa0 <EPD_352_Reset+0x38>)
 8000a82:	f001 fa41 	bl	8001f08 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000a86:	2001      	movs	r0, #1
 8000a88:	f000 ff54 	bl	8001934 <HAL_Delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2180      	movs	r1, #128	@ 0x80
 8000a90:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <EPD_352_Reset+0x38>)
 8000a92:	f001 fa39 	bl	8001f08 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8000a96:	20c8      	movs	r0, #200	@ 0xc8
 8000a98:	f000 ff4c 	bl	8001934 <HAL_Delay>
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40020800 	.word	0x40020800

08000aa4 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(uint8_t *image, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	4608      	mov	r0, r1
 8000aae:	4611      	mov	r1, r2
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	817b      	strh	r3, [r7, #10]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	813b      	strh	r3, [r7, #8]
 8000aba:	4613      	mov	r3, r2
 8000abc:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8000abe:	4b23      	ldr	r3, [pc, #140]	@ (8000b4c <Paint_NewImage+0xa8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8000ac4:	4a21      	ldr	r2, [pc, #132]	@ (8000b4c <Paint_NewImage+0xa8>)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8000aca:	4a20      	ldr	r2, [pc, #128]	@ (8000b4c <Paint_NewImage+0xa8>)
 8000acc:	897b      	ldrh	r3, [r7, #10]
 8000ace:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000ad0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b4c <Paint_NewImage+0xa8>)
 8000ad2:	893b      	ldrh	r3, [r7, #8]
 8000ad4:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;
 8000ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8000b4c <Paint_NewImage+0xa8>)
 8000ad8:	8b3b      	ldrh	r3, [r7, #24]
 8000ada:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <Paint_NewImage+0xa8>)
 8000ade:	2202      	movs	r2, #2
 8000ae0:	82da      	strh	r2, [r3, #22]

    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000ae2:	897b      	ldrh	r3, [r7, #10]
 8000ae4:	f003 0307 	and.w	r3, r3, #7
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d103      	bne.n	8000af6 <Paint_NewImage+0x52>
 8000aee:	897b      	ldrh	r3, [r7, #10]
 8000af0:	08db      	lsrs	r3, r3, #3
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	e004      	b.n	8000b00 <Paint_NewImage+0x5c>
 8000af6:	897b      	ldrh	r3, [r7, #10]
 8000af8:	08db      	lsrs	r3, r3, #3
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	3301      	adds	r3, #1
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	4a12      	ldr	r2, [pc, #72]	@ (8000b4c <Paint_NewImage+0xa8>)
 8000b02:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;
 8000b04:	4a11      	ldr	r2, [pc, #68]	@ (8000b4c <Paint_NewImage+0xa8>)
 8000b06:	893b      	ldrh	r3, [r7, #8]
 8000b08:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

    Paint.Rotate = Rotate;
 8000b0a:	4a10      	ldr	r2, [pc, #64]	@ (8000b4c <Paint_NewImage+0xa8>)
 8000b0c:	88fb      	ldrh	r3, [r7, #6]
 8000b0e:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <Paint_NewImage+0xa8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	821a      	strh	r2, [r3, #16]

    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <Paint_NewImage+0x7e>
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	2bb4      	cmp	r3, #180	@ 0xb4
 8000b20:	d106      	bne.n	8000b30 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 8000b22:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <Paint_NewImage+0xa8>)
 8000b24:	897b      	ldrh	r3, [r7, #10]
 8000b26:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000b28:	4a08      	ldr	r2, [pc, #32]	@ (8000b4c <Paint_NewImage+0xa8>)
 8000b2a:	893b      	ldrh	r3, [r7, #8]
 8000b2c:	80d3      	strh	r3, [r2, #6]
 8000b2e:	e006      	b.n	8000b3e <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8000b30:	4a06      	ldr	r2, [pc, #24]	@ (8000b4c <Paint_NewImage+0xa8>)
 8000b32:	893b      	ldrh	r3, [r7, #8]
 8000b34:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <Paint_NewImage+0xa8>)
 8000b38:	897b      	ldrh	r3, [r7, #10]
 8000b3a:	80d3      	strh	r3, [r2, #6]
    }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	2000007c 	.word	0x2000007c

08000b50 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(uint8_t *image)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8000b58:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <Paint_SelectImage+0x1c>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	2000007c 	.word	0x2000007c

08000b70 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(uint16_t Color)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	@ 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 8000b7a:	4b50      	ldr	r3, [pc, #320]	@ (8000cbc <Paint_Clear+0x14c>)
 8000b7c:	8adb      	ldrh	r3, [r3, #22]
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d125      	bne.n	8000bce <Paint_Clear+0x5e>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000b82:	2300      	movs	r3, #0
 8000b84:	83fb      	strh	r3, [r7, #30]
 8000b86:	e01c      	b.n	8000bc2 <Paint_Clear+0x52>
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000b88:	2300      	movs	r3, #0
 8000b8a:	83bb      	strh	r3, [r7, #28]
 8000b8c:	e011      	b.n	8000bb2 <Paint_Clear+0x42>
				uint32_t Addr = X + Y*Paint.WidthByte;
 8000b8e:	8bba      	ldrh	r2, [r7, #28]
 8000b90:	8bfb      	ldrh	r3, [r7, #30]
 8000b92:	494a      	ldr	r1, [pc, #296]	@ (8000cbc <Paint_Clear+0x14c>)
 8000b94:	8a49      	ldrh	r1, [r1, #18]
 8000b96:	fb01 f303 	mul.w	r3, r1, r3
 8000b9a:	4413      	add	r3, r2
 8000b9c:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8000b9e:	4b47      	ldr	r3, [pc, #284]	@ (8000cbc <Paint_Clear+0x14c>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	88fa      	ldrh	r2, [r7, #6]
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	701a      	strb	r2, [r3, #0]
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000bac:	8bbb      	ldrh	r3, [r7, #28]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	83bb      	strh	r3, [r7, #28]
 8000bb2:	4b42      	ldr	r3, [pc, #264]	@ (8000cbc <Paint_Clear+0x14c>)
 8000bb4:	8a5b      	ldrh	r3, [r3, #18]
 8000bb6:	8bba      	ldrh	r2, [r7, #28]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d3e8      	bcc.n	8000b8e <Paint_Clear+0x1e>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000bbc:	8bfb      	ldrh	r3, [r7, #30]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	83fb      	strh	r3, [r7, #30]
 8000bc2:	4b3e      	ldr	r3, [pc, #248]	@ (8000cbc <Paint_Clear+0x14c>)
 8000bc4:	8a9b      	ldrh	r3, [r3, #20]
 8000bc6:	8bfa      	ldrh	r2, [r7, #30]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d3dd      	bcc.n	8000b88 <Paint_Clear+0x18>
				uint32_t Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}
	}
}
 8000bcc:	e070      	b.n	8000cb0 <Paint_Clear+0x140>
    }else if(Paint.Scale == 4) {
 8000bce:	4b3b      	ldr	r3, [pc, #236]	@ (8000cbc <Paint_Clear+0x14c>)
 8000bd0:	8adb      	ldrh	r3, [r3, #22]
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	d138      	bne.n	8000c48 <Paint_Clear+0xd8>
        for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	837b      	strh	r3, [r7, #26]
 8000bda:	e02f      	b.n	8000c3c <Paint_Clear+0xcc>
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {
 8000bdc:	2300      	movs	r3, #0
 8000bde:	833b      	strh	r3, [r7, #24]
 8000be0:	e024      	b.n	8000c2c <Paint_Clear+0xbc>
				uint32_t Addr = X + Y*Paint.WidthByte;
 8000be2:	8b3a      	ldrh	r2, [r7, #24]
 8000be4:	8b7b      	ldrh	r3, [r7, #26]
 8000be6:	4935      	ldr	r1, [pc, #212]	@ (8000cbc <Paint_Clear+0x14c>)
 8000be8:	8a49      	ldrh	r1, [r1, #18]
 8000bea:	fb01 f303 	mul.w	r3, r1, r3
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	019b      	lsls	r3, r3, #6
 8000bf8:	b25a      	sxtb	r2, r3
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	011b      	lsls	r3, r3, #4
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b25a      	sxtb	r2, r3
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b25a      	sxtb	r2, r3
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b259      	sxtb	r1, r3
 8000c1a:	4b28      	ldr	r3, [pc, #160]	@ (8000cbc <Paint_Clear+0x14c>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4413      	add	r3, r2
 8000c22:	b2ca      	uxtb	r2, r1
 8000c24:	701a      	strb	r2, [r3, #0]
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {
 8000c26:	8b3b      	ldrh	r3, [r7, #24]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	833b      	strh	r3, [r7, #24]
 8000c2c:	4b23      	ldr	r3, [pc, #140]	@ (8000cbc <Paint_Clear+0x14c>)
 8000c2e:	8a5b      	ldrh	r3, [r3, #18]
 8000c30:	8b3a      	ldrh	r2, [r7, #24]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d3d5      	bcc.n	8000be2 <Paint_Clear+0x72>
        for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000c36:	8b7b      	ldrh	r3, [r7, #26]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	837b      	strh	r3, [r7, #26]
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <Paint_Clear+0x14c>)
 8000c3e:	8a9b      	ldrh	r3, [r3, #20]
 8000c40:	8b7a      	ldrh	r2, [r7, #26]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d3ca      	bcc.n	8000bdc <Paint_Clear+0x6c>
}
 8000c46:	e033      	b.n	8000cb0 <Paint_Clear+0x140>
	}else if(Paint.Scale == 6 || Paint.Scale == 7) {
 8000c48:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <Paint_Clear+0x14c>)
 8000c4a:	8adb      	ldrh	r3, [r3, #22]
 8000c4c:	2b06      	cmp	r3, #6
 8000c4e:	d003      	beq.n	8000c58 <Paint_Clear+0xe8>
 8000c50:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <Paint_Clear+0x14c>)
 8000c52:	8adb      	ldrh	r3, [r3, #22]
 8000c54:	2b07      	cmp	r3, #7
 8000c56:	d12b      	bne.n	8000cb0 <Paint_Clear+0x140>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	82fb      	strh	r3, [r7, #22]
 8000c5c:	e023      	b.n	8000ca6 <Paint_Clear+0x136>
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {
 8000c5e:	2300      	movs	r3, #0
 8000c60:	82bb      	strh	r3, [r7, #20]
 8000c62:	e018      	b.n	8000c96 <Paint_Clear+0x126>
				uint32_t Addr = X + Y*Paint.WidthByte;
 8000c64:	8aba      	ldrh	r2, [r7, #20]
 8000c66:	8afb      	ldrh	r3, [r7, #22]
 8000c68:	4914      	ldr	r1, [pc, #80]	@ (8000cbc <Paint_Clear+0x14c>)
 8000c6a:	8a49      	ldrh	r1, [r1, #18]
 8000c6c:	fb01 f303 	mul.w	r3, r1, r3
 8000c70:	4413      	add	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	011b      	lsls	r3, r3, #4
 8000c7a:	b25a      	sxtb	r2, r3
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	b25b      	sxtb	r3, r3
 8000c80:	4313      	orrs	r3, r2
 8000c82:	b259      	sxtb	r1, r3
 8000c84:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <Paint_Clear+0x14c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	b2ca      	uxtb	r2, r1
 8000c8e:	701a      	strb	r2, [r3, #0]
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {
 8000c90:	8abb      	ldrh	r3, [r7, #20]
 8000c92:	3301      	adds	r3, #1
 8000c94:	82bb      	strh	r3, [r7, #20]
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <Paint_Clear+0x14c>)
 8000c98:	8a5b      	ldrh	r3, [r3, #18]
 8000c9a:	8aba      	ldrh	r2, [r7, #20]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d3e1      	bcc.n	8000c64 <Paint_Clear+0xf4>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000ca0:	8afb      	ldrh	r3, [r7, #22]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	82fb      	strh	r3, [r7, #22]
 8000ca6:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <Paint_Clear+0x14c>)
 8000ca8:	8a9b      	ldrh	r3, [r3, #20]
 8000caa:	8afa      	ldrh	r2, [r7, #22]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d3d6      	bcc.n	8000c5e <Paint_Clear+0xee>
}
 8000cb0:	bf00      	nop
 8000cb2:	3724      	adds	r7, #36	@ 0x24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	2000007c 	.word	0x2000007c

08000cc0 <Paint_DrawBitMap>:
info:
    Use a computer to convert the image into a corresponding array,
    and then embed the array directly into Imagedata.cpp as a .c file.
******************************************************************************/
void Paint_DrawBitMap(const unsigned char* image_buffer)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
    uint16_t x, y;
    uint32_t Addr = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]

    for (y = 0; y < Paint.HeightByte; y++) {
 8000ccc:	2300      	movs	r3, #0
 8000cce:	81bb      	strh	r3, [r7, #12]
 8000cd0:	e01e      	b.n	8000d10 <Paint_DrawBitMap+0x50>
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	81fb      	strh	r3, [r7, #14]
 8000cd6:	e013      	b.n	8000d00 <Paint_DrawBitMap+0x40>
            Addr = x + y * Paint.WidthByte;
 8000cd8:	89fa      	ldrh	r2, [r7, #14]
 8000cda:	89bb      	ldrh	r3, [r7, #12]
 8000cdc:	4912      	ldr	r1, [pc, #72]	@ (8000d28 <Paint_DrawBitMap+0x68>)
 8000cde:	8a49      	ldrh	r1, [r1, #18]
 8000ce0:	fb01 f303 	mul.w	r3, r1, r3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
            Paint.Image[Addr] = (unsigned char)image_buffer[Addr];
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	441a      	add	r2, r3
 8000cee:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <Paint_DrawBitMap+0x68>)
 8000cf0:	6819      	ldr	r1, [r3, #0]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	440b      	add	r3, r1
 8000cf6:	7812      	ldrb	r2, [r2, #0]
 8000cf8:	701a      	strb	r2, [r3, #0]
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 8000cfa:	89fb      	ldrh	r3, [r7, #14]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	81fb      	strh	r3, [r7, #14]
 8000d00:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <Paint_DrawBitMap+0x68>)
 8000d02:	8a5b      	ldrh	r3, [r3, #18]
 8000d04:	89fa      	ldrh	r2, [r7, #14]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d3e6      	bcc.n	8000cd8 <Paint_DrawBitMap+0x18>
    for (y = 0; y < Paint.HeightByte; y++) {
 8000d0a:	89bb      	ldrh	r3, [r7, #12]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	81bb      	strh	r3, [r7, #12]
 8000d10:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <Paint_DrawBitMap+0x68>)
 8000d12:	8a9b      	ldrh	r3, [r3, #20]
 8000d14:	89ba      	ldrh	r2, [r7, #12]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d3db      	bcc.n	8000cd2 <Paint_DrawBitMap+0x12>
        }
    }
}
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	2000007c 	.word	0x2000007c

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b092      	sub	sp, #72	@ 0x48
 8000d30:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d32:	f000 fd8d 	bl	8001850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d36:	f000 f8b3 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3a:	f000 fa0d 	bl	8001158 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d3e:	f000 f919 	bl	8000f74 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d42:	f000 f945 	bl	8000fd0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000d46:	f000 f9af 	bl	80010a8 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d4a:	f000 f9d7 	bl	80010fc <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8000d4e:	f000 f975 	bl	800103c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  uart_len = sprintf(uart_buf, "SPI_TEST: INIT\r\n");
 8000d52:	463b      	mov	r3, r7
 8000d54:	494b      	ldr	r1, [pc, #300]	@ (8000e84 <main+0x158>)
 8000d56:	4618      	mov	r0, r3
 8000d58:	f004 fc78 	bl	800564c <siprintf>
 8000d5c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_len, HAL_MAX_DELAY);
 8000d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	4639      	mov	r1, r7
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
 8000d68:	4847      	ldr	r0, [pc, #284]	@ (8000e88 <main+0x15c>)
 8000d6a:	f003 f9db 	bl	8004124 <HAL_UART_Transmit>

  //DC Low
  HAL_GPIO_WritePin(DAT_COM_GPIO_Port, DAT_COM_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2102      	movs	r1, #2
 8000d72:	4846      	ldr	r0, [pc, #280]	@ (8000e8c <main+0x160>)
 8000d74:	f001 f8c8 	bl	8001f08 <HAL_GPIO_WritePin>
  //CS Low
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d7e:	4843      	ldr	r0, [pc, #268]	@ (8000e8c <main+0x160>)
 8000d80:	f001 f8c2 	bl	8001f08 <HAL_GPIO_WritePin>
  //Power On
  HAL_GPIO_WritePin(PWR_GPIO_Port, PWR_Pin, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d8a:	4840      	ldr	r0, [pc, #256]	@ (8000e8c <main+0x160>)
 8000d8c:	f001 f8bc 	bl	8001f08 <HAL_GPIO_WritePin>
  //RST high
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	2180      	movs	r1, #128	@ 0x80
 8000d94:	483d      	ldr	r0, [pc, #244]	@ (8000e8c <main+0x160>)
 8000d96:	f001 f8b7 	bl	8001f08 <HAL_GPIO_WritePin>




  uart_len = sprintf(uart_buf, "SPI_TEST SEND COMMAND\r\n");
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	493c      	ldr	r1, [pc, #240]	@ (8000e90 <main+0x164>)
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f004 fc54 	bl	800564c <siprintf>
 8000da4:	63f8      	str	r0, [r7, #60]	@ 0x3c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_len, HAL_MAX_DELAY);
 8000da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	4639      	mov	r1, r7
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
 8000db0:	4835      	ldr	r0, [pc, #212]	@ (8000e88 <main+0x15c>)
 8000db2:	f003 f9b7 	bl	8004124 <HAL_UART_Transmit>
  EPD_352_Init();
 8000db6:	f7ff fcf5 	bl	80007a4 <EPD_352_Init>
  EPD_352_display_NUM(EPD_3IN52_BLACK);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff fd72 	bl	80008a4 <EPD_352_display_NUM>
  EPD_352_lut_GC();
 8000dc0:	f7ff fc56 	bl	8000670 <EPD_352_lut_GC>
  EPD_352_refresh();
 8000dc4:	f7ff fc36 	bl	8000634 <EPD_352_refresh>

  EPD_352_SendCommand(0x50);
 8000dc8:	2050      	movs	r0, #80	@ 0x50
 8000dca:	f7ff fbe7 	bl	800059c <EPD_352_SendCommand>
  EPD_352_SendData(0x17);
 8000dce:	2017      	movs	r0, #23
 8000dd0:	f7ff fc0a 	bl	80005e8 <EPD_352_SendData>

  HAL_Delay(500);
 8000dd4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dd8:	f000 fdac 	bl	8001934 <HAL_Delay>

  uint8_t *imagenoir;
  uint16_t imagesize= ((EPD_3IN52_WIDTH % 8 == 0)? (EPD_3IN52_WIDTH / 8 ): (EPD_3IN52_WIDTH / 8 + 1)) * EPD_3IN52_HEIGHT;
 8000ddc:	f642 2330 	movw	r3, #10800	@ 0x2a30
 8000de0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  if((imagenoir = (uint8_t *)malloc(imagesize)) == NULL) {
 8000de2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 fb7b 	bl	80054e0 <malloc>
 8000dea:	4603      	mov	r3, r0
 8000dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8000dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d110      	bne.n	8000e16 <main+0xea>
	  uart_len = sprintf(uart_buf, "Failed to apply for black memory...\r\n");
 8000df4:	463b      	mov	r3, r7
 8000df6:	4927      	ldr	r1, [pc, #156]	@ (8000e94 <main+0x168>)
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 fc27 	bl	800564c <siprintf>
 8000dfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_len, HAL_MAX_DELAY);
 8000e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4639      	mov	r1, r7
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	481f      	ldr	r0, [pc, #124]	@ (8000e88 <main+0x15c>)
 8000e0c:	f003 f98a 	bl	8004124 <HAL_UART_Transmit>
          return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
 8000e14:	e032      	b.n	8000e7c <main+0x150>
      }
  uart_len = sprintf(uart_buf, "Paint_NewImage\r\n");
 8000e16:	463b      	mov	r3, r7
 8000e18:	491f      	ldr	r1, [pc, #124]	@ (8000e98 <main+0x16c>)
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f004 fc16 	bl	800564c <siprintf>
 8000e20:	63f8      	str	r0, [r7, #60]	@ 0x3c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_len, HAL_MAX_DELAY);
 8000e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	4639      	mov	r1, r7
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	4816      	ldr	r0, [pc, #88]	@ (8000e88 <main+0x15c>)
 8000e2e:	f003 f979 	bl	8004124 <HAL_UART_Transmit>
  Paint_NewImage(imagenoir, EPD_3IN52_WIDTH, EPD_3IN52_HEIGHT, ROTATE_0, BLACK);
 8000e32:	2300      	movs	r3, #0
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2300      	movs	r3, #0
 8000e38:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8000e3c:	21f0      	movs	r1, #240	@ 0xf0
 8000e3e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000e40:	f7ff fe30 	bl	8000aa4 <Paint_NewImage>
  Paint_Clear(WHITE);
 8000e44:	20ff      	movs	r0, #255	@ 0xff
 8000e46:	f7ff fe93 	bl	8000b70 <Paint_Clear>

  Paint_SelectImage(imagenoir);
 8000e4a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000e4c:	f7ff fe80 	bl	8000b50 <Paint_SelectImage>
  Paint_Clear(WHITE);
 8000e50:	20ff      	movs	r0, #255	@ 0xff
 8000e52:	f7ff fe8d 	bl	8000b70 <Paint_Clear>
  Paint_DrawBitMap(gImage_Didou);
 8000e56:	4811      	ldr	r0, [pc, #68]	@ (8000e9c <main+0x170>)
 8000e58:	f7ff ff32 	bl	8000cc0 <Paint_DrawBitMap>

  EPD_352_display(imagenoir);
 8000e5c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000e5e:	f7ff fd01 	bl	8000864 <EPD_352_display>
  EPD_352_lut_GC();
 8000e62:	f7ff fc05 	bl	8000670 <EPD_352_lut_GC>
  EPD_352_refresh();
 8000e66:	f7ff fbe5 	bl	8000634 <EPD_352_refresh>
  HAL_Delay(2000);
 8000e6a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e6e:	f000 fd61 	bl	8001934 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_GPIO_TogglePin(SPI1_SCK_GPIO_Port,SPI1_SCK_Pin);
	  HAL_Delay(10000);
 8000e72:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000e76:	f000 fd5d 	bl	8001934 <HAL_Delay>
 8000e7a:	e7fa      	b.n	8000e72 <main+0x146>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3740      	adds	r7, #64	@ 0x40
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	08005e48 	.word	0x08005e48
 8000e88:	20000198 	.word	0x20000198
 8000e8c:	40020800 	.word	0x40020800
 8000e90:	08005e5c 	.word	0x08005e5c
 8000e94:	08005e74 	.word	0x08005e74
 8000e98:	08005e9c 	.word	0x08005e9c
 8000e9c:	08005fb0 	.word	0x08005fb0

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b094      	sub	sp, #80	@ 0x50
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0320 	add.w	r3, r7, #32
 8000eaa:	2230      	movs	r2, #48	@ 0x30
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f004 fbee 	bl	8005690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	4b28      	ldr	r3, [pc, #160]	@ (8000f6c <SystemClock_Config+0xcc>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ecc:	4a27      	ldr	r2, [pc, #156]	@ (8000f6c <SystemClock_Config+0xcc>)
 8000ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed4:	4b25      	ldr	r3, [pc, #148]	@ (8000f6c <SystemClock_Config+0xcc>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	4b22      	ldr	r3, [pc, #136]	@ (8000f70 <SystemClock_Config+0xd0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a21      	ldr	r2, [pc, #132]	@ (8000f70 <SystemClock_Config+0xd0>)
 8000eea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f70 <SystemClock_Config+0xd0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000efc:	2301      	movs	r3, #1
 8000efe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f06:	2302      	movs	r3, #2
 8000f08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f10:	2308      	movs	r3, #8
 8000f12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f14:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f1e:	2307      	movs	r3, #7
 8000f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f22:	f107 0320 	add.w	r3, r7, #32
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 f96a 	bl	8003200 <HAL_RCC_OscConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f32:	f000 fa43 	bl	80013bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f36:	230f      	movs	r3, #15
 8000f38:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f42:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	2105      	movs	r1, #5
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 fbcb 	bl	80036f0 <HAL_RCC_ClockConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f60:	f000 fa2c 	bl	80013bc <Error_Handler>
  }
}
 8000f64:	bf00      	nop
 8000f66:	3750      	adds	r7, #80	@ 0x50
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40007000 	.word	0x40007000

08000f74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f7a:	4a13      	ldr	r2, [pc, #76]	@ (8000fc8 <MX_I2C1_Init+0x54>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f80:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <MX_I2C1_Init+0x58>)
 8000f82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <MX_I2C1_Init+0x50>)
 8000fb2:	f000 ffc3 	bl	8001f3c <HAL_I2C_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fbc:	f000 f9fe 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000094 	.word	0x20000094
 8000fc8:	40005400 	.word	0x40005400
 8000fcc:	000186a0 	.word	0x000186a0

08000fd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000fd6:	4a18      	ldr	r2, [pc, #96]	@ (8001038 <MX_SPI1_Init+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fda:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000fdc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fe0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_SPI1_Init+0x64>)
 8000ffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001000:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_SPI1_Init+0x64>)
 8001004:	2228      	movs	r2, #40	@ 0x28
 8001006:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <MX_SPI1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_SPI1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <MX_SPI1_Init+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_SPI1_Init+0x64>)
 800101c:	220a      	movs	r2, #10
 800101e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	@ (8001034 <MX_SPI1_Init+0x64>)
 8001022:	f002 fd85 	bl	8003b30 <HAL_SPI_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800102c:	f000 f9c6 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200000e8 	.word	0x200000e8
 8001038:	40013000 	.word	0x40013000

0800103c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001040:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <MX_SPI2_Init+0x64>)
 8001042:	4a18      	ldr	r2, [pc, #96]	@ (80010a4 <MX_SPI2_Init+0x68>)
 8001044:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001046:	4b16      	ldr	r3, [pc, #88]	@ (80010a0 <MX_SPI2_Init+0x64>)
 8001048:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800104c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800104e:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <MX_SPI2_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <MX_SPI2_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800105a:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <MX_SPI2_Init+0x64>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <MX_SPI2_Init+0x64>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <MX_SPI2_Init+0x64>)
 8001068:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800106c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800106e:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <MX_SPI2_Init+0x64>)
 8001070:	2220      	movs	r2, #32
 8001072:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001074:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <MX_SPI2_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <MX_SPI2_Init+0x64>)
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001080:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <MX_SPI2_Init+0x64>)
 8001082:	2200      	movs	r2, #0
 8001084:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <MX_SPI2_Init+0x64>)
 8001088:	220a      	movs	r2, #10
 800108a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	@ (80010a0 <MX_SPI2_Init+0x64>)
 800108e:	f002 fd4f 	bl	8003b30 <HAL_SPI_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001098:	f000 f990 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000140 	.word	0x20000140
 80010a4:	40003800 	.word	0x40003800

080010a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <MX_USART2_UART_Init+0x50>)
 80010b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b2:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010cc:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d2:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010de:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010e0:	f002 ffd0 	bl	8004084 <HAL_UART_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ea:	f000 f967 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000198 	.word	0x20000198
 80010f8:	40004400 	.word	0x40004400

080010fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001102:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001106:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800110a:	2204      	movs	r2, #4
 800110c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001110:	2202      	movs	r2, #2
 8001112:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001116:	2200      	movs	r2, #0
 8001118:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800111c:	2202      	movs	r2, #2
 800111e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001122:	2200      	movs	r2, #0
 8001124:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001128:	2200      	movs	r2, #0
 800112a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800112e:	2200      	movs	r2, #0
 8001130:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001134:	2200      	movs	r2, #0
 8001136:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800113a:	2200      	movs	r2, #0
 800113c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800113e:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001140:	f001 f840 	bl	80021c4 <HAL_PCD_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800114a:	f000 f937 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200001e0 	.word	0x200001e0

08001158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08c      	sub	sp, #48	@ 0x30
 800115c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
 8001172:	4b8c      	ldr	r3, [pc, #560]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a8b      	ldr	r2, [pc, #556]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 8001178:	f043 0310 	orr.w	r3, r3, #16
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b89      	ldr	r3, [pc, #548]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	61bb      	str	r3, [r7, #24]
 8001188:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	4b85      	ldr	r3, [pc, #532]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a84      	ldr	r2, [pc, #528]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b82      	ldr	r3, [pc, #520]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b7e      	ldr	r3, [pc, #504]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a7d      	ldr	r2, [pc, #500]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 80011b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b7b      	ldr	r3, [pc, #492]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b77      	ldr	r3, [pc, #476]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a76      	ldr	r2, [pc, #472]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b74      	ldr	r3, [pc, #464]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b70      	ldr	r3, [pc, #448]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	4a6f      	ldr	r2, [pc, #444]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ee:	4b6d      	ldr	r3, [pc, #436]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b69      	ldr	r3, [pc, #420]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a68      	ldr	r2, [pc, #416]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 8001204:	f043 0308 	orr.w	r3, r3, #8
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b66      	ldr	r3, [pc, #408]	@ (80013a4 <MX_GPIO_Init+0x24c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2108      	movs	r1, #8
 800121a:	4863      	ldr	r0, [pc, #396]	@ (80013a8 <MX_GPIO_Init+0x250>)
 800121c:	f000 fe74 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CS_Pin|DAT_COM_Pin|RST_Pin|PWR_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f242 2182 	movw	r1, #8834	@ 0x2282
 8001226:	4861      	ldr	r0, [pc, #388]	@ (80013ac <MX_GPIO_Init+0x254>)
 8001228:	f000 fe6e 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2101      	movs	r1, #1
 8001230:	485e      	ldr	r0, [pc, #376]	@ (80013ac <MX_GPIO_Init+0x254>)
 8001232:	f000 fe69 	bl	8001f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001236:	2200      	movs	r2, #0
 8001238:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800123c:	485c      	ldr	r0, [pc, #368]	@ (80013b0 <MX_GPIO_Init+0x258>)
 800123e:	f000 fe63 	bl	8001f08 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001242:	2308      	movs	r3, #8
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4619      	mov	r1, r3
 8001258:	4853      	ldr	r0, [pc, #332]	@ (80013a8 <MX_GPIO_Init+0x250>)
 800125a:	f000 fca1 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin OTG_FS_PowerSwitchOn_Pin DAT_COM_Pin RST_Pin
                           PWR_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|OTG_FS_PowerSwitchOn_Pin|DAT_COM_Pin|RST_Pin
 800125e:	f242 2383 	movw	r3, #8835	@ 0x2283
 8001262:	61fb      	str	r3, [r7, #28]
                          |PWR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4619      	mov	r1, r3
 8001276:	484d      	ldr	r0, [pc, #308]	@ (80013ac <MX_GPIO_Init+0x254>)
 8001278:	f000 fc92 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800127c:	2308      	movs	r3, #8
 800127e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800128c:	2305      	movs	r3, #5
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	4845      	ldr	r0, [pc, #276]	@ (80013ac <MX_GPIO_Init+0x254>)
 8001298:	f000 fc82 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800129c:	2301      	movs	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012a0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	4619      	mov	r1, r3
 80012b0:	4840      	ldr	r0, [pc, #256]	@ (80013b4 <MX_GPIO_Init+0x25c>)
 80012b2:	f000 fc75 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80012b6:	2310      	movs	r3, #16
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012c6:	2306      	movs	r3, #6
 80012c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	4619      	mov	r1, r3
 80012d0:	4838      	ldr	r0, [pc, #224]	@ (80013b4 <MX_GPIO_Init+0x25c>)
 80012d2:	f000 fc65 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80012d6:	2304      	movs	r3, #4
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012da:	2300      	movs	r3, #0
 80012dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	4833      	ldr	r0, [pc, #204]	@ (80013b8 <MX_GPIO_Init+0x260>)
 80012ea:	f000 fc59 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80012ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001300:	2305      	movs	r3, #5
 8001302:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	482b      	ldr	r0, [pc, #172]	@ (80013b8 <MX_GPIO_Init+0x260>)
 800130c:	f000 fc48 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001310:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001314:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4821      	ldr	r0, [pc, #132]	@ (80013b0 <MX_GPIO_Init+0x258>)
 800132a:	f000 fc39 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 800132e:	2340      	movs	r3, #64	@ 0x40
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	481a      	ldr	r0, [pc, #104]	@ (80013ac <MX_GPIO_Init+0x254>)
 8001342:	f000 fc2d 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001346:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001358:	2306      	movs	r3, #6
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4812      	ldr	r0, [pc, #72]	@ (80013ac <MX_GPIO_Init+0x254>)
 8001364:	f000 fc1c 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001368:	2320      	movs	r3, #32
 800136a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <MX_GPIO_Init+0x258>)
 800137c:	f000 fc10 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001380:	2302      	movs	r3, #2
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001384:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	4804      	ldr	r0, [pc, #16]	@ (80013a8 <MX_GPIO_Init+0x250>)
 8001396:	f000 fc03 	bl	8001ba0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800139a:	bf00      	nop
 800139c:	3730      	adds	r7, #48	@ 0x30
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020c00 	.word	0x40020c00
 80013b4:	40020000 	.word	0x40020000
 80013b8:	40020400 	.word	0x40020400

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
}
 80013c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <Error_Handler+0x8>

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <HAL_MspInit+0x4c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001414 <HAL_MspInit+0x4c>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013de:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <HAL_MspInit+0x4c>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	4a08      	ldr	r2, [pc, #32]	@ (8001414 <HAL_MspInit+0x4c>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001406:	2007      	movs	r0, #7
 8001408:	f000 fb88 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800

08001418 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	@ 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a19      	ldr	r2, [pc, #100]	@ (800149c <HAL_I2C_MspInit+0x84>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d12c      	bne.n	8001494 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <HAL_I2C_MspInit+0x88>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a17      	ldr	r2, [pc, #92]	@ (80014a0 <HAL_I2C_MspInit+0x88>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <HAL_I2C_MspInit+0x88>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001456:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800145a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145c:	2312      	movs	r3, #18
 800145e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001460:	2301      	movs	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001468:	2304      	movs	r3, #4
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <HAL_I2C_MspInit+0x8c>)
 8001474:	f000 fb94 	bl	8001ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <HAL_I2C_MspInit+0x88>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	4a07      	ldr	r2, [pc, #28]	@ (80014a0 <HAL_I2C_MspInit+0x88>)
 8001482:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001486:	6413      	str	r3, [r2, #64]	@ 0x40
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <HAL_I2C_MspInit+0x88>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	@ 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40005400 	.word	0x40005400
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020400 	.word	0x40020400

080014a8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	@ 0x30
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a32      	ldr	r2, [pc, #200]	@ (8001590 <HAL_SPI_MspInit+0xe8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d12c      	bne.n	8001524 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	4b31      	ldr	r3, [pc, #196]	@ (8001594 <HAL_SPI_MspInit+0xec>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d2:	4a30      	ldr	r2, [pc, #192]	@ (8001594 <HAL_SPI_MspInit+0xec>)
 80014d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014da:	4b2e      	ldr	r3, [pc, #184]	@ (8001594 <HAL_SPI_MspInit+0xec>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001594 <HAL_SPI_MspInit+0xec>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a29      	ldr	r2, [pc, #164]	@ (8001594 <HAL_SPI_MspInit+0xec>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b27      	ldr	r3, [pc, #156]	@ (8001594 <HAL_SPI_MspInit+0xec>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001502:	23e0      	movs	r3, #224	@ 0xe0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001512:	2305      	movs	r3, #5
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	481e      	ldr	r0, [pc, #120]	@ (8001598 <HAL_SPI_MspInit+0xf0>)
 800151e:	f000 fb3f 	bl	8001ba0 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001522:	e031      	b.n	8001588 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a1c      	ldr	r2, [pc, #112]	@ (800159c <HAL_SPI_MspInit+0xf4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d12c      	bne.n	8001588 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <HAL_SPI_MspInit+0xec>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	4a17      	ldr	r2, [pc, #92]	@ (8001594 <HAL_SPI_MspInit+0xec>)
 8001538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800153c:	6413      	str	r3, [r2, #64]	@ 0x40
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <HAL_SPI_MspInit+0xec>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <HAL_SPI_MspInit+0xec>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a10      	ldr	r2, [pc, #64]	@ (8001594 <HAL_SPI_MspInit+0xec>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <HAL_SPI_MspInit+0xec>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001566:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001578:	2305      	movs	r3, #5
 800157a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	4807      	ldr	r0, [pc, #28]	@ (80015a0 <HAL_SPI_MspInit+0xf8>)
 8001584:	f000 fb0c 	bl	8001ba0 <HAL_GPIO_Init>
}
 8001588:	bf00      	nop
 800158a:	3730      	adds	r7, #48	@ 0x30
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40013000 	.word	0x40013000
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000
 800159c:	40003800 	.word	0x40003800
 80015a0:	40020400 	.word	0x40020400

080015a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	@ 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a19      	ldr	r2, [pc, #100]	@ (8001628 <HAL_UART_MspInit+0x84>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d12b      	bne.n	800161e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	4a17      	ldr	r2, [pc, #92]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a10      	ldr	r2, [pc, #64]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015fe:	230c      	movs	r3, #12
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800160e:	2307      	movs	r3, #7
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	@ (8001630 <HAL_UART_MspInit+0x8c>)
 800161a:	f000 fac1 	bl	8001ba0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	@ 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40004400 	.word	0x40004400
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000

08001634 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001654:	d147      	bne.n	80016e6 <HAL_PCD_MspInit+0xb2>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b25      	ldr	r3, [pc, #148]	@ (80016f0 <HAL_PCD_MspInit+0xbc>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a24      	ldr	r2, [pc, #144]	@ (80016f0 <HAL_PCD_MspInit+0xbc>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b22      	ldr	r3, [pc, #136]	@ (80016f0 <HAL_PCD_MspInit+0xbc>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001672:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	481b      	ldr	r0, [pc, #108]	@ (80016f4 <HAL_PCD_MspInit+0xc0>)
 8001688:	f000 fa8a 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800168c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800169e:	230a      	movs	r3, #10
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	4812      	ldr	r0, [pc, #72]	@ (80016f4 <HAL_PCD_MspInit+0xc0>)
 80016aa:	f000 fa79 	bl	8001ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016ae:	4b10      	ldr	r3, [pc, #64]	@ (80016f0 <HAL_PCD_MspInit+0xbc>)
 80016b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016b2:	4a0f      	ldr	r2, [pc, #60]	@ (80016f0 <HAL_PCD_MspInit+0xbc>)
 80016b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016b8:	6353      	str	r3, [r2, #52]	@ 0x34
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <HAL_PCD_MspInit+0xbc>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	4a0b      	ldr	r2, [pc, #44]	@ (80016f0 <HAL_PCD_MspInit+0xbc>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ca:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <HAL_PCD_MspInit+0xbc>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	2043      	movs	r0, #67	@ 0x43
 80016dc:	f000 fa29 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80016e0:	2043      	movs	r0, #67	@ 0x43
 80016e2:	f000 fa42 	bl	8001b6a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	@ 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020000 	.word	0x40020000

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <NMI_Handler+0x4>

08001700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <MemManage_Handler+0x4>

08001710 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <UsageFault_Handler+0x4>

08001720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174e:	f000 f8d1 	bl	80018f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800175c:	4802      	ldr	r0, [pc, #8]	@ (8001768 <OTG_FS_IRQHandler+0x10>)
 800175e:	f000 fe40 	bl	80023e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200001e0 	.word	0x200001e0

0800176c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001774:	4a14      	ldr	r2, [pc, #80]	@ (80017c8 <_sbrk+0x5c>)
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <_sbrk+0x60>)
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001780:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001788:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <_sbrk+0x64>)
 800178a:	4a12      	ldr	r2, [pc, #72]	@ (80017d4 <_sbrk+0x68>)
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178e:	4b10      	ldr	r3, [pc, #64]	@ (80017d0 <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	429a      	cmp	r2, r3
 800179a:	d207      	bcs.n	80017ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800179c:	f003 ff90 	bl	80056c0 <__errno>
 80017a0:	4603      	mov	r3, r0
 80017a2:	220c      	movs	r2, #12
 80017a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	e009      	b.n	80017c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b2:	4b07      	ldr	r3, [pc, #28]	@ (80017d0 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	4a05      	ldr	r2, [pc, #20]	@ (80017d0 <_sbrk+0x64>)
 80017bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20020000 	.word	0x20020000
 80017cc:	00004000 	.word	0x00004000
 80017d0:	200006c4 	.word	0x200006c4
 80017d4:	20000818 	.word	0x20000818

080017d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <SystemInit+0x20>)
 80017de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017e2:	4a05      	ldr	r2, [pc, #20]	@ (80017f8 <SystemInit+0x20>)
 80017e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001834 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001800:	f7ff ffea 	bl	80017d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001804:	480c      	ldr	r0, [pc, #48]	@ (8001838 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001806:	490d      	ldr	r1, [pc, #52]	@ (800183c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001808:	4a0d      	ldr	r2, [pc, #52]	@ (8001840 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800181c:	4c0a      	ldr	r4, [pc, #40]	@ (8001848 <LoopFillZerobss+0x22>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800182a:	f003 ff4f 	bl	80056cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182e:	f7ff fa7d 	bl	8000d2c <main>
  bx  lr    
 8001832:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001834:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800183c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001840:	08008a44 	.word	0x08008a44
  ldr r2, =_sbss
 8001844:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001848:	20000814 	.word	0x20000814

0800184c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC_IRQHandler>
	...

08001850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001854:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0d      	ldr	r2, [pc, #52]	@ (8001890 <HAL_Init+0x40>)
 800185a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800185e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001860:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <HAL_Init+0x40>)
 8001866:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800186a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a07      	ldr	r2, [pc, #28]	@ (8001890 <HAL_Init+0x40>)
 8001872:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001876:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001878:	2003      	movs	r0, #3
 800187a:	f000 f94f 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187e:	2000      	movs	r0, #0
 8001880:	f000 f808 	bl	8001894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001884:	f7ff fda0 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023c00 	.word	0x40023c00

08001894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800189c:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <HAL_InitTick+0x54>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <HAL_InitTick+0x58>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 f967 	bl	8001b86 <HAL_SYSTICK_Config>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e00e      	b.n	80018e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d80a      	bhi.n	80018de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c8:	2200      	movs	r2, #0
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f000 f92f 	bl	8001b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d4:	4a06      	ldr	r2, [pc, #24]	@ (80018f0 <HAL_InitTick+0x5c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e000      	b.n	80018e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000008 	.word	0x20000008
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_IncTick+0x20>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_IncTick+0x24>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a04      	ldr	r2, [pc, #16]	@ (8001918 <HAL_IncTick+0x24>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000008 	.word	0x20000008
 8001918:	200006c8 	.word	0x200006c8

0800191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <HAL_GetTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	200006c8 	.word	0x200006c8

08001934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800193c:	f7ff ffee 	bl	800191c <HAL_GetTick>
 8001940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194c:	d005      	beq.n	800195a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800194e:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <HAL_Delay+0x44>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800195a:	bf00      	nop
 800195c:	f7ff ffde 	bl	800191c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	d8f7      	bhi.n	800195c <HAL_Delay+0x28>
  {
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000008 	.word	0x20000008

0800197c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	@ (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db0b      	blt.n	8001a0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	f003 021f 	and.w	r2, r3, #31
 80019f8:	4907      	ldr	r1, [pc, #28]	@ (8001a18 <__NVIC_EnableIRQ+0x38>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	2001      	movs	r0, #1
 8001a02:	fa00 f202 	lsl.w	r2, r0, r2
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	db0a      	blt.n	8001a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	490c      	ldr	r1, [pc, #48]	@ (8001a68 <__NVIC_SetPriority+0x4c>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	0112      	lsls	r2, r2, #4
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a44:	e00a      	b.n	8001a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4908      	ldr	r1, [pc, #32]	@ (8001a6c <__NVIC_SetPriority+0x50>)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	3b04      	subs	r3, #4
 8001a54:	0112      	lsls	r2, r2, #4
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	440b      	add	r3, r1
 8001a5a:	761a      	strb	r2, [r3, #24]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000e100 	.word	0xe000e100
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	@ 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f1c3 0307 	rsb	r3, r3, #7
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	bf28      	it	cs
 8001a8e:	2304      	movcs	r3, #4
 8001a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3304      	adds	r3, #4
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d902      	bls.n	8001aa0 <NVIC_EncodePriority+0x30>
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3b03      	subs	r3, #3
 8001a9e:	e000      	b.n	8001aa2 <NVIC_EncodePriority+0x32>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	43d9      	mvns	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	4313      	orrs	r3, r2
         );
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3724      	adds	r7, #36	@ 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ae8:	d301      	bcc.n	8001aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00f      	b.n	8001b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aee:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <SysTick_Config+0x40>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af6:	210f      	movs	r1, #15
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f7ff ff8e 	bl	8001a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <SysTick_Config+0x40>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	4b04      	ldr	r3, [pc, #16]	@ (8001b18 <SysTick_Config+0x40>)
 8001b08:	2207      	movs	r2, #7
 8001b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	e000e010 	.word	0xe000e010

08001b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff29 	bl	800197c <__NVIC_SetPriorityGrouping>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b44:	f7ff ff3e 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff8e 	bl	8001a70 <NVIC_EncodePriority>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff5d 	bl	8001a1c <__NVIC_SetPriority>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff31 	bl	80019e0 <__NVIC_EnableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffa2 	bl	8001ad8 <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	@ 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	e16b      	b.n	8001e94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	f040 815a 	bne.w	8001e8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d005      	beq.n	8001bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d130      	bne.n	8001c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 0201 	and.w	r2, r3, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d017      	beq.n	8001c90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d123      	bne.n	8001ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3208      	adds	r2, #8
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	69b9      	ldr	r1, [r7, #24]
 8001ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0203 	and.w	r2, r3, #3
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80b4 	beq.w	8001e8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b60      	ldr	r3, [pc, #384]	@ (8001eac <HAL_GPIO_Init+0x30c>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	4a5f      	ldr	r2, [pc, #380]	@ (8001eac <HAL_GPIO_Init+0x30c>)
 8001d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d36:	4b5d      	ldr	r3, [pc, #372]	@ (8001eac <HAL_GPIO_Init+0x30c>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d42:	4a5b      	ldr	r2, [pc, #364]	@ (8001eb0 <HAL_GPIO_Init+0x310>)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	220f      	movs	r2, #15
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a52      	ldr	r2, [pc, #328]	@ (8001eb4 <HAL_GPIO_Init+0x314>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d02b      	beq.n	8001dc6 <HAL_GPIO_Init+0x226>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a51      	ldr	r2, [pc, #324]	@ (8001eb8 <HAL_GPIO_Init+0x318>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d025      	beq.n	8001dc2 <HAL_GPIO_Init+0x222>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a50      	ldr	r2, [pc, #320]	@ (8001ebc <HAL_GPIO_Init+0x31c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d01f      	beq.n	8001dbe <HAL_GPIO_Init+0x21e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4f      	ldr	r2, [pc, #316]	@ (8001ec0 <HAL_GPIO_Init+0x320>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d019      	beq.n	8001dba <HAL_GPIO_Init+0x21a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4e      	ldr	r2, [pc, #312]	@ (8001ec4 <HAL_GPIO_Init+0x324>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d013      	beq.n	8001db6 <HAL_GPIO_Init+0x216>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4d      	ldr	r2, [pc, #308]	@ (8001ec8 <HAL_GPIO_Init+0x328>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00d      	beq.n	8001db2 <HAL_GPIO_Init+0x212>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4c      	ldr	r2, [pc, #304]	@ (8001ecc <HAL_GPIO_Init+0x32c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d007      	beq.n	8001dae <HAL_GPIO_Init+0x20e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ed0 <HAL_GPIO_Init+0x330>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d101      	bne.n	8001daa <HAL_GPIO_Init+0x20a>
 8001da6:	2307      	movs	r3, #7
 8001da8:	e00e      	b.n	8001dc8 <HAL_GPIO_Init+0x228>
 8001daa:	2308      	movs	r3, #8
 8001dac:	e00c      	b.n	8001dc8 <HAL_GPIO_Init+0x228>
 8001dae:	2306      	movs	r3, #6
 8001db0:	e00a      	b.n	8001dc8 <HAL_GPIO_Init+0x228>
 8001db2:	2305      	movs	r3, #5
 8001db4:	e008      	b.n	8001dc8 <HAL_GPIO_Init+0x228>
 8001db6:	2304      	movs	r3, #4
 8001db8:	e006      	b.n	8001dc8 <HAL_GPIO_Init+0x228>
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e004      	b.n	8001dc8 <HAL_GPIO_Init+0x228>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e002      	b.n	8001dc8 <HAL_GPIO_Init+0x228>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <HAL_GPIO_Init+0x228>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	f002 0203 	and.w	r2, r2, #3
 8001dce:	0092      	lsls	r2, r2, #2
 8001dd0:	4093      	lsls	r3, r2
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd8:	4935      	ldr	r1, [pc, #212]	@ (8001eb0 <HAL_GPIO_Init+0x310>)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	089b      	lsrs	r3, r3, #2
 8001dde:	3302      	adds	r3, #2
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001de6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed4 <HAL_GPIO_Init+0x334>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e0a:	4a32      	ldr	r2, [pc, #200]	@ (8001ed4 <HAL_GPIO_Init+0x334>)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e10:	4b30      	ldr	r3, [pc, #192]	@ (8001ed4 <HAL_GPIO_Init+0x334>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e34:	4a27      	ldr	r2, [pc, #156]	@ (8001ed4 <HAL_GPIO_Init+0x334>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e3a:	4b26      	ldr	r3, [pc, #152]	@ (8001ed4 <HAL_GPIO_Init+0x334>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed4 <HAL_GPIO_Init+0x334>)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <HAL_GPIO_Init+0x334>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e88:	4a12      	ldr	r2, [pc, #72]	@ (8001ed4 <HAL_GPIO_Init+0x334>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3301      	adds	r3, #1
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	2b0f      	cmp	r3, #15
 8001e98:	f67f ae90 	bls.w	8001bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3724      	adds	r7, #36	@ 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40013800 	.word	0x40013800
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	40020800 	.word	0x40020800
 8001ec0:	40020c00 	.word	0x40020c00
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40021400 	.word	0x40021400
 8001ecc:	40021800 	.word	0x40021800
 8001ed0:	40021c00 	.word	0x40021c00
 8001ed4:	40013c00 	.word	0x40013c00

08001ed8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	887b      	ldrh	r3, [r7, #2]
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
 8001ef4:	e001      	b.n	8001efa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
 8001f14:	4613      	mov	r3, r2
 8001f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f18:	787b      	ldrb	r3, [r7, #1]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f24:	e003      	b.n	8001f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f26:	887b      	ldrh	r3, [r7, #2]
 8001f28:	041a      	lsls	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	619a      	str	r2, [r3, #24]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e12b      	b.n	80021a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fa58 	bl	8001418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2224      	movs	r2, #36	@ 0x24
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fa0:	f001 fd9e 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 8001fa4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	4a81      	ldr	r2, [pc, #516]	@ (80021b0 <HAL_I2C_Init+0x274>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d807      	bhi.n	8001fc0 <HAL_I2C_Init+0x84>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4a80      	ldr	r2, [pc, #512]	@ (80021b4 <HAL_I2C_Init+0x278>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	bf94      	ite	ls
 8001fb8:	2301      	movls	r3, #1
 8001fba:	2300      	movhi	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	e006      	b.n	8001fce <HAL_I2C_Init+0x92>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4a7d      	ldr	r2, [pc, #500]	@ (80021b8 <HAL_I2C_Init+0x27c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	bf94      	ite	ls
 8001fc8:	2301      	movls	r3, #1
 8001fca:	2300      	movhi	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e0e7      	b.n	80021a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4a78      	ldr	r2, [pc, #480]	@ (80021bc <HAL_I2C_Init+0x280>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	0c9b      	lsrs	r3, r3, #18
 8001fe0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4a6a      	ldr	r2, [pc, #424]	@ (80021b0 <HAL_I2C_Init+0x274>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d802      	bhi.n	8002010 <HAL_I2C_Init+0xd4>
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	3301      	adds	r3, #1
 800200e:	e009      	b.n	8002024 <HAL_I2C_Init+0xe8>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	4a69      	ldr	r2, [pc, #420]	@ (80021c0 <HAL_I2C_Init+0x284>)
 800201c:	fba2 2303 	umull	r2, r3, r2, r3
 8002020:	099b      	lsrs	r3, r3, #6
 8002022:	3301      	adds	r3, #1
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	430b      	orrs	r3, r1
 800202a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002036:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	495c      	ldr	r1, [pc, #368]	@ (80021b0 <HAL_I2C_Init+0x274>)
 8002040:	428b      	cmp	r3, r1
 8002042:	d819      	bhi.n	8002078 <HAL_I2C_Init+0x13c>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1e59      	subs	r1, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002052:	1c59      	adds	r1, r3, #1
 8002054:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002058:	400b      	ands	r3, r1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_I2C_Init+0x138>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1e59      	subs	r1, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	fbb1 f3f3 	udiv	r3, r1, r3
 800206c:	3301      	adds	r3, #1
 800206e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002072:	e051      	b.n	8002118 <HAL_I2C_Init+0x1dc>
 8002074:	2304      	movs	r3, #4
 8002076:	e04f      	b.n	8002118 <HAL_I2C_Init+0x1dc>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d111      	bne.n	80020a4 <HAL_I2C_Init+0x168>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1e58      	subs	r0, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	440b      	add	r3, r1
 800208e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002092:	3301      	adds	r3, #1
 8002094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	e012      	b.n	80020ca <HAL_I2C_Init+0x18e>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1e58      	subs	r0, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	0099      	lsls	r1, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ba:	3301      	adds	r3, #1
 80020bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_I2C_Init+0x196>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e022      	b.n	8002118 <HAL_I2C_Init+0x1dc>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10e      	bne.n	80020f8 <HAL_I2C_Init+0x1bc>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1e58      	subs	r0, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6859      	ldr	r1, [r3, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	440b      	add	r3, r1
 80020e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ec:	3301      	adds	r3, #1
 80020ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020f6:	e00f      	b.n	8002118 <HAL_I2C_Init+0x1dc>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1e58      	subs	r0, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	0099      	lsls	r1, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	fbb0 f3f3 	udiv	r3, r0, r3
 800210e:	3301      	adds	r3, #1
 8002110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002114:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	6809      	ldr	r1, [r1, #0]
 800211c:	4313      	orrs	r3, r2
 800211e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002146:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6911      	ldr	r1, [r2, #16]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68d2      	ldr	r2, [r2, #12]
 8002152:	4311      	orrs	r1, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	430b      	orrs	r3, r1
 800215a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2220      	movs	r2, #32
 8002192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	000186a0 	.word	0x000186a0
 80021b4:	001e847f 	.word	0x001e847f
 80021b8:	003d08ff 	.word	0x003d08ff
 80021bc:	431bde83 	.word	0x431bde83
 80021c0:	10624dd3 	.word	0x10624dd3

080021c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e101      	b.n	80023da <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d106      	bne.n	80021f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff fa1f 	bl	8001634 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2203      	movs	r2, #3
 80021fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002204:	d102      	bne.n	800220c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f002 fc49 	bl	8004aa8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	7c1a      	ldrb	r2, [r3, #16]
 800221e:	f88d 2000 	strb.w	r2, [sp]
 8002222:	3304      	adds	r3, #4
 8002224:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002226:	f002 fb39 	bl	800489c <USB_CoreInit>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0ce      	b.n	80023da <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f002 fc41 	bl	8004aca <USB_SetCurrentMode>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e0bf      	b.n	80023da <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	e04a      	b.n	80022f6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002260:	7bfa      	ldrb	r2, [r7, #15]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	3315      	adds	r3, #21
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	3314      	adds	r3, #20
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	b298      	uxth	r0, r3
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	332e      	adds	r3, #46	@ 0x2e
 800229c:	4602      	mov	r2, r0
 800229e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	3318      	adds	r3, #24
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	331c      	adds	r3, #28
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	3320      	adds	r3, #32
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	3324      	adds	r3, #36	@ 0x24
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	3301      	adds	r3, #1
 80022f4:	73fb      	strb	r3, [r7, #15]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	791b      	ldrb	r3, [r3, #4]
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d3af      	bcc.n	8002260 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	e044      	b.n	8002390 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	3301      	adds	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	791b      	ldrb	r3, [r3, #4]
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	429a      	cmp	r2, r3
 8002398:	d3b5      	bcc.n	8002306 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	7c1a      	ldrb	r2, [r3, #16]
 80023a2:	f88d 2000 	strb.w	r2, [sp]
 80023a6:	3304      	adds	r3, #4
 80023a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023aa:	f002 fbdb 	bl	8004b64 <USB_DevInit>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e00c      	b.n	80023da <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f002 ff08 	bl	80051e8 <USB_DevDisconnect>

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023e2:	b590      	push	{r4, r7, lr}
 80023e4:	b08d      	sub	sp, #52	@ 0x34
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f002 ffa9 	bl	8005350 <USB_GetMode>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 848c 	bne.w	8002d1e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f002 ff0d 	bl	800522a <USB_ReadInterrupts>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8482 	beq.w	8002d1c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f002 fefa 	bl	800522a <USB_ReadInterrupts>
 8002436:	4603      	mov	r3, r0
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b02      	cmp	r3, #2
 800243e:	d107      	bne.n	8002450 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f002 0202 	and.w	r2, r2, #2
 800244e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f002 fee8 	bl	800522a <USB_ReadInterrupts>
 800245a:	4603      	mov	r3, r0
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b10      	cmp	r3, #16
 8002462:	d161      	bne.n	8002528 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0210 	bic.w	r2, r2, #16
 8002472:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	f003 020f 	and.w	r2, r3, #15
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	3304      	adds	r3, #4
 8002492:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800249a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800249e:	d124      	bne.n	80024ea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d035      	beq.n	8002518 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	6a38      	ldr	r0, [r7, #32]
 80024c0:	f002 fe3a 	bl	8005138 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024d0:	441a      	add	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024e2:	441a      	add	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	615a      	str	r2, [r3, #20]
 80024e8:	e016      	b.n	8002518 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80024f0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80024f4:	d110      	bne.n	8002518 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024fc:	2208      	movs	r2, #8
 80024fe:	4619      	mov	r1, r3
 8002500:	6a38      	ldr	r0, [r7, #32]
 8002502:	f002 fe19 	bl	8005138 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	695a      	ldr	r2, [r3, #20]
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002512:	441a      	add	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0210 	orr.w	r2, r2, #16
 8002526:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f002 fe7c 	bl	800522a <USB_ReadInterrupts>
 8002532:	4603      	mov	r3, r0
 8002534:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002538:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800253c:	f040 80a7 	bne.w	800268e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f002 fe81 	bl	8005250 <USB_ReadDevAllOutEpInterrupt>
 800254e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002550:	e099      	b.n	8002686 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 808e 	beq.w	800267a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f002 fea5 	bl	80052b8 <USB_ReadDevOutEPInterrupt>
 800256e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00c      	beq.n	8002594 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	4413      	add	r3, r2
 8002582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002586:	461a      	mov	r2, r3
 8002588:	2301      	movs	r3, #1
 800258a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800258c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fcfc 	bl	8002f8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00c      	beq.n	80025b8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025aa:	461a      	mov	r2, r3
 80025ac:	2308      	movs	r3, #8
 80025ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80025b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fdd2 	bl	800315c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d008      	beq.n	80025d4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025ce:	461a      	mov	r2, r3
 80025d0:	2310      	movs	r3, #16
 80025d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d030      	beq.n	8002640 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e6:	2b80      	cmp	r3, #128	@ 0x80
 80025e8:	d109      	bne.n	80025fe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025fc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80025fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	3304      	adds	r3, #4
 8002612:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	78db      	ldrb	r3, [r3, #3]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d108      	bne.n	800262e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2200      	movs	r2, #0
 8002620:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	b2db      	uxtb	r3, r3
 8002626:	4619      	mov	r1, r3
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 fbc5 	bl	8002db8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800263a:	461a      	mov	r2, r3
 800263c:	2302      	movs	r3, #2
 800263e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d008      	beq.n	800265c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	4413      	add	r3, r2
 8002652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002656:	461a      	mov	r2, r3
 8002658:	2320      	movs	r3, #32
 800265a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d009      	beq.n	800267a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4413      	add	r3, r2
 800266e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002672:	461a      	mov	r2, r3
 8002674:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002678:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	3301      	adds	r3, #1
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002682:	085b      	lsrs	r3, r3, #1
 8002684:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f af62 	bne.w	8002552 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f002 fdc9 	bl	800522a <USB_ReadInterrupts>
 8002698:	4603      	mov	r3, r0
 800269a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800269e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026a2:	f040 80db 	bne.w	800285c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f002 fdea 	bl	8005284 <USB_ReadDevAllInEpInterrupt>
 80026b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80026b6:	e0cd      	b.n	8002854 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 80c2 	beq.w	8002848 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f002 fe10 	bl	80052f4 <USB_ReadDevInEPInterrupt>
 80026d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d057      	beq.n	8002790 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	2201      	movs	r2, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69f9      	ldr	r1, [r7, #28]
 80026fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002700:	4013      	ands	r3, r2
 8002702:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	4413      	add	r3, r2
 800270c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002710:	461a      	mov	r2, r3
 8002712:	2301      	movs	r3, #1
 8002714:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	799b      	ldrb	r3, [r3, #6]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d132      	bne.n	8002784 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	3320      	adds	r3, #32
 800272e:	6819      	ldr	r1, [r3, #0]
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4403      	add	r3, r0
 800273e:	331c      	adds	r3, #28
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4419      	add	r1, r3
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002748:	4613      	mov	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4403      	add	r3, r0
 8002752:	3320      	adds	r3, #32
 8002754:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	2b00      	cmp	r3, #0
 800275a:	d113      	bne.n	8002784 <HAL_PCD_IRQHandler+0x3a2>
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3324      	adds	r3, #36	@ 0x24
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d108      	bne.n	8002784 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800277c:	461a      	mov	r2, r3
 800277e:	2101      	movs	r1, #1
 8002780:	f002 fe18 	bl	80053b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	b2db      	uxtb	r3, r3
 8002788:	4619      	mov	r1, r3
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fad6 	bl	8002d3c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027a6:	461a      	mov	r2, r3
 80027a8:	2308      	movs	r3, #8
 80027aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027c2:	461a      	mov	r2, r3
 80027c4:	2310      	movs	r3, #16
 80027c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027de:	461a      	mov	r2, r3
 80027e0:	2340      	movs	r3, #64	@ 0x40
 80027e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d023      	beq.n	8002836 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80027ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027f0:	6a38      	ldr	r0, [r7, #32]
 80027f2:	f002 fb1b 	bl	8004e2c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80027f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	3310      	adds	r3, #16
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	3304      	adds	r3, #4
 8002808:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	78db      	ldrb	r3, [r3, #3]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d108      	bne.n	8002824 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2200      	movs	r2, #0
 8002816:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	b2db      	uxtb	r3, r3
 800281c:	4619      	mov	r1, r3
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fad6 	bl	8002dd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	4413      	add	r3, r2
 800282c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002830:	461a      	mov	r2, r3
 8002832:	2302      	movs	r3, #2
 8002834:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002840:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fb15 	bl	8002e72 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	3301      	adds	r3, #1
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800284e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002856:	2b00      	cmp	r3, #0
 8002858:	f47f af2e 	bne.w	80026b8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f002 fce2 	bl	800522a <USB_ReadInterrupts>
 8002866:	4603      	mov	r3, r0
 8002868:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800286c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002870:	d122      	bne.n	80028b8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800288c:	2b01      	cmp	r3, #1
 800288e:	d108      	bne.n	80028a2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002898:	2100      	movs	r1, #0
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fca4 	bl	80031e8 <HAL_PCDEx_LPM_Callback>
 80028a0:	e002      	b.n	80028a8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fa7e 	bl	8002da4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80028b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f002 fcb4 	bl	800522a <USB_ReadInterrupts>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028cc:	d112      	bne.n	80028f4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d102      	bne.n	80028e4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fa56 	bl	8002d90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80028f2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f002 fc96 	bl	800522a <USB_ReadInterrupts>
 80028fe:	4603      	mov	r3, r0
 8002900:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002908:	f040 80b7 	bne.w	8002a7a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2110      	movs	r1, #16
 8002926:	4618      	mov	r0, r3
 8002928:	f002 fa80 	bl	8004e2c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292c:	2300      	movs	r3, #0
 800292e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002930:	e046      	b.n	80029c0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800293e:	461a      	mov	r2, r3
 8002940:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002944:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	4413      	add	r3, r2
 800294e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002956:	0151      	lsls	r1, r2, #5
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	440a      	add	r2, r1
 800295c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002960:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002964:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	4413      	add	r3, r2
 800296e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002972:	461a      	mov	r2, r3
 8002974:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002978:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800297a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800298a:	0151      	lsls	r1, r2, #5
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	440a      	add	r2, r1
 8002990:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002994:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002998:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800299a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029aa:	0151      	lsls	r1, r2, #5
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	440a      	add	r2, r1
 80029b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80029b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80029b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029bc:	3301      	adds	r3, #1
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	791b      	ldrb	r3, [r3, #4]
 80029c4:	461a      	mov	r2, r3
 80029c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d3b2      	bcc.n	8002932 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029da:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80029de:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7bdb      	ldrb	r3, [r3, #15]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d016      	beq.n	8002a16 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029f8:	f043 030b 	orr.w	r3, r3, #11
 80029fc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a08:	69fa      	ldr	r2, [r7, #28]
 8002a0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a0e:	f043 030b 	orr.w	r3, r3, #11
 8002a12:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a14:	e015      	b.n	8002a42 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a24:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a28:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002a2c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a3c:	f043 030b 	orr.w	r3, r3, #11
 8002a40:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a50:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002a54:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a64:	461a      	mov	r2, r3
 8002a66:	f002 fca5 	bl	80053b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695a      	ldr	r2, [r3, #20]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 fbd3 	bl	800522a <USB_ReadInterrupts>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a8e:	d123      	bne.n	8002ad8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f002 fc69 	bl	800536c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 fa3d 	bl	8004f1e <USB_GetDevSpeed>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681c      	ldr	r4, [r3, #0]
 8002ab0:	f001 f80a 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002aba:	461a      	mov	r2, r3
 8002abc:	4620      	mov	r0, r4
 8002abe:	f001 ff51 	bl	8004964 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f95a 	bl	8002d7c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f002 fba4 	bl	800522a <USB_ReadInterrupts>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d10a      	bne.n	8002b02 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f93b 	bl	8002d68 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f002 0208 	and.w	r2, r2, #8
 8002b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f002 fb8f 	bl	800522a <USB_ReadInterrupts>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b12:	2b80      	cmp	r3, #128	@ 0x80
 8002b14:	d123      	bne.n	8002b5e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b22:	2301      	movs	r3, #1
 8002b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b26:	e014      	b.n	8002b52 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	4619      	mov	r1, r3
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f962 	bl	8002e10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4e:	3301      	adds	r3, #1
 8002b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	791b      	ldrb	r3, [r3, #4]
 8002b56:	461a      	mov	r2, r3
 8002b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d3e4      	bcc.n	8002b28 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f002 fb61 	bl	800522a <USB_ReadInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b72:	d13c      	bne.n	8002bee <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b74:	2301      	movs	r3, #1
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b78:	e02b      	b.n	8002bd2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	3318      	adds	r3, #24
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d115      	bne.n	8002bcc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ba0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	da12      	bge.n	8002bcc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002baa:	4613      	mov	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3317      	adds	r3, #23
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f922 	bl	8002e10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bce:	3301      	adds	r3, #1
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	791b      	ldrb	r3, [r3, #4]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d3cd      	bcc.n	8002b7a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002bec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 fb19 	bl	800522a <USB_ReadInterrupts>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c02:	d156      	bne.n	8002cb2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c04:	2301      	movs	r3, #1
 8002c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c08:	e045      	b.n	8002c96 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d12e      	bne.n	8002c90 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c32:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	da2b      	bge.n	8002c90 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	0c1a      	lsrs	r2, r3, #16
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002c42:	4053      	eors	r3, r2
 8002c44:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d121      	bne.n	8002c90 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10a      	bne.n	8002c90 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c8c:	6053      	str	r3, [r2, #4]
            break;
 8002c8e:	e008      	b.n	8002ca2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	3301      	adds	r3, #1
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	791b      	ldrb	r3, [r3, #4]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d3b3      	bcc.n	8002c0a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695a      	ldr	r2, [r3, #20]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f002 fab7 	bl	800522a <USB_ReadInterrupts>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc6:	d10a      	bne.n	8002cde <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f88d 	bl	8002de8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f002 faa1 	bl	800522a <USB_ReadInterrupts>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d115      	bne.n	8002d1e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f879 	bl	8002dfc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	e000      	b.n	8002d1e <HAL_PCD_IRQHandler+0x93c>
      return;
 8002d1c:	bf00      	nop
    }
  }
}
 8002d1e:	3734      	adds	r7, #52	@ 0x34
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd90      	pop	{r4, r7, pc}

08002d24 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	da0c      	bge.n	8002e3e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	f003 020f 	and.w	r2, r3, #15
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	3310      	adds	r3, #16
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	4413      	add	r3, r2
 8002e38:	3304      	adds	r3, #4
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	e00c      	b.n	8002e58 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	f003 020f 	and.w	r2, r3, #15
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	4413      	add	r3, r2
 8002e54:	3304      	adds	r3, #4
 8002e56:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68f9      	ldr	r1, [r7, #12]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f002 f882 	bl	8004f68 <USB_EPStopXfer>
 8002e64:	4603      	mov	r3, r0
 8002e66:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e68:	7afb      	ldrb	r3, [r7, #11]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b08a      	sub	sp, #40	@ 0x28
 8002e76:	af02      	add	r7, sp, #8
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	3310      	adds	r3, #16
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	3304      	adds	r3, #4
 8002e98:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d901      	bls.n	8002eaa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e06b      	b.n	8002f82 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d902      	bls.n	8002ec6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3303      	adds	r3, #3
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ece:	e02a      	b.n	8002f26 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d902      	bls.n	8002eec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	3303      	adds	r3, #3
 8002ef0:	089b      	lsrs	r3, r3, #2
 8002ef2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	68d9      	ldr	r1, [r3, #12]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	4603      	mov	r3, r0
 8002f08:	6978      	ldr	r0, [r7, #20]
 8002f0a:	f002 f8d7 	bl	80050bc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	441a      	add	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	441a      	add	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d809      	bhi.n	8002f50 <PCD_WriteEmptyTxFifo+0xde>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d203      	bcs.n	8002f50 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1bf      	bne.n	8002ed0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d811      	bhi.n	8002f80 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	2201      	movs	r2, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	6939      	ldr	r1, [r7, #16]
 8002f78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3720      	adds	r7, #32
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	333c      	adds	r3, #60	@ 0x3c
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	799b      	ldrb	r3, [r3, #6]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d17b      	bne.n	80030ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d015      	beq.n	8002ff8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	4a61      	ldr	r2, [pc, #388]	@ (8003154 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	f240 80b9 	bls.w	8003148 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80b3 	beq.w	8003148 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ff4:	6093      	str	r3, [r2, #8]
 8002ff6:	e0a7      	b.n	8003148 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	4413      	add	r3, r2
 800300a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800300e:	461a      	mov	r2, r3
 8003010:	2320      	movs	r3, #32
 8003012:	6093      	str	r3, [r2, #8]
 8003014:	e098      	b.n	8003148 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800301c:	2b00      	cmp	r3, #0
 800301e:	f040 8093 	bne.w	8003148 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	4a4b      	ldr	r2, [pc, #300]	@ (8003154 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d90f      	bls.n	800304a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	4413      	add	r3, r2
 800303c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003040:	461a      	mov	r2, r3
 8003042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003046:	6093      	str	r3, [r2, #8]
 8003048:	e07e      	b.n	8003148 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	4413      	add	r3, r2
 800305c:	3304      	adds	r3, #4
 800305e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a1a      	ldr	r2, [r3, #32]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	0159      	lsls	r1, r3, #5
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	440b      	add	r3, r1
 800306c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003076:	1ad2      	subs	r2, r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d114      	bne.n	80030ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003094:	461a      	mov	r2, r3
 8003096:	2101      	movs	r1, #1
 8003098:	f002 f98c 	bl	80053b4 <USB_EP0_OutStart>
 800309c:	e006      	b.n	80030ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	441a      	add	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	4619      	mov	r1, r3
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff fe36 	bl	8002d24 <HAL_PCD_DataOutStageCallback>
 80030b8:	e046      	b.n	8003148 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	4a26      	ldr	r2, [pc, #152]	@ (8003158 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d124      	bne.n	800310c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030d8:	461a      	mov	r2, r3
 80030da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030de:	6093      	str	r3, [r2, #8]
 80030e0:	e032      	b.n	8003148 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030f8:	461a      	mov	r2, r3
 80030fa:	2320      	movs	r3, #32
 80030fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	4619      	mov	r1, r3
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff fe0d 	bl	8002d24 <HAL_PCD_DataOutStageCallback>
 800310a:	e01d      	b.n	8003148 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d114      	bne.n	800313c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d108      	bne.n	800313c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003134:	461a      	mov	r2, r3
 8003136:	2100      	movs	r1, #0
 8003138:	f002 f93c 	bl	80053b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	b2db      	uxtb	r3, r3
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff fdee 	bl	8002d24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3720      	adds	r7, #32
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	4f54300a 	.word	0x4f54300a
 8003158:	4f54310a 	.word	0x4f54310a

0800315c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	333c      	adds	r3, #60	@ 0x3c
 8003174:	3304      	adds	r3, #4
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4a15      	ldr	r2, [pc, #84]	@ (80031e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d90e      	bls.n	80031b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003198:	2b00      	cmp	r3, #0
 800319a:	d009      	beq.n	80031b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031a8:	461a      	mov	r2, r3
 80031aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff fdcf 	bl	8002d54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4a0a      	ldr	r2, [pc, #40]	@ (80031e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d90c      	bls.n	80031d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	799b      	ldrb	r3, [r3, #6]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d108      	bne.n	80031d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031d0:	461a      	mov	r2, r3
 80031d2:	2101      	movs	r1, #1
 80031d4:	f002 f8ee 	bl	80053b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	4f54300a 	.word	0x4f54300a

080031e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e267      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d075      	beq.n	800330a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800321e:	4b88      	ldr	r3, [pc, #544]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b04      	cmp	r3, #4
 8003228:	d00c      	beq.n	8003244 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800322a:	4b85      	ldr	r3, [pc, #532]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003232:	2b08      	cmp	r3, #8
 8003234:	d112      	bne.n	800325c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003236:	4b82      	ldr	r3, [pc, #520]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800323e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003242:	d10b      	bne.n	800325c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003244:	4b7e      	ldr	r3, [pc, #504]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d05b      	beq.n	8003308 <HAL_RCC_OscConfig+0x108>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d157      	bne.n	8003308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e242      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003264:	d106      	bne.n	8003274 <HAL_RCC_OscConfig+0x74>
 8003266:	4b76      	ldr	r3, [pc, #472]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a75      	ldr	r2, [pc, #468]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e01d      	b.n	80032b0 <HAL_RCC_OscConfig+0xb0>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0x98>
 800327e:	4b70      	ldr	r3, [pc, #448]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a6f      	ldr	r2, [pc, #444]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4b6d      	ldr	r3, [pc, #436]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6c      	ldr	r2, [pc, #432]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0xb0>
 8003298:	4b69      	ldr	r3, [pc, #420]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a68      	ldr	r2, [pc, #416]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 800329e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b66      	ldr	r3, [pc, #408]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a65      	ldr	r2, [pc, #404]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 80032aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d013      	beq.n	80032e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fe fb30 	bl	800191c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fe fb2c 	bl	800191c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	@ 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e207      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0xc0>
 80032de:	e014      	b.n	800330a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fe fb1c 	bl	800191c <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fe fb18 	bl	800191c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	@ 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e1f3      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fa:	4b51      	ldr	r3, [pc, #324]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0xe8>
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d063      	beq.n	80033de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003316:	4b4a      	ldr	r3, [pc, #296]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003322:	4b47      	ldr	r3, [pc, #284]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800332a:	2b08      	cmp	r3, #8
 800332c:	d11c      	bne.n	8003368 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800332e:	4b44      	ldr	r3, [pc, #272]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d116      	bne.n	8003368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333a:	4b41      	ldr	r3, [pc, #260]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <HAL_RCC_OscConfig+0x152>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d001      	beq.n	8003352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e1c7      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003352:	4b3b      	ldr	r3, [pc, #236]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4937      	ldr	r1, [pc, #220]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	e03a      	b.n	80033de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d020      	beq.n	80033b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003370:	4b34      	ldr	r3, [pc, #208]	@ (8003444 <HAL_RCC_OscConfig+0x244>)
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003376:	f7fe fad1 	bl	800191c <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337e:	f7fe facd 	bl	800191c <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e1a8      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003390:	4b2b      	ldr	r3, [pc, #172]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339c:	4b28      	ldr	r3, [pc, #160]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4925      	ldr	r1, [pc, #148]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	600b      	str	r3, [r1, #0]
 80033b0:	e015      	b.n	80033de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b2:	4b24      	ldr	r3, [pc, #144]	@ (8003444 <HAL_RCC_OscConfig+0x244>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fe fab0 	bl	800191c <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c0:	f7fe faac 	bl	800191c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e187      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d036      	beq.n	8003458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d016      	beq.n	8003420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f2:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <HAL_RCC_OscConfig+0x248>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f8:	f7fe fa90 	bl	800191c <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003400:	f7fe fa8c 	bl	800191c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e167      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003412:	4b0b      	ldr	r3, [pc, #44]	@ (8003440 <HAL_RCC_OscConfig+0x240>)
 8003414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x200>
 800341e:	e01b      	b.n	8003458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003420:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <HAL_RCC_OscConfig+0x248>)
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003426:	f7fe fa79 	bl	800191c <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800342c:	e00e      	b.n	800344c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800342e:	f7fe fa75 	bl	800191c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d907      	bls.n	800344c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e150      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
 8003440:	40023800 	.word	0x40023800
 8003444:	42470000 	.word	0x42470000
 8003448:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800344c:	4b88      	ldr	r3, [pc, #544]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800344e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1ea      	bne.n	800342e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8097 	beq.w	8003594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003466:	2300      	movs	r3, #0
 8003468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346a:	4b81      	ldr	r3, [pc, #516]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10f      	bne.n	8003496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	4b7d      	ldr	r3, [pc, #500]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	4a7c      	ldr	r2, [pc, #496]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 8003480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003484:	6413      	str	r3, [r2, #64]	@ 0x40
 8003486:	4b7a      	ldr	r3, [pc, #488]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003492:	2301      	movs	r3, #1
 8003494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003496:	4b77      	ldr	r3, [pc, #476]	@ (8003674 <HAL_RCC_OscConfig+0x474>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d118      	bne.n	80034d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a2:	4b74      	ldr	r3, [pc, #464]	@ (8003674 <HAL_RCC_OscConfig+0x474>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a73      	ldr	r2, [pc, #460]	@ (8003674 <HAL_RCC_OscConfig+0x474>)
 80034a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ae:	f7fe fa35 	bl	800191c <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b6:	f7fe fa31 	bl	800191c <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e10c      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003674 <HAL_RCC_OscConfig+0x474>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d106      	bne.n	80034ea <HAL_RCC_OscConfig+0x2ea>
 80034dc:	4b64      	ldr	r3, [pc, #400]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e0:	4a63      	ldr	r2, [pc, #396]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034e8:	e01c      	b.n	8003524 <HAL_RCC_OscConfig+0x324>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b05      	cmp	r3, #5
 80034f0:	d10c      	bne.n	800350c <HAL_RCC_OscConfig+0x30c>
 80034f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f6:	4a5e      	ldr	r2, [pc, #376]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 80034f8:	f043 0304 	orr.w	r3, r3, #4
 80034fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80034fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003502:	4a5b      	ldr	r2, [pc, #364]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6713      	str	r3, [r2, #112]	@ 0x70
 800350a:	e00b      	b.n	8003524 <HAL_RCC_OscConfig+0x324>
 800350c:	4b58      	ldr	r3, [pc, #352]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003510:	4a57      	ldr	r2, [pc, #348]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 8003512:	f023 0301 	bic.w	r3, r3, #1
 8003516:	6713      	str	r3, [r2, #112]	@ 0x70
 8003518:	4b55      	ldr	r3, [pc, #340]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351c:	4a54      	ldr	r2, [pc, #336]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800351e:	f023 0304 	bic.w	r3, r3, #4
 8003522:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d015      	beq.n	8003558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7fe f9f6 	bl	800191c <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003532:	e00a      	b.n	800354a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7fe f9f2 	bl	800191c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e0cb      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354a:	4b49      	ldr	r3, [pc, #292]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0ee      	beq.n	8003534 <HAL_RCC_OscConfig+0x334>
 8003556:	e014      	b.n	8003582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003558:	f7fe f9e0 	bl	800191c <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355e:	e00a      	b.n	8003576 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003560:	f7fe f9dc 	bl	800191c <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356e:	4293      	cmp	r3, r2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e0b5      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003576:	4b3e      	ldr	r3, [pc, #248]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1ee      	bne.n	8003560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003582:	7dfb      	ldrb	r3, [r7, #23]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d105      	bne.n	8003594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003588:	4b39      	ldr	r3, [pc, #228]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800358a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358c:	4a38      	ldr	r2, [pc, #224]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800358e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003592:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80a1 	beq.w	80036e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800359e:	4b34      	ldr	r3, [pc, #208]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d05c      	beq.n	8003664 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d141      	bne.n	8003636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b2:	4b31      	ldr	r3, [pc, #196]	@ (8003678 <HAL_RCC_OscConfig+0x478>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fe f9b0 	bl	800191c <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c0:	f7fe f9ac 	bl	800191c <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e087      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d2:	4b27      	ldr	r3, [pc, #156]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69da      	ldr	r2, [r3, #28]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	019b      	lsls	r3, r3, #6
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f4:	085b      	lsrs	r3, r3, #1
 80035f6:	3b01      	subs	r3, #1
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	491b      	ldr	r1, [pc, #108]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003608:	4b1b      	ldr	r3, [pc, #108]	@ (8003678 <HAL_RCC_OscConfig+0x478>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360e:	f7fe f985 	bl	800191c <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003616:	f7fe f981 	bl	800191c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e05c      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003628:	4b11      	ldr	r3, [pc, #68]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x416>
 8003634:	e054      	b.n	80036e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003636:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <HAL_RCC_OscConfig+0x478>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fe f96e 	bl	800191c <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003644:	f7fe f96a 	bl	800191c <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e045      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003656:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <HAL_RCC_OscConfig+0x470>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x444>
 8003662:	e03d      	b.n	80036e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d107      	bne.n	800367c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e038      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
 8003670:	40023800 	.word	0x40023800
 8003674:	40007000 	.word	0x40007000
 8003678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800367c:	4b1b      	ldr	r3, [pc, #108]	@ (80036ec <HAL_RCC_OscConfig+0x4ec>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d028      	beq.n	80036dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d121      	bne.n	80036dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d11a      	bne.n	80036dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036ac:	4013      	ands	r3, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d111      	bne.n	80036dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	3b01      	subs	r3, #1
 80036c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d107      	bne.n	80036dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800

080036f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0cc      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003704:	4b68      	ldr	r3, [pc, #416]	@ (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d90c      	bls.n	800372c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003712:	4b65      	ldr	r3, [pc, #404]	@ (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	4b63      	ldr	r3, [pc, #396]	@ (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0b8      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d020      	beq.n	800377a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003744:	4b59      	ldr	r3, [pc, #356]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	4a58      	ldr	r2, [pc, #352]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800374e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800375c:	4b53      	ldr	r3, [pc, #332]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	4a52      	ldr	r2, [pc, #328]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003768:	4b50      	ldr	r3, [pc, #320]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	494d      	ldr	r1, [pc, #308]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d044      	beq.n	8003810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378e:	4b47      	ldr	r3, [pc, #284]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d119      	bne.n	80037ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e07f      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d003      	beq.n	80037ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d107      	bne.n	80037be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ae:	4b3f      	ldr	r3, [pc, #252]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e06f      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037be:	4b3b      	ldr	r3, [pc, #236]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e067      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ce:	4b37      	ldr	r3, [pc, #220]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f023 0203 	bic.w	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4934      	ldr	r1, [pc, #208]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e0:	f7fe f89c 	bl	800191c <HAL_GetTick>
 80037e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e8:	f7fe f898 	bl	800191c <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e04f      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	4b2b      	ldr	r3, [pc, #172]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 020c 	and.w	r2, r3, #12
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	429a      	cmp	r2, r3
 800380e:	d1eb      	bne.n	80037e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003810:	4b25      	ldr	r3, [pc, #148]	@ (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d20c      	bcs.n	8003838 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b22      	ldr	r3, [pc, #136]	@ (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b20      	ldr	r3, [pc, #128]	@ (80038a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e032      	b.n	800389e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003844:	4b19      	ldr	r3, [pc, #100]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4916      	ldr	r1, [pc, #88]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003862:	4b12      	ldr	r3, [pc, #72]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	490e      	ldr	r1, [pc, #56]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003876:	f000 f821 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 800387a:	4602      	mov	r2, r0
 800387c:	4b0b      	ldr	r3, [pc, #44]	@ (80038ac <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	490a      	ldr	r1, [pc, #40]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003888:	5ccb      	ldrb	r3, [r1, r3]
 800388a:	fa22 f303 	lsr.w	r3, r2, r3
 800388e:	4a09      	ldr	r2, [pc, #36]	@ (80038b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003892:	4b09      	ldr	r3, [pc, #36]	@ (80038b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd fffc 	bl	8001894 <HAL_InitTick>

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40023c00 	.word	0x40023c00
 80038ac:	40023800 	.word	0x40023800
 80038b0:	080089e8 	.word	0x080089e8
 80038b4:	20000000 	.word	0x20000000
 80038b8:	20000004 	.word	0x20000004

080038bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c0:	b094      	sub	sp, #80	@ 0x50
 80038c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038d4:	4b79      	ldr	r3, [pc, #484]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x200>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 030c 	and.w	r3, r3, #12
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d00d      	beq.n	80038fc <HAL_RCC_GetSysClockFreq+0x40>
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	f200 80e1 	bhi.w	8003aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x34>
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d003      	beq.n	80038f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ee:	e0db      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038f0:	4b73      	ldr	r3, [pc, #460]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 80038f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038f4:	e0db      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038f6:	4b73      	ldr	r3, [pc, #460]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x208>)
 80038f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038fa:	e0d8      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038fc:	4b6f      	ldr	r3, [pc, #444]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x200>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003904:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003906:	4b6d      	ldr	r3, [pc, #436]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x200>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d063      	beq.n	80039da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003912:	4b6a      	ldr	r3, [pc, #424]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x200>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	099b      	lsrs	r3, r3, #6
 8003918:	2200      	movs	r2, #0
 800391a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800391c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800391e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003924:	633b      	str	r3, [r7, #48]	@ 0x30
 8003926:	2300      	movs	r3, #0
 8003928:	637b      	str	r3, [r7, #52]	@ 0x34
 800392a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800392e:	4622      	mov	r2, r4
 8003930:	462b      	mov	r3, r5
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	f04f 0100 	mov.w	r1, #0
 800393a:	0159      	lsls	r1, r3, #5
 800393c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003940:	0150      	lsls	r0, r2, #5
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4621      	mov	r1, r4
 8003948:	1a51      	subs	r1, r2, r1
 800394a:	6139      	str	r1, [r7, #16]
 800394c:	4629      	mov	r1, r5
 800394e:	eb63 0301 	sbc.w	r3, r3, r1
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003960:	4659      	mov	r1, fp
 8003962:	018b      	lsls	r3, r1, #6
 8003964:	4651      	mov	r1, sl
 8003966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800396a:	4651      	mov	r1, sl
 800396c:	018a      	lsls	r2, r1, #6
 800396e:	4651      	mov	r1, sl
 8003970:	ebb2 0801 	subs.w	r8, r2, r1
 8003974:	4659      	mov	r1, fp
 8003976:	eb63 0901 	sbc.w	r9, r3, r1
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800398a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800398e:	4690      	mov	r8, r2
 8003990:	4699      	mov	r9, r3
 8003992:	4623      	mov	r3, r4
 8003994:	eb18 0303 	adds.w	r3, r8, r3
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	462b      	mov	r3, r5
 800399c:	eb49 0303 	adc.w	r3, r9, r3
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039ae:	4629      	mov	r1, r5
 80039b0:	024b      	lsls	r3, r1, #9
 80039b2:	4621      	mov	r1, r4
 80039b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039b8:	4621      	mov	r1, r4
 80039ba:	024a      	lsls	r2, r1, #9
 80039bc:	4610      	mov	r0, r2
 80039be:	4619      	mov	r1, r3
 80039c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039c2:	2200      	movs	r2, #0
 80039c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039cc:	f7fc fc50 	bl	8000270 <__aeabi_uldivmod>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4613      	mov	r3, r2
 80039d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039d8:	e058      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039da:	4b38      	ldr	r3, [pc, #224]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x200>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	099b      	lsrs	r3, r3, #6
 80039e0:	2200      	movs	r2, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	4611      	mov	r1, r2
 80039e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039ea:	623b      	str	r3, [r7, #32]
 80039ec:	2300      	movs	r3, #0
 80039ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80039f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039f4:	4642      	mov	r2, r8
 80039f6:	464b      	mov	r3, r9
 80039f8:	f04f 0000 	mov.w	r0, #0
 80039fc:	f04f 0100 	mov.w	r1, #0
 8003a00:	0159      	lsls	r1, r3, #5
 8003a02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a06:	0150      	lsls	r0, r2, #5
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a12:	4649      	mov	r1, r9
 8003a14:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a2c:	ebb2 040a 	subs.w	r4, r2, sl
 8003a30:	eb63 050b 	sbc.w	r5, r3, fp
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	00eb      	lsls	r3, r5, #3
 8003a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a42:	00e2      	lsls	r2, r4, #3
 8003a44:	4614      	mov	r4, r2
 8003a46:	461d      	mov	r5, r3
 8003a48:	4643      	mov	r3, r8
 8003a4a:	18e3      	adds	r3, r4, r3
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	464b      	mov	r3, r9
 8003a50:	eb45 0303 	adc.w	r3, r5, r3
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a62:	4629      	mov	r1, r5
 8003a64:	028b      	lsls	r3, r1, #10
 8003a66:	4621      	mov	r1, r4
 8003a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	028a      	lsls	r2, r1, #10
 8003a70:	4610      	mov	r0, r2
 8003a72:	4619      	mov	r1, r3
 8003a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a76:	2200      	movs	r2, #0
 8003a78:	61bb      	str	r3, [r7, #24]
 8003a7a:	61fa      	str	r2, [r7, #28]
 8003a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a80:	f7fc fbf6 	bl	8000270 <__aeabi_uldivmod>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4613      	mov	r3, r2
 8003a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	0c1b      	lsrs	r3, r3, #16
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	3301      	adds	r3, #1
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003aa6:	e002      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aa8:	4b05      	ldr	r3, [pc, #20]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3750      	adds	r7, #80	@ 0x50
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	00f42400 	.word	0x00f42400
 8003ac4:	007a1200 	.word	0x007a1200

08003ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003acc:	4b03      	ldr	r3, [pc, #12]	@ (8003adc <HAL_RCC_GetHCLKFreq+0x14>)
 8003ace:	681b      	ldr	r3, [r3, #0]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000000 	.word	0x20000000

08003ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ae4:	f7ff fff0 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4b05      	ldr	r3, [pc, #20]	@ (8003b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	0a9b      	lsrs	r3, r3, #10
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	4903      	ldr	r1, [pc, #12]	@ (8003b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af6:	5ccb      	ldrb	r3, [r1, r3]
 8003af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40023800 	.word	0x40023800
 8003b04:	080089f8 	.word	0x080089f8

08003b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b0c:	f7ff ffdc 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8003b10:	4602      	mov	r2, r0
 8003b12:	4b05      	ldr	r3, [pc, #20]	@ (8003b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	0b5b      	lsrs	r3, r3, #13
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	4903      	ldr	r1, [pc, #12]	@ (8003b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b1e:	5ccb      	ldrb	r3, [r1, r3]
 8003b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	080089f8 	.word	0x080089f8

08003b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e07b      	b.n	8003c3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d108      	bne.n	8003b5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b52:	d009      	beq.n	8003b68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	61da      	str	r2, [r3, #28]
 8003b5a:	e005      	b.n	8003b68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fd fc90 	bl	80014a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bec:	ea42 0103 	orr.w	r1, r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	f003 0104 	and.w	r1, r3, #4
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	f003 0210 	and.w	r2, r3, #16
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b088      	sub	sp, #32
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c52:	f7fd fe63 	bl	800191c <HAL_GetTick>
 8003c56:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003c58:	88fb      	ldrh	r3, [r7, #6]
 8003c5a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d001      	beq.n	8003c6c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e12a      	b.n	8003ec2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_SPI_Transmit+0x36>
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e122      	b.n	8003ec2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_SPI_Transmit+0x48>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e11b      	b.n	8003ec2 <HAL_SPI_Transmit+0x280>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2203      	movs	r2, #3
 8003c96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	88fa      	ldrh	r2, [r7, #6]
 8003caa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	88fa      	ldrh	r2, [r7, #6]
 8003cb0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cd8:	d10f      	bne.n	8003cfa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ce8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d04:	2b40      	cmp	r3, #64	@ 0x40
 8003d06:	d007      	beq.n	8003d18 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d20:	d152      	bne.n	8003dc8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_SPI_Transmit+0xee>
 8003d2a:	8b7b      	ldrh	r3, [r7, #26]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d145      	bne.n	8003dbc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d34:	881a      	ldrh	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d40:	1c9a      	adds	r2, r3, #2
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d54:	e032      	b.n	8003dbc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d112      	bne.n	8003d8a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d68:	881a      	ldrh	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d74:	1c9a      	adds	r2, r3, #2
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d88:	e018      	b.n	8003dbc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d8a:	f7fd fdc7 	bl	800191c <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d803      	bhi.n	8003da2 <HAL_SPI_Transmit+0x160>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d102      	bne.n	8003da8 <HAL_SPI_Transmit+0x166>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e082      	b.n	8003ec2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1c7      	bne.n	8003d56 <HAL_SPI_Transmit+0x114>
 8003dc6:	e053      	b.n	8003e70 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_SPI_Transmit+0x194>
 8003dd0:	8b7b      	ldrh	r3, [r7, #26]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d147      	bne.n	8003e66 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	330c      	adds	r3, #12
 8003de0:	7812      	ldrb	r2, [r2, #0]
 8003de2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003dfc:	e033      	b.n	8003e66 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d113      	bne.n	8003e34 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	330c      	adds	r3, #12
 8003e16:	7812      	ldrb	r2, [r2, #0]
 8003e18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e32:	e018      	b.n	8003e66 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e34:	f7fd fd72 	bl	800191c <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d803      	bhi.n	8003e4c <HAL_SPI_Transmit+0x20a>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4a:	d102      	bne.n	8003e52 <HAL_SPI_Transmit+0x210>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e02d      	b.n	8003ec2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1c6      	bne.n	8003dfe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	6839      	ldr	r1, [r7, #0]
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 f8b1 	bl	8003fdc <SPI_EndRxTxTransaction>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10a      	bne.n	8003ea4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
  }
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b088      	sub	sp, #32
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003edc:	f7fd fd1e 	bl	800191c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	4413      	add	r3, r2
 8003eea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003eec:	f7fd fd16 	bl	800191c <HAL_GetTick>
 8003ef0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ef2:	4b39      	ldr	r3, [pc, #228]	@ (8003fd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	015b      	lsls	r3, r3, #5
 8003ef8:	0d1b      	lsrs	r3, r3, #20
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	fb02 f303 	mul.w	r3, r2, r3
 8003f00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f02:	e055      	b.n	8003fb0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0a:	d051      	beq.n	8003fb0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f0c:	f7fd fd06 	bl	800191c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d902      	bls.n	8003f22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d13d      	bne.n	8003f9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f3a:	d111      	bne.n	8003f60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f44:	d004      	beq.n	8003f50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4e:	d107      	bne.n	8003f60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f68:	d10f      	bne.n	8003f8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e018      	b.n	8003fd0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61fb      	str	r3, [r7, #28]
 8003fa8:	e002      	b.n	8003fb0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d19a      	bne.n	8003f04 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3720      	adds	r7, #32
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000000 	.word	0x20000000

08003fdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	2102      	movs	r1, #2
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f7ff ff6a 	bl	8003ecc <SPI_WaitFlagStateUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004002:	f043 0220 	orr.w	r2, r3, #32
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e032      	b.n	8004074 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800400e:	4b1b      	ldr	r3, [pc, #108]	@ (800407c <SPI_EndRxTxTransaction+0xa0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1b      	ldr	r2, [pc, #108]	@ (8004080 <SPI_EndRxTxTransaction+0xa4>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	0d5b      	lsrs	r3, r3, #21
 800401a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800402c:	d112      	bne.n	8004054 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2200      	movs	r2, #0
 8004036:	2180      	movs	r1, #128	@ 0x80
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f7ff ff47 	bl	8003ecc <SPI_WaitFlagStateUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d016      	beq.n	8004072 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004048:	f043 0220 	orr.w	r2, r3, #32
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e00f      	b.n	8004074 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	3b01      	subs	r3, #1
 800405e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406a:	2b80      	cmp	r3, #128	@ 0x80
 800406c:	d0f2      	beq.n	8004054 <SPI_EndRxTxTransaction+0x78>
 800406e:	e000      	b.n	8004072 <SPI_EndRxTxTransaction+0x96>
        break;
 8004070:	bf00      	nop
  }

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000000 	.word	0x20000000
 8004080:	165e9f81 	.word	0x165e9f81

08004084 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e042      	b.n	800411c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fd fa7a 	bl	80015a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2224      	movs	r2, #36	@ 0x24
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f973 	bl	80043b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08a      	sub	sp, #40	@ 0x28
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	4613      	mov	r3, r2
 8004132:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b20      	cmp	r3, #32
 8004142:	d175      	bne.n	8004230 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_UART_Transmit+0x2c>
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e06e      	b.n	8004232 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2221      	movs	r2, #33	@ 0x21
 800415e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004162:	f7fd fbdb 	bl	800191c <HAL_GetTick>
 8004166:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	88fa      	ldrh	r2, [r7, #6]
 800416c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	88fa      	ldrh	r2, [r7, #6]
 8004172:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800417c:	d108      	bne.n	8004190 <HAL_UART_Transmit+0x6c>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d104      	bne.n	8004190 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	e003      	b.n	8004198 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004194:	2300      	movs	r3, #0
 8004196:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004198:	e02e      	b.n	80041f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2200      	movs	r2, #0
 80041a2:	2180      	movs	r1, #128	@ 0x80
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f848 	bl	800423a <UART_WaitOnFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e03a      	b.n	8004232 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10b      	bne.n	80041da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	3302      	adds	r3, #2
 80041d6:	61bb      	str	r3, [r7, #24]
 80041d8:	e007      	b.n	80041ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	781a      	ldrb	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	3301      	adds	r3, #1
 80041e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1cb      	bne.n	800419a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2200      	movs	r2, #0
 800420a:	2140      	movs	r1, #64	@ 0x40
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f814 	bl	800423a <UART_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e006      	b.n	8004232 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	e000      	b.n	8004232 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004230:	2302      	movs	r3, #2
  }
}
 8004232:	4618      	mov	r0, r3
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b086      	sub	sp, #24
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	4613      	mov	r3, r2
 8004248:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424a:	e03b      	b.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d037      	beq.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004254:	f7fd fb62 	bl	800191c <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	6a3a      	ldr	r2, [r7, #32]
 8004260:	429a      	cmp	r2, r3
 8004262:	d302      	bcc.n	800426a <UART_WaitOnFlagUntilTimeout+0x30>
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e03a      	b.n	80042e4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d023      	beq.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b80      	cmp	r3, #128	@ 0x80
 8004280:	d020      	beq.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b40      	cmp	r3, #64	@ 0x40
 8004286:	d01d      	beq.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b08      	cmp	r3, #8
 8004294:	d116      	bne.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f81d 	bl	80042ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2208      	movs	r2, #8
 80042b6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e00f      	b.n	80042e4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	4013      	ands	r3, r2
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	bf0c      	ite	eq
 80042d4:	2301      	moveq	r3, #1
 80042d6:	2300      	movne	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	461a      	mov	r2, r3
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d0b4      	beq.n	800424c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b095      	sub	sp, #84	@ 0x54
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	330c      	adds	r3, #12
 80042fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004306:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800430a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	330c      	adds	r3, #12
 8004312:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004314:	643a      	str	r2, [r7, #64]	@ 0x40
 8004316:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800431a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800431c:	e841 2300 	strex	r3, r2, [r1]
 8004320:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e5      	bne.n	80042f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3314      	adds	r3, #20
 800432e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	61fb      	str	r3, [r7, #28]
   return(result);
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f023 0301 	bic.w	r3, r3, #1
 800433e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3314      	adds	r3, #20
 8004346:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004348:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800434a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800434e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e5      	bne.n	8004328 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004360:	2b01      	cmp	r3, #1
 8004362:	d119      	bne.n	8004398 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	330c      	adds	r3, #12
 800436a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	60bb      	str	r3, [r7, #8]
   return(result);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f023 0310 	bic.w	r3, r3, #16
 800437a:	647b      	str	r3, [r7, #68]	@ 0x44
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	330c      	adds	r3, #12
 8004382:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004384:	61ba      	str	r2, [r7, #24]
 8004386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6979      	ldr	r1, [r7, #20]
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	613b      	str	r3, [r7, #16]
   return(result);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e5      	bne.n	8004364 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80043a6:	bf00      	nop
 80043a8:	3754      	adds	r7, #84	@ 0x54
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b8:	b0c0      	sub	sp, #256	@ 0x100
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d0:	68d9      	ldr	r1, [r3, #12]
 80043d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	ea40 0301 	orr.w	r3, r0, r1
 80043dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800440c:	f021 010c 	bic.w	r1, r1, #12
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800441a:	430b      	orrs	r3, r1
 800441c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800441e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800442a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442e:	6999      	ldr	r1, [r3, #24]
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	ea40 0301 	orr.w	r3, r0, r1
 800443a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4b8f      	ldr	r3, [pc, #572]	@ (8004680 <UART_SetConfig+0x2cc>)
 8004444:	429a      	cmp	r2, r3
 8004446:	d005      	beq.n	8004454 <UART_SetConfig+0xa0>
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4b8d      	ldr	r3, [pc, #564]	@ (8004684 <UART_SetConfig+0x2d0>)
 8004450:	429a      	cmp	r2, r3
 8004452:	d104      	bne.n	800445e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004454:	f7ff fb58 	bl	8003b08 <HAL_RCC_GetPCLK2Freq>
 8004458:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800445c:	e003      	b.n	8004466 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800445e:	f7ff fb3f 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 8004462:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004470:	f040 810c 	bne.w	800468c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004478:	2200      	movs	r2, #0
 800447a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800447e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004482:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004486:	4622      	mov	r2, r4
 8004488:	462b      	mov	r3, r5
 800448a:	1891      	adds	r1, r2, r2
 800448c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800448e:	415b      	adcs	r3, r3
 8004490:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004492:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004496:	4621      	mov	r1, r4
 8004498:	eb12 0801 	adds.w	r8, r2, r1
 800449c:	4629      	mov	r1, r5
 800449e:	eb43 0901 	adc.w	r9, r3, r1
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044b6:	4690      	mov	r8, r2
 80044b8:	4699      	mov	r9, r3
 80044ba:	4623      	mov	r3, r4
 80044bc:	eb18 0303 	adds.w	r3, r8, r3
 80044c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044c4:	462b      	mov	r3, r5
 80044c6:	eb49 0303 	adc.w	r3, r9, r3
 80044ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044e2:	460b      	mov	r3, r1
 80044e4:	18db      	adds	r3, r3, r3
 80044e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80044e8:	4613      	mov	r3, r2
 80044ea:	eb42 0303 	adc.w	r3, r2, r3
 80044ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80044f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80044f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80044f8:	f7fb feba 	bl	8000270 <__aeabi_uldivmod>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4b61      	ldr	r3, [pc, #388]	@ (8004688 <UART_SetConfig+0x2d4>)
 8004502:	fba3 2302 	umull	r2, r3, r3, r2
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	011c      	lsls	r4, r3, #4
 800450a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800450e:	2200      	movs	r2, #0
 8004510:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004514:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004518:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800451c:	4642      	mov	r2, r8
 800451e:	464b      	mov	r3, r9
 8004520:	1891      	adds	r1, r2, r2
 8004522:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004524:	415b      	adcs	r3, r3
 8004526:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004528:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800452c:	4641      	mov	r1, r8
 800452e:	eb12 0a01 	adds.w	sl, r2, r1
 8004532:	4649      	mov	r1, r9
 8004534:	eb43 0b01 	adc.w	fp, r3, r1
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004544:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004548:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800454c:	4692      	mov	sl, r2
 800454e:	469b      	mov	fp, r3
 8004550:	4643      	mov	r3, r8
 8004552:	eb1a 0303 	adds.w	r3, sl, r3
 8004556:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800455a:	464b      	mov	r3, r9
 800455c:	eb4b 0303 	adc.w	r3, fp, r3
 8004560:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004570:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004574:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004578:	460b      	mov	r3, r1
 800457a:	18db      	adds	r3, r3, r3
 800457c:	643b      	str	r3, [r7, #64]	@ 0x40
 800457e:	4613      	mov	r3, r2
 8004580:	eb42 0303 	adc.w	r3, r2, r3
 8004584:	647b      	str	r3, [r7, #68]	@ 0x44
 8004586:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800458a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800458e:	f7fb fe6f 	bl	8000270 <__aeabi_uldivmod>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4611      	mov	r1, r2
 8004598:	4b3b      	ldr	r3, [pc, #236]	@ (8004688 <UART_SetConfig+0x2d4>)
 800459a:	fba3 2301 	umull	r2, r3, r3, r1
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	2264      	movs	r2, #100	@ 0x64
 80045a2:	fb02 f303 	mul.w	r3, r2, r3
 80045a6:	1acb      	subs	r3, r1, r3
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045ae:	4b36      	ldr	r3, [pc, #216]	@ (8004688 <UART_SetConfig+0x2d4>)
 80045b0:	fba3 2302 	umull	r2, r3, r3, r2
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045bc:	441c      	add	r4, r3
 80045be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045d0:	4642      	mov	r2, r8
 80045d2:	464b      	mov	r3, r9
 80045d4:	1891      	adds	r1, r2, r2
 80045d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045d8:	415b      	adcs	r3, r3
 80045da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045e0:	4641      	mov	r1, r8
 80045e2:	1851      	adds	r1, r2, r1
 80045e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80045e6:	4649      	mov	r1, r9
 80045e8:	414b      	adcs	r3, r1
 80045ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80045f8:	4659      	mov	r1, fp
 80045fa:	00cb      	lsls	r3, r1, #3
 80045fc:	4651      	mov	r1, sl
 80045fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004602:	4651      	mov	r1, sl
 8004604:	00ca      	lsls	r2, r1, #3
 8004606:	4610      	mov	r0, r2
 8004608:	4619      	mov	r1, r3
 800460a:	4603      	mov	r3, r0
 800460c:	4642      	mov	r2, r8
 800460e:	189b      	adds	r3, r3, r2
 8004610:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004614:	464b      	mov	r3, r9
 8004616:	460a      	mov	r2, r1
 8004618:	eb42 0303 	adc.w	r3, r2, r3
 800461c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800462c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004630:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004634:	460b      	mov	r3, r1
 8004636:	18db      	adds	r3, r3, r3
 8004638:	62bb      	str	r3, [r7, #40]	@ 0x28
 800463a:	4613      	mov	r3, r2
 800463c:	eb42 0303 	adc.w	r3, r2, r3
 8004640:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004642:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004646:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800464a:	f7fb fe11 	bl	8000270 <__aeabi_uldivmod>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4b0d      	ldr	r3, [pc, #52]	@ (8004688 <UART_SetConfig+0x2d4>)
 8004654:	fba3 1302 	umull	r1, r3, r3, r2
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	2164      	movs	r1, #100	@ 0x64
 800465c:	fb01 f303 	mul.w	r3, r1, r3
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	3332      	adds	r3, #50	@ 0x32
 8004666:	4a08      	ldr	r2, [pc, #32]	@ (8004688 <UART_SetConfig+0x2d4>)
 8004668:	fba2 2303 	umull	r2, r3, r2, r3
 800466c:	095b      	lsrs	r3, r3, #5
 800466e:	f003 0207 	and.w	r2, r3, #7
 8004672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4422      	add	r2, r4
 800467a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800467c:	e106      	b.n	800488c <UART_SetConfig+0x4d8>
 800467e:	bf00      	nop
 8004680:	40011000 	.word	0x40011000
 8004684:	40011400 	.word	0x40011400
 8004688:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800468c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004690:	2200      	movs	r2, #0
 8004692:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004696:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800469a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800469e:	4642      	mov	r2, r8
 80046a0:	464b      	mov	r3, r9
 80046a2:	1891      	adds	r1, r2, r2
 80046a4:	6239      	str	r1, [r7, #32]
 80046a6:	415b      	adcs	r3, r3
 80046a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046ae:	4641      	mov	r1, r8
 80046b0:	1854      	adds	r4, r2, r1
 80046b2:	4649      	mov	r1, r9
 80046b4:	eb43 0501 	adc.w	r5, r3, r1
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	00eb      	lsls	r3, r5, #3
 80046c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046c6:	00e2      	lsls	r2, r4, #3
 80046c8:	4614      	mov	r4, r2
 80046ca:	461d      	mov	r5, r3
 80046cc:	4643      	mov	r3, r8
 80046ce:	18e3      	adds	r3, r4, r3
 80046d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046d4:	464b      	mov	r3, r9
 80046d6:	eb45 0303 	adc.w	r3, r5, r3
 80046da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046fa:	4629      	mov	r1, r5
 80046fc:	008b      	lsls	r3, r1, #2
 80046fe:	4621      	mov	r1, r4
 8004700:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004704:	4621      	mov	r1, r4
 8004706:	008a      	lsls	r2, r1, #2
 8004708:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800470c:	f7fb fdb0 	bl	8000270 <__aeabi_uldivmod>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4b60      	ldr	r3, [pc, #384]	@ (8004898 <UART_SetConfig+0x4e4>)
 8004716:	fba3 2302 	umull	r2, r3, r3, r2
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	011c      	lsls	r4, r3, #4
 800471e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004722:	2200      	movs	r2, #0
 8004724:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004728:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800472c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004730:	4642      	mov	r2, r8
 8004732:	464b      	mov	r3, r9
 8004734:	1891      	adds	r1, r2, r2
 8004736:	61b9      	str	r1, [r7, #24]
 8004738:	415b      	adcs	r3, r3
 800473a:	61fb      	str	r3, [r7, #28]
 800473c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004740:	4641      	mov	r1, r8
 8004742:	1851      	adds	r1, r2, r1
 8004744:	6139      	str	r1, [r7, #16]
 8004746:	4649      	mov	r1, r9
 8004748:	414b      	adcs	r3, r1
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004758:	4659      	mov	r1, fp
 800475a:	00cb      	lsls	r3, r1, #3
 800475c:	4651      	mov	r1, sl
 800475e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004762:	4651      	mov	r1, sl
 8004764:	00ca      	lsls	r2, r1, #3
 8004766:	4610      	mov	r0, r2
 8004768:	4619      	mov	r1, r3
 800476a:	4603      	mov	r3, r0
 800476c:	4642      	mov	r2, r8
 800476e:	189b      	adds	r3, r3, r2
 8004770:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004774:	464b      	mov	r3, r9
 8004776:	460a      	mov	r2, r1
 8004778:	eb42 0303 	adc.w	r3, r2, r3
 800477c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	67bb      	str	r3, [r7, #120]	@ 0x78
 800478a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004798:	4649      	mov	r1, r9
 800479a:	008b      	lsls	r3, r1, #2
 800479c:	4641      	mov	r1, r8
 800479e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047a2:	4641      	mov	r1, r8
 80047a4:	008a      	lsls	r2, r1, #2
 80047a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047aa:	f7fb fd61 	bl	8000270 <__aeabi_uldivmod>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4611      	mov	r1, r2
 80047b4:	4b38      	ldr	r3, [pc, #224]	@ (8004898 <UART_SetConfig+0x4e4>)
 80047b6:	fba3 2301 	umull	r2, r3, r3, r1
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	2264      	movs	r2, #100	@ 0x64
 80047be:	fb02 f303 	mul.w	r3, r2, r3
 80047c2:	1acb      	subs	r3, r1, r3
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	3332      	adds	r3, #50	@ 0x32
 80047c8:	4a33      	ldr	r2, [pc, #204]	@ (8004898 <UART_SetConfig+0x4e4>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047d4:	441c      	add	r4, r3
 80047d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047da:	2200      	movs	r2, #0
 80047dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80047de:	677a      	str	r2, [r7, #116]	@ 0x74
 80047e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047e4:	4642      	mov	r2, r8
 80047e6:	464b      	mov	r3, r9
 80047e8:	1891      	adds	r1, r2, r2
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	415b      	adcs	r3, r3
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047f4:	4641      	mov	r1, r8
 80047f6:	1851      	adds	r1, r2, r1
 80047f8:	6039      	str	r1, [r7, #0]
 80047fa:	4649      	mov	r1, r9
 80047fc:	414b      	adcs	r3, r1
 80047fe:	607b      	str	r3, [r7, #4]
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800480c:	4659      	mov	r1, fp
 800480e:	00cb      	lsls	r3, r1, #3
 8004810:	4651      	mov	r1, sl
 8004812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004816:	4651      	mov	r1, sl
 8004818:	00ca      	lsls	r2, r1, #3
 800481a:	4610      	mov	r0, r2
 800481c:	4619      	mov	r1, r3
 800481e:	4603      	mov	r3, r0
 8004820:	4642      	mov	r2, r8
 8004822:	189b      	adds	r3, r3, r2
 8004824:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004826:	464b      	mov	r3, r9
 8004828:	460a      	mov	r2, r1
 800482a:	eb42 0303 	adc.w	r3, r2, r3
 800482e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	663b      	str	r3, [r7, #96]	@ 0x60
 800483a:	667a      	str	r2, [r7, #100]	@ 0x64
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004848:	4649      	mov	r1, r9
 800484a:	008b      	lsls	r3, r1, #2
 800484c:	4641      	mov	r1, r8
 800484e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004852:	4641      	mov	r1, r8
 8004854:	008a      	lsls	r2, r1, #2
 8004856:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800485a:	f7fb fd09 	bl	8000270 <__aeabi_uldivmod>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4b0d      	ldr	r3, [pc, #52]	@ (8004898 <UART_SetConfig+0x4e4>)
 8004864:	fba3 1302 	umull	r1, r3, r3, r2
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	2164      	movs	r1, #100	@ 0x64
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	3332      	adds	r3, #50	@ 0x32
 8004876:	4a08      	ldr	r2, [pc, #32]	@ (8004898 <UART_SetConfig+0x4e4>)
 8004878:	fba2 2303 	umull	r2, r3, r2, r3
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	f003 020f 	and.w	r2, r3, #15
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4422      	add	r2, r4
 800488a:	609a      	str	r2, [r3, #8]
}
 800488c:	bf00      	nop
 800488e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004892:	46bd      	mov	sp, r7
 8004894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004898:	51eb851f 	.word	0x51eb851f

0800489c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800489c:	b084      	sub	sp, #16
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	f107 001c 	add.w	r0, r7, #28
 80048aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d123      	bne.n	80048fe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80048ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d105      	bne.n	80048f2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fdbc 	bl	8005470 <USB_CoreReset>
 80048f8:	4603      	mov	r3, r0
 80048fa:	73fb      	strb	r3, [r7, #15]
 80048fc:	e01b      	b.n	8004936 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fdb0 	bl	8005470 <USB_CoreReset>
 8004910:	4603      	mov	r3, r0
 8004912:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004914:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004918:	2b00      	cmp	r3, #0
 800491a:	d106      	bne.n	800492a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004920:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	639a      	str	r2, [r3, #56]	@ 0x38
 8004928:	e005      	b.n	8004936 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004936:	7fbb      	ldrb	r3, [r7, #30]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d10b      	bne.n	8004954 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f043 0206 	orr.w	r2, r3, #6
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f043 0220 	orr.w	r2, r3, #32
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004954:	7bfb      	ldrb	r3, [r7, #15]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004960:	b004      	add	sp, #16
 8004962:	4770      	bx	lr

08004964 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	4613      	mov	r3, r2
 8004970:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d165      	bne.n	8004a44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4a41      	ldr	r2, [pc, #260]	@ (8004a80 <USB_SetTurnaroundTime+0x11c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d906      	bls.n	800498e <USB_SetTurnaroundTime+0x2a>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4a40      	ldr	r2, [pc, #256]	@ (8004a84 <USB_SetTurnaroundTime+0x120>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d202      	bcs.n	800498e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004988:	230f      	movs	r3, #15
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	e062      	b.n	8004a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4a3c      	ldr	r2, [pc, #240]	@ (8004a84 <USB_SetTurnaroundTime+0x120>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d306      	bcc.n	80049a4 <USB_SetTurnaroundTime+0x40>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	4a3b      	ldr	r2, [pc, #236]	@ (8004a88 <USB_SetTurnaroundTime+0x124>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d202      	bcs.n	80049a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800499e:	230e      	movs	r3, #14
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e057      	b.n	8004a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4a38      	ldr	r2, [pc, #224]	@ (8004a88 <USB_SetTurnaroundTime+0x124>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d306      	bcc.n	80049ba <USB_SetTurnaroundTime+0x56>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4a37      	ldr	r2, [pc, #220]	@ (8004a8c <USB_SetTurnaroundTime+0x128>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d202      	bcs.n	80049ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80049b4:	230d      	movs	r3, #13
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	e04c      	b.n	8004a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4a33      	ldr	r2, [pc, #204]	@ (8004a8c <USB_SetTurnaroundTime+0x128>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d306      	bcc.n	80049d0 <USB_SetTurnaroundTime+0x6c>
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	4a32      	ldr	r2, [pc, #200]	@ (8004a90 <USB_SetTurnaroundTime+0x12c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d802      	bhi.n	80049d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80049ca:	230c      	movs	r3, #12
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	e041      	b.n	8004a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004a90 <USB_SetTurnaroundTime+0x12c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d906      	bls.n	80049e6 <USB_SetTurnaroundTime+0x82>
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4a2e      	ldr	r2, [pc, #184]	@ (8004a94 <USB_SetTurnaroundTime+0x130>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d802      	bhi.n	80049e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80049e0:	230b      	movs	r3, #11
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	e036      	b.n	8004a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a94 <USB_SetTurnaroundTime+0x130>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d906      	bls.n	80049fc <USB_SetTurnaroundTime+0x98>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	4a29      	ldr	r2, [pc, #164]	@ (8004a98 <USB_SetTurnaroundTime+0x134>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d802      	bhi.n	80049fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80049f6:	230a      	movs	r3, #10
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	e02b      	b.n	8004a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4a26      	ldr	r2, [pc, #152]	@ (8004a98 <USB_SetTurnaroundTime+0x134>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d906      	bls.n	8004a12 <USB_SetTurnaroundTime+0xae>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4a25      	ldr	r2, [pc, #148]	@ (8004a9c <USB_SetTurnaroundTime+0x138>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d202      	bcs.n	8004a12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a0c:	2309      	movs	r3, #9
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	e020      	b.n	8004a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	4a21      	ldr	r2, [pc, #132]	@ (8004a9c <USB_SetTurnaroundTime+0x138>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d306      	bcc.n	8004a28 <USB_SetTurnaroundTime+0xc4>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	4a20      	ldr	r2, [pc, #128]	@ (8004aa0 <USB_SetTurnaroundTime+0x13c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d802      	bhi.n	8004a28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a22:	2308      	movs	r3, #8
 8004a24:	617b      	str	r3, [r7, #20]
 8004a26:	e015      	b.n	8004a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa0 <USB_SetTurnaroundTime+0x13c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d906      	bls.n	8004a3e <USB_SetTurnaroundTime+0xda>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4a1c      	ldr	r2, [pc, #112]	@ (8004aa4 <USB_SetTurnaroundTime+0x140>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d202      	bcs.n	8004a3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004a38:	2307      	movs	r3, #7
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e00a      	b.n	8004a54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004a3e:	2306      	movs	r3, #6
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	e007      	b.n	8004a54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d102      	bne.n	8004a50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004a4a:	2309      	movs	r3, #9
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	e001      	b.n	8004a54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004a50:	2309      	movs	r3, #9
 8004a52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	029b      	lsls	r3, r3, #10
 8004a68:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	00d8acbf 	.word	0x00d8acbf
 8004a84:	00e4e1c0 	.word	0x00e4e1c0
 8004a88:	00f42400 	.word	0x00f42400
 8004a8c:	01067380 	.word	0x01067380
 8004a90:	011a499f 	.word	0x011a499f
 8004a94:	01312cff 	.word	0x01312cff
 8004a98:	014ca43f 	.word	0x014ca43f
 8004a9c:	016e3600 	.word	0x016e3600
 8004aa0:	01a6ab1f 	.word	0x01a6ab1f
 8004aa4:	01e84800 	.word	0x01e84800

08004aa8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f023 0201 	bic.w	r2, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d115      	bne.n	8004b18 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004af8:	200a      	movs	r0, #10
 8004afa:	f7fc ff1b 	bl	8001934 <HAL_Delay>
      ms += 10U;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	330a      	adds	r3, #10
 8004b02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fc23 	bl	8005350 <USB_GetMode>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d01e      	beq.n	8004b4e <USB_SetCurrentMode+0x84>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2bc7      	cmp	r3, #199	@ 0xc7
 8004b14:	d9f0      	bls.n	8004af8 <USB_SetCurrentMode+0x2e>
 8004b16:	e01a      	b.n	8004b4e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d115      	bne.n	8004b4a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004b2a:	200a      	movs	r0, #10
 8004b2c:	f7fc ff02 	bl	8001934 <HAL_Delay>
      ms += 10U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	330a      	adds	r3, #10
 8004b34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fc0a 	bl	8005350 <USB_GetMode>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <USB_SetCurrentMode+0x84>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2bc7      	cmp	r3, #199	@ 0xc7
 8004b46:	d9f0      	bls.n	8004b2a <USB_SetCurrentMode+0x60>
 8004b48:	e001      	b.n	8004b4e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e005      	b.n	8004b5a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2bc8      	cmp	r3, #200	@ 0xc8
 8004b52:	d101      	bne.n	8004b58 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e000      	b.n	8004b5a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b64:	b084      	sub	sp, #16
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b086      	sub	sp, #24
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b7e:	2300      	movs	r3, #0
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	e009      	b.n	8004b98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	3340      	adds	r3, #64	@ 0x40
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	2200      	movs	r2, #0
 8004b90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	3301      	adds	r3, #1
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b0e      	cmp	r3, #14
 8004b9c:	d9f2      	bls.n	8004b84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b9e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d11c      	bne.n	8004be0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bb4:	f043 0302 	orr.w	r3, r3, #2
 8004bb8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bbe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	639a      	str	r2, [r3, #56]	@ 0x38
 8004bde:	e00b      	b.n	8004bf8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004bfe:	461a      	mov	r2, r3
 8004c00:	2300      	movs	r3, #0
 8004c02:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c04:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d10d      	bne.n	8004c28 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d104      	bne.n	8004c1e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c14:	2100      	movs	r1, #0
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f968 	bl	8004eec <USB_SetDevSpeed>
 8004c1c:	e008      	b.n	8004c30 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c1e:	2101      	movs	r1, #1
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f963 	bl	8004eec <USB_SetDevSpeed>
 8004c26:	e003      	b.n	8004c30 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c28:	2103      	movs	r1, #3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f95e 	bl	8004eec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c30:	2110      	movs	r1, #16
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f8fa 	bl	8004e2c <USB_FlushTxFifo>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f924 	bl	8004e90 <USB_FlushRxFifo>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c58:	461a      	mov	r2, r3
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c64:	461a      	mov	r2, r3
 8004c66:	2300      	movs	r3, #0
 8004c68:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c70:	461a      	mov	r2, r3
 8004c72:	2300      	movs	r3, #0
 8004c74:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	e043      	b.n	8004d04 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c92:	d118      	bne.n	8004cc6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10a      	bne.n	8004cb0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	e013      	b.n	8004cd8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004cc2:	6013      	str	r3, [r2, #0]
 8004cc4:	e008      	b.n	8004cd8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004cfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	3301      	adds	r3, #1
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004d08:	461a      	mov	r2, r3
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d3b5      	bcc.n	8004c7c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d10:	2300      	movs	r3, #0
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	e043      	b.n	8004d9e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d2c:	d118      	bne.n	8004d60 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d40:	461a      	mov	r2, r3
 8004d42:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	e013      	b.n	8004d72 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d56:	461a      	mov	r2, r3
 8004d58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	e008      	b.n	8004d72 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	2300      	movs	r3, #0
 8004d70:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d7e:	461a      	mov	r2, r3
 8004d80:	2300      	movs	r3, #0
 8004d82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d90:	461a      	mov	r2, r3
 8004d92:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004da2:	461a      	mov	r2, r3
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d3b5      	bcc.n	8004d16 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004db8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dbc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004dca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004dcc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d105      	bne.n	8004de0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f043 0210 	orr.w	r2, r3, #16
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699a      	ldr	r2, [r3, #24]
 8004de4:	4b10      	ldr	r3, [pc, #64]	@ (8004e28 <USB_DevInit+0x2c4>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004dec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	f043 0208 	orr.w	r2, r3, #8
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e00:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d107      	bne.n	8004e18 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e10:	f043 0304 	orr.w	r3, r3, #4
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e24:	b004      	add	sp, #16
 8004e26:	4770      	bx	lr
 8004e28:	803c3800 	.word	0x803c3800

08004e2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e46:	d901      	bls.n	8004e4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e01b      	b.n	8004e84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	daf2      	bge.n	8004e3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	019b      	lsls	r3, r3, #6
 8004e5c:	f043 0220 	orr.w	r2, r3, #32
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3301      	adds	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e70:	d901      	bls.n	8004e76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e006      	b.n	8004e84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d0f0      	beq.n	8004e64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ea8:	d901      	bls.n	8004eae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e018      	b.n	8004ee0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	daf2      	bge.n	8004e9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2210      	movs	r2, #16
 8004ebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ecc:	d901      	bls.n	8004ed2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e006      	b.n	8004ee0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b10      	cmp	r3, #16
 8004edc:	d0f0      	beq.n	8004ec0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	78fb      	ldrb	r3, [r7, #3]
 8004f06:	68f9      	ldr	r1, [r7, #12]
 8004f08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b087      	sub	sp, #28
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 0306 	and.w	r3, r3, #6
 8004f36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d102      	bne.n	8004f44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	75fb      	strb	r3, [r7, #23]
 8004f42:	e00a      	b.n	8004f5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d002      	beq.n	8004f50 <USB_GetDevSpeed+0x32>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b06      	cmp	r3, #6
 8004f4e:	d102      	bne.n	8004f56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004f50:	2302      	movs	r3, #2
 8004f52:	75fb      	strb	r3, [r7, #23]
 8004f54:	e001      	b.n	8004f5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004f56:	230f      	movs	r3, #15
 8004f58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d14a      	bne.n	800501c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f9e:	f040 8086 	bne.w	80050ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	7812      	ldrb	r2, [r2, #0]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fc0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004fc4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	7812      	ldrb	r2, [r2, #0]
 8004fda:	0151      	lsls	r1, r2, #5
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	440a      	add	r2, r1
 8004fe0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fe4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fe8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	3301      	adds	r3, #1
 8004fee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d902      	bls.n	8005000 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	75fb      	strb	r3, [r7, #23]
          break;
 8004ffe:	e056      	b.n	80050ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005014:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005018:	d0e7      	beq.n	8004fea <USB_EPStopXfer+0x82>
 800501a:	e048      	b.n	80050ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005030:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005034:	d13b      	bne.n	80050ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	7812      	ldrb	r2, [r2, #0]
 800504a:	0151      	lsls	r1, r2, #5
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	440a      	add	r2, r1
 8005050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005054:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005058:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	7812      	ldrb	r2, [r2, #0]
 800506e:	0151      	lsls	r1, r2, #5
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	440a      	add	r2, r1
 8005074:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005078:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800507c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3301      	adds	r3, #1
 8005082:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f242 7210 	movw	r2, #10000	@ 0x2710
 800508a:	4293      	cmp	r3, r2
 800508c:	d902      	bls.n	8005094 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	75fb      	strb	r3, [r7, #23]
          break;
 8005092:	e00c      	b.n	80050ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050ac:	d0e7      	beq.n	800507e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80050ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050bc:	b480      	push	{r7}
 80050be:	b089      	sub	sp, #36	@ 0x24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	4611      	mov	r1, r2
 80050c8:	461a      	mov	r2, r3
 80050ca:	460b      	mov	r3, r1
 80050cc:	71fb      	strb	r3, [r7, #7]
 80050ce:	4613      	mov	r3, r2
 80050d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d123      	bne.n	800512a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050e2:	88bb      	ldrh	r3, [r7, #4]
 80050e4:	3303      	adds	r3, #3
 80050e6:	089b      	lsrs	r3, r3, #2
 80050e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050ea:	2300      	movs	r3, #0
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	e018      	b.n	8005122 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050f0:	79fb      	ldrb	r3, [r7, #7]
 80050f2:	031a      	lsls	r2, r3, #12
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050fc:	461a      	mov	r2, r3
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	3301      	adds	r3, #1
 8005108:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	3301      	adds	r3, #1
 800510e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	3301      	adds	r3, #1
 8005114:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	3301      	adds	r3, #1
 800511a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	3301      	adds	r3, #1
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	429a      	cmp	r2, r3
 8005128:	d3e2      	bcc.n	80050f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3724      	adds	r7, #36	@ 0x24
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005138:	b480      	push	{r7}
 800513a:	b08b      	sub	sp, #44	@ 0x2c
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	4613      	mov	r3, r2
 8005144:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800514e:	88fb      	ldrh	r3, [r7, #6]
 8005150:	089b      	lsrs	r3, r3, #2
 8005152:	b29b      	uxth	r3, r3
 8005154:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005156:	88fb      	ldrh	r3, [r7, #6]
 8005158:	f003 0303 	and.w	r3, r3, #3
 800515c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800515e:	2300      	movs	r3, #0
 8005160:	623b      	str	r3, [r7, #32]
 8005162:	e014      	b.n	800518e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	3301      	adds	r3, #1
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	3301      	adds	r3, #1
 800517a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800517c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517e:	3301      	adds	r3, #1
 8005180:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	3301      	adds	r3, #1
 8005186:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	3301      	adds	r3, #1
 800518c:	623b      	str	r3, [r7, #32]
 800518e:	6a3a      	ldr	r2, [r7, #32]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	429a      	cmp	r2, r3
 8005194:	d3e6      	bcc.n	8005164 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005196:	8bfb      	ldrh	r3, [r7, #30]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01e      	beq.n	80051da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051a6:	461a      	mov	r2, r3
 80051a8:	f107 0310 	add.w	r3, r7, #16
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	701a      	strb	r2, [r3, #0]
      i++;
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	3301      	adds	r3, #1
 80051c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	3301      	adds	r3, #1
 80051cc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80051ce:	8bfb      	ldrh	r3, [r7, #30]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051d4:	8bfb      	ldrh	r3, [r7, #30]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1ea      	bne.n	80051b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80051dc:	4618      	mov	r0, r3
 80051de:	372c      	adds	r7, #44	@ 0x2c
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005202:	f023 0303 	bic.w	r3, r3, #3
 8005206:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005216:	f043 0302 	orr.w	r3, r3, #2
 800521a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4013      	ands	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005242:	68fb      	ldr	r3, [r7, #12]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	4013      	ands	r3, r2
 8005272:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	0c1b      	lsrs	r3, r3, #16
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	4013      	ands	r3, r2
 80052a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	b29b      	uxth	r3, r3
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	4013      	ands	r3, r2
 80052e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052e6:	68bb      	ldr	r3, [r7, #8]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005316:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
 8005324:	01db      	lsls	r3, r3, #7
 8005326:	b2db      	uxtb	r3, r3
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800532e:	78fb      	ldrb	r3, [r7, #3]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4013      	ands	r3, r2
 8005340:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005342:	68bb      	ldr	r3, [r7, #8]
}
 8005344:	4618      	mov	r0, r3
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	f003 0301 	and.w	r3, r3, #1
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005386:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800538a:	f023 0307 	bic.w	r3, r3, #7
 800538e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800539e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	460b      	mov	r3, r1
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	333c      	adds	r3, #60	@ 0x3c
 80053ca:	3304      	adds	r3, #4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4a26      	ldr	r2, [pc, #152]	@ (800546c <USB_EP0_OutStart+0xb8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d90a      	bls.n	80053ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053e8:	d101      	bne.n	80053ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	e037      	b.n	800545e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f4:	461a      	mov	r2, r3
 80053f6:	2300      	movs	r3, #0
 80053f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005408:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800540c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800541c:	f043 0318 	orr.w	r3, r3, #24
 8005420:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005430:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005434:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005436:	7afb      	ldrb	r3, [r7, #11]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d10f      	bne.n	800545c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005442:	461a      	mov	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005456:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800545a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	4f54300a 	.word	0x4f54300a

08005470 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3301      	adds	r3, #1
 8005480:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005488:	d901      	bls.n	800548e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e022      	b.n	80054d4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	daf2      	bge.n	800547c <USB_CoreReset+0xc>

  count = 10U;
 8005496:	230a      	movs	r3, #10
 8005498:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800549a:	e002      	b.n	80054a2 <USB_CoreReset+0x32>
  {
    count--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3b01      	subs	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1f9      	bne.n	800549c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	f043 0201 	orr.w	r2, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3301      	adds	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054c0:	d901      	bls.n	80054c6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e006      	b.n	80054d4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d0f0      	beq.n	80054b4 <USB_CoreReset+0x44>

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <malloc>:
 80054e0:	4b02      	ldr	r3, [pc, #8]	@ (80054ec <malloc+0xc>)
 80054e2:	4601      	mov	r1, r0
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	f000 b825 	b.w	8005534 <_malloc_r>
 80054ea:	bf00      	nop
 80054ec:	2000000c 	.word	0x2000000c

080054f0 <sbrk_aligned>:
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	4e0f      	ldr	r6, [pc, #60]	@ (8005530 <sbrk_aligned+0x40>)
 80054f4:	460c      	mov	r4, r1
 80054f6:	6831      	ldr	r1, [r6, #0]
 80054f8:	4605      	mov	r5, r0
 80054fa:	b911      	cbnz	r1, 8005502 <sbrk_aligned+0x12>
 80054fc:	f000 f8d0 	bl	80056a0 <_sbrk_r>
 8005500:	6030      	str	r0, [r6, #0]
 8005502:	4621      	mov	r1, r4
 8005504:	4628      	mov	r0, r5
 8005506:	f000 f8cb 	bl	80056a0 <_sbrk_r>
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	d103      	bne.n	8005516 <sbrk_aligned+0x26>
 800550e:	f04f 34ff 	mov.w	r4, #4294967295
 8005512:	4620      	mov	r0, r4
 8005514:	bd70      	pop	{r4, r5, r6, pc}
 8005516:	1cc4      	adds	r4, r0, #3
 8005518:	f024 0403 	bic.w	r4, r4, #3
 800551c:	42a0      	cmp	r0, r4
 800551e:	d0f8      	beq.n	8005512 <sbrk_aligned+0x22>
 8005520:	1a21      	subs	r1, r4, r0
 8005522:	4628      	mov	r0, r5
 8005524:	f000 f8bc 	bl	80056a0 <_sbrk_r>
 8005528:	3001      	adds	r0, #1
 800552a:	d1f2      	bne.n	8005512 <sbrk_aligned+0x22>
 800552c:	e7ef      	b.n	800550e <sbrk_aligned+0x1e>
 800552e:	bf00      	nop
 8005530:	200006cc 	.word	0x200006cc

08005534 <_malloc_r>:
 8005534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005538:	1ccd      	adds	r5, r1, #3
 800553a:	f025 0503 	bic.w	r5, r5, #3
 800553e:	3508      	adds	r5, #8
 8005540:	2d0c      	cmp	r5, #12
 8005542:	bf38      	it	cc
 8005544:	250c      	movcc	r5, #12
 8005546:	2d00      	cmp	r5, #0
 8005548:	4606      	mov	r6, r0
 800554a:	db01      	blt.n	8005550 <_malloc_r+0x1c>
 800554c:	42a9      	cmp	r1, r5
 800554e:	d904      	bls.n	800555a <_malloc_r+0x26>
 8005550:	230c      	movs	r3, #12
 8005552:	6033      	str	r3, [r6, #0]
 8005554:	2000      	movs	r0, #0
 8005556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800555a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005630 <_malloc_r+0xfc>
 800555e:	f000 f869 	bl	8005634 <__malloc_lock>
 8005562:	f8d8 3000 	ldr.w	r3, [r8]
 8005566:	461c      	mov	r4, r3
 8005568:	bb44      	cbnz	r4, 80055bc <_malloc_r+0x88>
 800556a:	4629      	mov	r1, r5
 800556c:	4630      	mov	r0, r6
 800556e:	f7ff ffbf 	bl	80054f0 <sbrk_aligned>
 8005572:	1c43      	adds	r3, r0, #1
 8005574:	4604      	mov	r4, r0
 8005576:	d158      	bne.n	800562a <_malloc_r+0xf6>
 8005578:	f8d8 4000 	ldr.w	r4, [r8]
 800557c:	4627      	mov	r7, r4
 800557e:	2f00      	cmp	r7, #0
 8005580:	d143      	bne.n	800560a <_malloc_r+0xd6>
 8005582:	2c00      	cmp	r4, #0
 8005584:	d04b      	beq.n	800561e <_malloc_r+0xea>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	4639      	mov	r1, r7
 800558a:	4630      	mov	r0, r6
 800558c:	eb04 0903 	add.w	r9, r4, r3
 8005590:	f000 f886 	bl	80056a0 <_sbrk_r>
 8005594:	4581      	cmp	r9, r0
 8005596:	d142      	bne.n	800561e <_malloc_r+0xea>
 8005598:	6821      	ldr	r1, [r4, #0]
 800559a:	1a6d      	subs	r5, r5, r1
 800559c:	4629      	mov	r1, r5
 800559e:	4630      	mov	r0, r6
 80055a0:	f7ff ffa6 	bl	80054f0 <sbrk_aligned>
 80055a4:	3001      	adds	r0, #1
 80055a6:	d03a      	beq.n	800561e <_malloc_r+0xea>
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	442b      	add	r3, r5
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	f8d8 3000 	ldr.w	r3, [r8]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	bb62      	cbnz	r2, 8005610 <_malloc_r+0xdc>
 80055b6:	f8c8 7000 	str.w	r7, [r8]
 80055ba:	e00f      	b.n	80055dc <_malloc_r+0xa8>
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	1b52      	subs	r2, r2, r5
 80055c0:	d420      	bmi.n	8005604 <_malloc_r+0xd0>
 80055c2:	2a0b      	cmp	r2, #11
 80055c4:	d917      	bls.n	80055f6 <_malloc_r+0xc2>
 80055c6:	1961      	adds	r1, r4, r5
 80055c8:	42a3      	cmp	r3, r4
 80055ca:	6025      	str	r5, [r4, #0]
 80055cc:	bf18      	it	ne
 80055ce:	6059      	strne	r1, [r3, #4]
 80055d0:	6863      	ldr	r3, [r4, #4]
 80055d2:	bf08      	it	eq
 80055d4:	f8c8 1000 	streq.w	r1, [r8]
 80055d8:	5162      	str	r2, [r4, r5]
 80055da:	604b      	str	r3, [r1, #4]
 80055dc:	4630      	mov	r0, r6
 80055de:	f000 f82f 	bl	8005640 <__malloc_unlock>
 80055e2:	f104 000b 	add.w	r0, r4, #11
 80055e6:	1d23      	adds	r3, r4, #4
 80055e8:	f020 0007 	bic.w	r0, r0, #7
 80055ec:	1ac2      	subs	r2, r0, r3
 80055ee:	bf1c      	itt	ne
 80055f0:	1a1b      	subne	r3, r3, r0
 80055f2:	50a3      	strne	r3, [r4, r2]
 80055f4:	e7af      	b.n	8005556 <_malloc_r+0x22>
 80055f6:	6862      	ldr	r2, [r4, #4]
 80055f8:	42a3      	cmp	r3, r4
 80055fa:	bf0c      	ite	eq
 80055fc:	f8c8 2000 	streq.w	r2, [r8]
 8005600:	605a      	strne	r2, [r3, #4]
 8005602:	e7eb      	b.n	80055dc <_malloc_r+0xa8>
 8005604:	4623      	mov	r3, r4
 8005606:	6864      	ldr	r4, [r4, #4]
 8005608:	e7ae      	b.n	8005568 <_malloc_r+0x34>
 800560a:	463c      	mov	r4, r7
 800560c:	687f      	ldr	r7, [r7, #4]
 800560e:	e7b6      	b.n	800557e <_malloc_r+0x4a>
 8005610:	461a      	mov	r2, r3
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	42a3      	cmp	r3, r4
 8005616:	d1fb      	bne.n	8005610 <_malloc_r+0xdc>
 8005618:	2300      	movs	r3, #0
 800561a:	6053      	str	r3, [r2, #4]
 800561c:	e7de      	b.n	80055dc <_malloc_r+0xa8>
 800561e:	230c      	movs	r3, #12
 8005620:	6033      	str	r3, [r6, #0]
 8005622:	4630      	mov	r0, r6
 8005624:	f000 f80c 	bl	8005640 <__malloc_unlock>
 8005628:	e794      	b.n	8005554 <_malloc_r+0x20>
 800562a:	6005      	str	r5, [r0, #0]
 800562c:	e7d6      	b.n	80055dc <_malloc_r+0xa8>
 800562e:	bf00      	nop
 8005630:	200006d0 	.word	0x200006d0

08005634 <__malloc_lock>:
 8005634:	4801      	ldr	r0, [pc, #4]	@ (800563c <__malloc_lock+0x8>)
 8005636:	f000 b86d 	b.w	8005714 <__retarget_lock_acquire_recursive>
 800563a:	bf00      	nop
 800563c:	20000810 	.word	0x20000810

08005640 <__malloc_unlock>:
 8005640:	4801      	ldr	r0, [pc, #4]	@ (8005648 <__malloc_unlock+0x8>)
 8005642:	f000 b868 	b.w	8005716 <__retarget_lock_release_recursive>
 8005646:	bf00      	nop
 8005648:	20000810 	.word	0x20000810

0800564c <siprintf>:
 800564c:	b40e      	push	{r1, r2, r3}
 800564e:	b510      	push	{r4, lr}
 8005650:	b09d      	sub	sp, #116	@ 0x74
 8005652:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005654:	9002      	str	r0, [sp, #8]
 8005656:	9006      	str	r0, [sp, #24]
 8005658:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800565c:	480a      	ldr	r0, [pc, #40]	@ (8005688 <siprintf+0x3c>)
 800565e:	9107      	str	r1, [sp, #28]
 8005660:	9104      	str	r1, [sp, #16]
 8005662:	490a      	ldr	r1, [pc, #40]	@ (800568c <siprintf+0x40>)
 8005664:	f853 2b04 	ldr.w	r2, [r3], #4
 8005668:	9105      	str	r1, [sp, #20]
 800566a:	2400      	movs	r4, #0
 800566c:	a902      	add	r1, sp, #8
 800566e:	6800      	ldr	r0, [r0, #0]
 8005670:	9301      	str	r3, [sp, #4]
 8005672:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005674:	f000 f8f6 	bl	8005864 <_svfiprintf_r>
 8005678:	9b02      	ldr	r3, [sp, #8]
 800567a:	701c      	strb	r4, [r3, #0]
 800567c:	b01d      	add	sp, #116	@ 0x74
 800567e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005682:	b003      	add	sp, #12
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	2000000c 	.word	0x2000000c
 800568c:	ffff0208 	.word	0xffff0208

08005690 <memset>:
 8005690:	4402      	add	r2, r0
 8005692:	4603      	mov	r3, r0
 8005694:	4293      	cmp	r3, r2
 8005696:	d100      	bne.n	800569a <memset+0xa>
 8005698:	4770      	bx	lr
 800569a:	f803 1b01 	strb.w	r1, [r3], #1
 800569e:	e7f9      	b.n	8005694 <memset+0x4>

080056a0 <_sbrk_r>:
 80056a0:	b538      	push	{r3, r4, r5, lr}
 80056a2:	4d06      	ldr	r5, [pc, #24]	@ (80056bc <_sbrk_r+0x1c>)
 80056a4:	2300      	movs	r3, #0
 80056a6:	4604      	mov	r4, r0
 80056a8:	4608      	mov	r0, r1
 80056aa:	602b      	str	r3, [r5, #0]
 80056ac:	f7fc f85e 	bl	800176c <_sbrk>
 80056b0:	1c43      	adds	r3, r0, #1
 80056b2:	d102      	bne.n	80056ba <_sbrk_r+0x1a>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	b103      	cbz	r3, 80056ba <_sbrk_r+0x1a>
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	bd38      	pop	{r3, r4, r5, pc}
 80056bc:	2000080c 	.word	0x2000080c

080056c0 <__errno>:
 80056c0:	4b01      	ldr	r3, [pc, #4]	@ (80056c8 <__errno+0x8>)
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	2000000c 	.word	0x2000000c

080056cc <__libc_init_array>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	4d0d      	ldr	r5, [pc, #52]	@ (8005704 <__libc_init_array+0x38>)
 80056d0:	4c0d      	ldr	r4, [pc, #52]	@ (8005708 <__libc_init_array+0x3c>)
 80056d2:	1b64      	subs	r4, r4, r5
 80056d4:	10a4      	asrs	r4, r4, #2
 80056d6:	2600      	movs	r6, #0
 80056d8:	42a6      	cmp	r6, r4
 80056da:	d109      	bne.n	80056f0 <__libc_init_array+0x24>
 80056dc:	4d0b      	ldr	r5, [pc, #44]	@ (800570c <__libc_init_array+0x40>)
 80056de:	4c0c      	ldr	r4, [pc, #48]	@ (8005710 <__libc_init_array+0x44>)
 80056e0:	f000 fba6 	bl	8005e30 <_init>
 80056e4:	1b64      	subs	r4, r4, r5
 80056e6:	10a4      	asrs	r4, r4, #2
 80056e8:	2600      	movs	r6, #0
 80056ea:	42a6      	cmp	r6, r4
 80056ec:	d105      	bne.n	80056fa <__libc_init_array+0x2e>
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
 80056f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f4:	4798      	blx	r3
 80056f6:	3601      	adds	r6, #1
 80056f8:	e7ee      	b.n	80056d8 <__libc_init_array+0xc>
 80056fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80056fe:	4798      	blx	r3
 8005700:	3601      	adds	r6, #1
 8005702:	e7f2      	b.n	80056ea <__libc_init_array+0x1e>
 8005704:	08008a3c 	.word	0x08008a3c
 8005708:	08008a3c 	.word	0x08008a3c
 800570c:	08008a3c 	.word	0x08008a3c
 8005710:	08008a40 	.word	0x08008a40

08005714 <__retarget_lock_acquire_recursive>:
 8005714:	4770      	bx	lr

08005716 <__retarget_lock_release_recursive>:
 8005716:	4770      	bx	lr

08005718 <_free_r>:
 8005718:	b538      	push	{r3, r4, r5, lr}
 800571a:	4605      	mov	r5, r0
 800571c:	2900      	cmp	r1, #0
 800571e:	d041      	beq.n	80057a4 <_free_r+0x8c>
 8005720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005724:	1f0c      	subs	r4, r1, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	bfb8      	it	lt
 800572a:	18e4      	addlt	r4, r4, r3
 800572c:	f7ff ff82 	bl	8005634 <__malloc_lock>
 8005730:	4a1d      	ldr	r2, [pc, #116]	@ (80057a8 <_free_r+0x90>)
 8005732:	6813      	ldr	r3, [r2, #0]
 8005734:	b933      	cbnz	r3, 8005744 <_free_r+0x2c>
 8005736:	6063      	str	r3, [r4, #4]
 8005738:	6014      	str	r4, [r2, #0]
 800573a:	4628      	mov	r0, r5
 800573c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005740:	f7ff bf7e 	b.w	8005640 <__malloc_unlock>
 8005744:	42a3      	cmp	r3, r4
 8005746:	d908      	bls.n	800575a <_free_r+0x42>
 8005748:	6820      	ldr	r0, [r4, #0]
 800574a:	1821      	adds	r1, r4, r0
 800574c:	428b      	cmp	r3, r1
 800574e:	bf01      	itttt	eq
 8005750:	6819      	ldreq	r1, [r3, #0]
 8005752:	685b      	ldreq	r3, [r3, #4]
 8005754:	1809      	addeq	r1, r1, r0
 8005756:	6021      	streq	r1, [r4, #0]
 8005758:	e7ed      	b.n	8005736 <_free_r+0x1e>
 800575a:	461a      	mov	r2, r3
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	b10b      	cbz	r3, 8005764 <_free_r+0x4c>
 8005760:	42a3      	cmp	r3, r4
 8005762:	d9fa      	bls.n	800575a <_free_r+0x42>
 8005764:	6811      	ldr	r1, [r2, #0]
 8005766:	1850      	adds	r0, r2, r1
 8005768:	42a0      	cmp	r0, r4
 800576a:	d10b      	bne.n	8005784 <_free_r+0x6c>
 800576c:	6820      	ldr	r0, [r4, #0]
 800576e:	4401      	add	r1, r0
 8005770:	1850      	adds	r0, r2, r1
 8005772:	4283      	cmp	r3, r0
 8005774:	6011      	str	r1, [r2, #0]
 8005776:	d1e0      	bne.n	800573a <_free_r+0x22>
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	6053      	str	r3, [r2, #4]
 800577e:	4408      	add	r0, r1
 8005780:	6010      	str	r0, [r2, #0]
 8005782:	e7da      	b.n	800573a <_free_r+0x22>
 8005784:	d902      	bls.n	800578c <_free_r+0x74>
 8005786:	230c      	movs	r3, #12
 8005788:	602b      	str	r3, [r5, #0]
 800578a:	e7d6      	b.n	800573a <_free_r+0x22>
 800578c:	6820      	ldr	r0, [r4, #0]
 800578e:	1821      	adds	r1, r4, r0
 8005790:	428b      	cmp	r3, r1
 8005792:	bf04      	itt	eq
 8005794:	6819      	ldreq	r1, [r3, #0]
 8005796:	685b      	ldreq	r3, [r3, #4]
 8005798:	6063      	str	r3, [r4, #4]
 800579a:	bf04      	itt	eq
 800579c:	1809      	addeq	r1, r1, r0
 800579e:	6021      	streq	r1, [r4, #0]
 80057a0:	6054      	str	r4, [r2, #4]
 80057a2:	e7ca      	b.n	800573a <_free_r+0x22>
 80057a4:	bd38      	pop	{r3, r4, r5, pc}
 80057a6:	bf00      	nop
 80057a8:	200006d0 	.word	0x200006d0

080057ac <__ssputs_r>:
 80057ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b0:	688e      	ldr	r6, [r1, #8]
 80057b2:	461f      	mov	r7, r3
 80057b4:	42be      	cmp	r6, r7
 80057b6:	680b      	ldr	r3, [r1, #0]
 80057b8:	4682      	mov	sl, r0
 80057ba:	460c      	mov	r4, r1
 80057bc:	4690      	mov	r8, r2
 80057be:	d82d      	bhi.n	800581c <__ssputs_r+0x70>
 80057c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057c8:	d026      	beq.n	8005818 <__ssputs_r+0x6c>
 80057ca:	6965      	ldr	r5, [r4, #20]
 80057cc:	6909      	ldr	r1, [r1, #16]
 80057ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057d2:	eba3 0901 	sub.w	r9, r3, r1
 80057d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057da:	1c7b      	adds	r3, r7, #1
 80057dc:	444b      	add	r3, r9
 80057de:	106d      	asrs	r5, r5, #1
 80057e0:	429d      	cmp	r5, r3
 80057e2:	bf38      	it	cc
 80057e4:	461d      	movcc	r5, r3
 80057e6:	0553      	lsls	r3, r2, #21
 80057e8:	d527      	bpl.n	800583a <__ssputs_r+0x8e>
 80057ea:	4629      	mov	r1, r5
 80057ec:	f7ff fea2 	bl	8005534 <_malloc_r>
 80057f0:	4606      	mov	r6, r0
 80057f2:	b360      	cbz	r0, 800584e <__ssputs_r+0xa2>
 80057f4:	6921      	ldr	r1, [r4, #16]
 80057f6:	464a      	mov	r2, r9
 80057f8:	f000 fad6 	bl	8005da8 <memcpy>
 80057fc:	89a3      	ldrh	r3, [r4, #12]
 80057fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005806:	81a3      	strh	r3, [r4, #12]
 8005808:	6126      	str	r6, [r4, #16]
 800580a:	6165      	str	r5, [r4, #20]
 800580c:	444e      	add	r6, r9
 800580e:	eba5 0509 	sub.w	r5, r5, r9
 8005812:	6026      	str	r6, [r4, #0]
 8005814:	60a5      	str	r5, [r4, #8]
 8005816:	463e      	mov	r6, r7
 8005818:	42be      	cmp	r6, r7
 800581a:	d900      	bls.n	800581e <__ssputs_r+0x72>
 800581c:	463e      	mov	r6, r7
 800581e:	6820      	ldr	r0, [r4, #0]
 8005820:	4632      	mov	r2, r6
 8005822:	4641      	mov	r1, r8
 8005824:	f000 faa6 	bl	8005d74 <memmove>
 8005828:	68a3      	ldr	r3, [r4, #8]
 800582a:	1b9b      	subs	r3, r3, r6
 800582c:	60a3      	str	r3, [r4, #8]
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	4433      	add	r3, r6
 8005832:	6023      	str	r3, [r4, #0]
 8005834:	2000      	movs	r0, #0
 8005836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800583a:	462a      	mov	r2, r5
 800583c:	f000 fac2 	bl	8005dc4 <_realloc_r>
 8005840:	4606      	mov	r6, r0
 8005842:	2800      	cmp	r0, #0
 8005844:	d1e0      	bne.n	8005808 <__ssputs_r+0x5c>
 8005846:	6921      	ldr	r1, [r4, #16]
 8005848:	4650      	mov	r0, sl
 800584a:	f7ff ff65 	bl	8005718 <_free_r>
 800584e:	230c      	movs	r3, #12
 8005850:	f8ca 3000 	str.w	r3, [sl]
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800585a:	81a3      	strh	r3, [r4, #12]
 800585c:	f04f 30ff 	mov.w	r0, #4294967295
 8005860:	e7e9      	b.n	8005836 <__ssputs_r+0x8a>
	...

08005864 <_svfiprintf_r>:
 8005864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005868:	4698      	mov	r8, r3
 800586a:	898b      	ldrh	r3, [r1, #12]
 800586c:	061b      	lsls	r3, r3, #24
 800586e:	b09d      	sub	sp, #116	@ 0x74
 8005870:	4607      	mov	r7, r0
 8005872:	460d      	mov	r5, r1
 8005874:	4614      	mov	r4, r2
 8005876:	d510      	bpl.n	800589a <_svfiprintf_r+0x36>
 8005878:	690b      	ldr	r3, [r1, #16]
 800587a:	b973      	cbnz	r3, 800589a <_svfiprintf_r+0x36>
 800587c:	2140      	movs	r1, #64	@ 0x40
 800587e:	f7ff fe59 	bl	8005534 <_malloc_r>
 8005882:	6028      	str	r0, [r5, #0]
 8005884:	6128      	str	r0, [r5, #16]
 8005886:	b930      	cbnz	r0, 8005896 <_svfiprintf_r+0x32>
 8005888:	230c      	movs	r3, #12
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	b01d      	add	sp, #116	@ 0x74
 8005892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005896:	2340      	movs	r3, #64	@ 0x40
 8005898:	616b      	str	r3, [r5, #20]
 800589a:	2300      	movs	r3, #0
 800589c:	9309      	str	r3, [sp, #36]	@ 0x24
 800589e:	2320      	movs	r3, #32
 80058a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80058a8:	2330      	movs	r3, #48	@ 0x30
 80058aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005a48 <_svfiprintf_r+0x1e4>
 80058ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058b2:	f04f 0901 	mov.w	r9, #1
 80058b6:	4623      	mov	r3, r4
 80058b8:	469a      	mov	sl, r3
 80058ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058be:	b10a      	cbz	r2, 80058c4 <_svfiprintf_r+0x60>
 80058c0:	2a25      	cmp	r2, #37	@ 0x25
 80058c2:	d1f9      	bne.n	80058b8 <_svfiprintf_r+0x54>
 80058c4:	ebba 0b04 	subs.w	fp, sl, r4
 80058c8:	d00b      	beq.n	80058e2 <_svfiprintf_r+0x7e>
 80058ca:	465b      	mov	r3, fp
 80058cc:	4622      	mov	r2, r4
 80058ce:	4629      	mov	r1, r5
 80058d0:	4638      	mov	r0, r7
 80058d2:	f7ff ff6b 	bl	80057ac <__ssputs_r>
 80058d6:	3001      	adds	r0, #1
 80058d8:	f000 80a7 	beq.w	8005a2a <_svfiprintf_r+0x1c6>
 80058dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058de:	445a      	add	r2, fp
 80058e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80058e2:	f89a 3000 	ldrb.w	r3, [sl]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 809f 	beq.w	8005a2a <_svfiprintf_r+0x1c6>
 80058ec:	2300      	movs	r3, #0
 80058ee:	f04f 32ff 	mov.w	r2, #4294967295
 80058f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058f6:	f10a 0a01 	add.w	sl, sl, #1
 80058fa:	9304      	str	r3, [sp, #16]
 80058fc:	9307      	str	r3, [sp, #28]
 80058fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005902:	931a      	str	r3, [sp, #104]	@ 0x68
 8005904:	4654      	mov	r4, sl
 8005906:	2205      	movs	r2, #5
 8005908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800590c:	484e      	ldr	r0, [pc, #312]	@ (8005a48 <_svfiprintf_r+0x1e4>)
 800590e:	f7fa fc5f 	bl	80001d0 <memchr>
 8005912:	9a04      	ldr	r2, [sp, #16]
 8005914:	b9d8      	cbnz	r0, 800594e <_svfiprintf_r+0xea>
 8005916:	06d0      	lsls	r0, r2, #27
 8005918:	bf44      	itt	mi
 800591a:	2320      	movmi	r3, #32
 800591c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005920:	0711      	lsls	r1, r2, #28
 8005922:	bf44      	itt	mi
 8005924:	232b      	movmi	r3, #43	@ 0x2b
 8005926:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800592a:	f89a 3000 	ldrb.w	r3, [sl]
 800592e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005930:	d015      	beq.n	800595e <_svfiprintf_r+0xfa>
 8005932:	9a07      	ldr	r2, [sp, #28]
 8005934:	4654      	mov	r4, sl
 8005936:	2000      	movs	r0, #0
 8005938:	f04f 0c0a 	mov.w	ip, #10
 800593c:	4621      	mov	r1, r4
 800593e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005942:	3b30      	subs	r3, #48	@ 0x30
 8005944:	2b09      	cmp	r3, #9
 8005946:	d94b      	bls.n	80059e0 <_svfiprintf_r+0x17c>
 8005948:	b1b0      	cbz	r0, 8005978 <_svfiprintf_r+0x114>
 800594a:	9207      	str	r2, [sp, #28]
 800594c:	e014      	b.n	8005978 <_svfiprintf_r+0x114>
 800594e:	eba0 0308 	sub.w	r3, r0, r8
 8005952:	fa09 f303 	lsl.w	r3, r9, r3
 8005956:	4313      	orrs	r3, r2
 8005958:	9304      	str	r3, [sp, #16]
 800595a:	46a2      	mov	sl, r4
 800595c:	e7d2      	b.n	8005904 <_svfiprintf_r+0xa0>
 800595e:	9b03      	ldr	r3, [sp, #12]
 8005960:	1d19      	adds	r1, r3, #4
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	9103      	str	r1, [sp, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	bfbb      	ittet	lt
 800596a:	425b      	neglt	r3, r3
 800596c:	f042 0202 	orrlt.w	r2, r2, #2
 8005970:	9307      	strge	r3, [sp, #28]
 8005972:	9307      	strlt	r3, [sp, #28]
 8005974:	bfb8      	it	lt
 8005976:	9204      	strlt	r2, [sp, #16]
 8005978:	7823      	ldrb	r3, [r4, #0]
 800597a:	2b2e      	cmp	r3, #46	@ 0x2e
 800597c:	d10a      	bne.n	8005994 <_svfiprintf_r+0x130>
 800597e:	7863      	ldrb	r3, [r4, #1]
 8005980:	2b2a      	cmp	r3, #42	@ 0x2a
 8005982:	d132      	bne.n	80059ea <_svfiprintf_r+0x186>
 8005984:	9b03      	ldr	r3, [sp, #12]
 8005986:	1d1a      	adds	r2, r3, #4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	9203      	str	r2, [sp, #12]
 800598c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005990:	3402      	adds	r4, #2
 8005992:	9305      	str	r3, [sp, #20]
 8005994:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005a58 <_svfiprintf_r+0x1f4>
 8005998:	7821      	ldrb	r1, [r4, #0]
 800599a:	2203      	movs	r2, #3
 800599c:	4650      	mov	r0, sl
 800599e:	f7fa fc17 	bl	80001d0 <memchr>
 80059a2:	b138      	cbz	r0, 80059b4 <_svfiprintf_r+0x150>
 80059a4:	9b04      	ldr	r3, [sp, #16]
 80059a6:	eba0 000a 	sub.w	r0, r0, sl
 80059aa:	2240      	movs	r2, #64	@ 0x40
 80059ac:	4082      	lsls	r2, r0
 80059ae:	4313      	orrs	r3, r2
 80059b0:	3401      	adds	r4, #1
 80059b2:	9304      	str	r3, [sp, #16]
 80059b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059b8:	4824      	ldr	r0, [pc, #144]	@ (8005a4c <_svfiprintf_r+0x1e8>)
 80059ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059be:	2206      	movs	r2, #6
 80059c0:	f7fa fc06 	bl	80001d0 <memchr>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	d036      	beq.n	8005a36 <_svfiprintf_r+0x1d2>
 80059c8:	4b21      	ldr	r3, [pc, #132]	@ (8005a50 <_svfiprintf_r+0x1ec>)
 80059ca:	bb1b      	cbnz	r3, 8005a14 <_svfiprintf_r+0x1b0>
 80059cc:	9b03      	ldr	r3, [sp, #12]
 80059ce:	3307      	adds	r3, #7
 80059d0:	f023 0307 	bic.w	r3, r3, #7
 80059d4:	3308      	adds	r3, #8
 80059d6:	9303      	str	r3, [sp, #12]
 80059d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059da:	4433      	add	r3, r6
 80059dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80059de:	e76a      	b.n	80058b6 <_svfiprintf_r+0x52>
 80059e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80059e4:	460c      	mov	r4, r1
 80059e6:	2001      	movs	r0, #1
 80059e8:	e7a8      	b.n	800593c <_svfiprintf_r+0xd8>
 80059ea:	2300      	movs	r3, #0
 80059ec:	3401      	adds	r4, #1
 80059ee:	9305      	str	r3, [sp, #20]
 80059f0:	4619      	mov	r1, r3
 80059f2:	f04f 0c0a 	mov.w	ip, #10
 80059f6:	4620      	mov	r0, r4
 80059f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059fc:	3a30      	subs	r2, #48	@ 0x30
 80059fe:	2a09      	cmp	r2, #9
 8005a00:	d903      	bls.n	8005a0a <_svfiprintf_r+0x1a6>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0c6      	beq.n	8005994 <_svfiprintf_r+0x130>
 8005a06:	9105      	str	r1, [sp, #20]
 8005a08:	e7c4      	b.n	8005994 <_svfiprintf_r+0x130>
 8005a0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a0e:	4604      	mov	r4, r0
 8005a10:	2301      	movs	r3, #1
 8005a12:	e7f0      	b.n	80059f6 <_svfiprintf_r+0x192>
 8005a14:	ab03      	add	r3, sp, #12
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	462a      	mov	r2, r5
 8005a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8005a54 <_svfiprintf_r+0x1f0>)
 8005a1c:	a904      	add	r1, sp, #16
 8005a1e:	4638      	mov	r0, r7
 8005a20:	f3af 8000 	nop.w
 8005a24:	1c42      	adds	r2, r0, #1
 8005a26:	4606      	mov	r6, r0
 8005a28:	d1d6      	bne.n	80059d8 <_svfiprintf_r+0x174>
 8005a2a:	89ab      	ldrh	r3, [r5, #12]
 8005a2c:	065b      	lsls	r3, r3, #25
 8005a2e:	f53f af2d 	bmi.w	800588c <_svfiprintf_r+0x28>
 8005a32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a34:	e72c      	b.n	8005890 <_svfiprintf_r+0x2c>
 8005a36:	ab03      	add	r3, sp, #12
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	462a      	mov	r2, r5
 8005a3c:	4b05      	ldr	r3, [pc, #20]	@ (8005a54 <_svfiprintf_r+0x1f0>)
 8005a3e:	a904      	add	r1, sp, #16
 8005a40:	4638      	mov	r0, r7
 8005a42:	f000 f879 	bl	8005b38 <_printf_i>
 8005a46:	e7ed      	b.n	8005a24 <_svfiprintf_r+0x1c0>
 8005a48:	08008a00 	.word	0x08008a00
 8005a4c:	08008a0a 	.word	0x08008a0a
 8005a50:	00000000 	.word	0x00000000
 8005a54:	080057ad 	.word	0x080057ad
 8005a58:	08008a06 	.word	0x08008a06

08005a5c <_printf_common>:
 8005a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a60:	4616      	mov	r6, r2
 8005a62:	4698      	mov	r8, r3
 8005a64:	688a      	ldr	r2, [r1, #8]
 8005a66:	690b      	ldr	r3, [r1, #16]
 8005a68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	bfb8      	it	lt
 8005a70:	4613      	movlt	r3, r2
 8005a72:	6033      	str	r3, [r6, #0]
 8005a74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a78:	4607      	mov	r7, r0
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	b10a      	cbz	r2, 8005a82 <_printf_common+0x26>
 8005a7e:	3301      	adds	r3, #1
 8005a80:	6033      	str	r3, [r6, #0]
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	0699      	lsls	r1, r3, #26
 8005a86:	bf42      	ittt	mi
 8005a88:	6833      	ldrmi	r3, [r6, #0]
 8005a8a:	3302      	addmi	r3, #2
 8005a8c:	6033      	strmi	r3, [r6, #0]
 8005a8e:	6825      	ldr	r5, [r4, #0]
 8005a90:	f015 0506 	ands.w	r5, r5, #6
 8005a94:	d106      	bne.n	8005aa4 <_printf_common+0x48>
 8005a96:	f104 0a19 	add.w	sl, r4, #25
 8005a9a:	68e3      	ldr	r3, [r4, #12]
 8005a9c:	6832      	ldr	r2, [r6, #0]
 8005a9e:	1a9b      	subs	r3, r3, r2
 8005aa0:	42ab      	cmp	r3, r5
 8005aa2:	dc26      	bgt.n	8005af2 <_printf_common+0x96>
 8005aa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005aa8:	6822      	ldr	r2, [r4, #0]
 8005aaa:	3b00      	subs	r3, #0
 8005aac:	bf18      	it	ne
 8005aae:	2301      	movne	r3, #1
 8005ab0:	0692      	lsls	r2, r2, #26
 8005ab2:	d42b      	bmi.n	8005b0c <_printf_common+0xb0>
 8005ab4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ab8:	4641      	mov	r1, r8
 8005aba:	4638      	mov	r0, r7
 8005abc:	47c8      	blx	r9
 8005abe:	3001      	adds	r0, #1
 8005ac0:	d01e      	beq.n	8005b00 <_printf_common+0xa4>
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	6922      	ldr	r2, [r4, #16]
 8005ac6:	f003 0306 	and.w	r3, r3, #6
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	bf02      	ittt	eq
 8005ace:	68e5      	ldreq	r5, [r4, #12]
 8005ad0:	6833      	ldreq	r3, [r6, #0]
 8005ad2:	1aed      	subeq	r5, r5, r3
 8005ad4:	68a3      	ldr	r3, [r4, #8]
 8005ad6:	bf0c      	ite	eq
 8005ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005adc:	2500      	movne	r5, #0
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	bfc4      	itt	gt
 8005ae2:	1a9b      	subgt	r3, r3, r2
 8005ae4:	18ed      	addgt	r5, r5, r3
 8005ae6:	2600      	movs	r6, #0
 8005ae8:	341a      	adds	r4, #26
 8005aea:	42b5      	cmp	r5, r6
 8005aec:	d11a      	bne.n	8005b24 <_printf_common+0xc8>
 8005aee:	2000      	movs	r0, #0
 8005af0:	e008      	b.n	8005b04 <_printf_common+0xa8>
 8005af2:	2301      	movs	r3, #1
 8005af4:	4652      	mov	r2, sl
 8005af6:	4641      	mov	r1, r8
 8005af8:	4638      	mov	r0, r7
 8005afa:	47c8      	blx	r9
 8005afc:	3001      	adds	r0, #1
 8005afe:	d103      	bne.n	8005b08 <_printf_common+0xac>
 8005b00:	f04f 30ff 	mov.w	r0, #4294967295
 8005b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b08:	3501      	adds	r5, #1
 8005b0a:	e7c6      	b.n	8005a9a <_printf_common+0x3e>
 8005b0c:	18e1      	adds	r1, r4, r3
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	2030      	movs	r0, #48	@ 0x30
 8005b12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b16:	4422      	add	r2, r4
 8005b18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b20:	3302      	adds	r3, #2
 8005b22:	e7c7      	b.n	8005ab4 <_printf_common+0x58>
 8005b24:	2301      	movs	r3, #1
 8005b26:	4622      	mov	r2, r4
 8005b28:	4641      	mov	r1, r8
 8005b2a:	4638      	mov	r0, r7
 8005b2c:	47c8      	blx	r9
 8005b2e:	3001      	adds	r0, #1
 8005b30:	d0e6      	beq.n	8005b00 <_printf_common+0xa4>
 8005b32:	3601      	adds	r6, #1
 8005b34:	e7d9      	b.n	8005aea <_printf_common+0x8e>
	...

08005b38 <_printf_i>:
 8005b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b3c:	7e0f      	ldrb	r7, [r1, #24]
 8005b3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b40:	2f78      	cmp	r7, #120	@ 0x78
 8005b42:	4691      	mov	r9, r2
 8005b44:	4680      	mov	r8, r0
 8005b46:	460c      	mov	r4, r1
 8005b48:	469a      	mov	sl, r3
 8005b4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b4e:	d807      	bhi.n	8005b60 <_printf_i+0x28>
 8005b50:	2f62      	cmp	r7, #98	@ 0x62
 8005b52:	d80a      	bhi.n	8005b6a <_printf_i+0x32>
 8005b54:	2f00      	cmp	r7, #0
 8005b56:	f000 80d1 	beq.w	8005cfc <_printf_i+0x1c4>
 8005b5a:	2f58      	cmp	r7, #88	@ 0x58
 8005b5c:	f000 80b8 	beq.w	8005cd0 <_printf_i+0x198>
 8005b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b68:	e03a      	b.n	8005be0 <_printf_i+0xa8>
 8005b6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b6e:	2b15      	cmp	r3, #21
 8005b70:	d8f6      	bhi.n	8005b60 <_printf_i+0x28>
 8005b72:	a101      	add	r1, pc, #4	@ (adr r1, 8005b78 <_printf_i+0x40>)
 8005b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b78:	08005bd1 	.word	0x08005bd1
 8005b7c:	08005be5 	.word	0x08005be5
 8005b80:	08005b61 	.word	0x08005b61
 8005b84:	08005b61 	.word	0x08005b61
 8005b88:	08005b61 	.word	0x08005b61
 8005b8c:	08005b61 	.word	0x08005b61
 8005b90:	08005be5 	.word	0x08005be5
 8005b94:	08005b61 	.word	0x08005b61
 8005b98:	08005b61 	.word	0x08005b61
 8005b9c:	08005b61 	.word	0x08005b61
 8005ba0:	08005b61 	.word	0x08005b61
 8005ba4:	08005ce3 	.word	0x08005ce3
 8005ba8:	08005c0f 	.word	0x08005c0f
 8005bac:	08005c9d 	.word	0x08005c9d
 8005bb0:	08005b61 	.word	0x08005b61
 8005bb4:	08005b61 	.word	0x08005b61
 8005bb8:	08005d05 	.word	0x08005d05
 8005bbc:	08005b61 	.word	0x08005b61
 8005bc0:	08005c0f 	.word	0x08005c0f
 8005bc4:	08005b61 	.word	0x08005b61
 8005bc8:	08005b61 	.word	0x08005b61
 8005bcc:	08005ca5 	.word	0x08005ca5
 8005bd0:	6833      	ldr	r3, [r6, #0]
 8005bd2:	1d1a      	adds	r2, r3, #4
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6032      	str	r2, [r6, #0]
 8005bd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005be0:	2301      	movs	r3, #1
 8005be2:	e09c      	b.n	8005d1e <_printf_i+0x1e6>
 8005be4:	6833      	ldr	r3, [r6, #0]
 8005be6:	6820      	ldr	r0, [r4, #0]
 8005be8:	1d19      	adds	r1, r3, #4
 8005bea:	6031      	str	r1, [r6, #0]
 8005bec:	0606      	lsls	r6, r0, #24
 8005bee:	d501      	bpl.n	8005bf4 <_printf_i+0xbc>
 8005bf0:	681d      	ldr	r5, [r3, #0]
 8005bf2:	e003      	b.n	8005bfc <_printf_i+0xc4>
 8005bf4:	0645      	lsls	r5, r0, #25
 8005bf6:	d5fb      	bpl.n	8005bf0 <_printf_i+0xb8>
 8005bf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bfc:	2d00      	cmp	r5, #0
 8005bfe:	da03      	bge.n	8005c08 <_printf_i+0xd0>
 8005c00:	232d      	movs	r3, #45	@ 0x2d
 8005c02:	426d      	negs	r5, r5
 8005c04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c08:	4858      	ldr	r0, [pc, #352]	@ (8005d6c <_printf_i+0x234>)
 8005c0a:	230a      	movs	r3, #10
 8005c0c:	e011      	b.n	8005c32 <_printf_i+0xfa>
 8005c0e:	6821      	ldr	r1, [r4, #0]
 8005c10:	6833      	ldr	r3, [r6, #0]
 8005c12:	0608      	lsls	r0, r1, #24
 8005c14:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c18:	d402      	bmi.n	8005c20 <_printf_i+0xe8>
 8005c1a:	0649      	lsls	r1, r1, #25
 8005c1c:	bf48      	it	mi
 8005c1e:	b2ad      	uxthmi	r5, r5
 8005c20:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c22:	4852      	ldr	r0, [pc, #328]	@ (8005d6c <_printf_i+0x234>)
 8005c24:	6033      	str	r3, [r6, #0]
 8005c26:	bf14      	ite	ne
 8005c28:	230a      	movne	r3, #10
 8005c2a:	2308      	moveq	r3, #8
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c32:	6866      	ldr	r6, [r4, #4]
 8005c34:	60a6      	str	r6, [r4, #8]
 8005c36:	2e00      	cmp	r6, #0
 8005c38:	db05      	blt.n	8005c46 <_printf_i+0x10e>
 8005c3a:	6821      	ldr	r1, [r4, #0]
 8005c3c:	432e      	orrs	r6, r5
 8005c3e:	f021 0104 	bic.w	r1, r1, #4
 8005c42:	6021      	str	r1, [r4, #0]
 8005c44:	d04b      	beq.n	8005cde <_printf_i+0x1a6>
 8005c46:	4616      	mov	r6, r2
 8005c48:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c4c:	fb03 5711 	mls	r7, r3, r1, r5
 8005c50:	5dc7      	ldrb	r7, [r0, r7]
 8005c52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c56:	462f      	mov	r7, r5
 8005c58:	42bb      	cmp	r3, r7
 8005c5a:	460d      	mov	r5, r1
 8005c5c:	d9f4      	bls.n	8005c48 <_printf_i+0x110>
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d10b      	bne.n	8005c7a <_printf_i+0x142>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	07df      	lsls	r7, r3, #31
 8005c66:	d508      	bpl.n	8005c7a <_printf_i+0x142>
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	6861      	ldr	r1, [r4, #4]
 8005c6c:	4299      	cmp	r1, r3
 8005c6e:	bfde      	ittt	le
 8005c70:	2330      	movle	r3, #48	@ 0x30
 8005c72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c7a:	1b92      	subs	r2, r2, r6
 8005c7c:	6122      	str	r2, [r4, #16]
 8005c7e:	f8cd a000 	str.w	sl, [sp]
 8005c82:	464b      	mov	r3, r9
 8005c84:	aa03      	add	r2, sp, #12
 8005c86:	4621      	mov	r1, r4
 8005c88:	4640      	mov	r0, r8
 8005c8a:	f7ff fee7 	bl	8005a5c <_printf_common>
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d14a      	bne.n	8005d28 <_printf_i+0x1f0>
 8005c92:	f04f 30ff 	mov.w	r0, #4294967295
 8005c96:	b004      	add	sp, #16
 8005c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	f043 0320 	orr.w	r3, r3, #32
 8005ca2:	6023      	str	r3, [r4, #0]
 8005ca4:	4832      	ldr	r0, [pc, #200]	@ (8005d70 <_printf_i+0x238>)
 8005ca6:	2778      	movs	r7, #120	@ 0x78
 8005ca8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	6831      	ldr	r1, [r6, #0]
 8005cb0:	061f      	lsls	r7, r3, #24
 8005cb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cb6:	d402      	bmi.n	8005cbe <_printf_i+0x186>
 8005cb8:	065f      	lsls	r7, r3, #25
 8005cba:	bf48      	it	mi
 8005cbc:	b2ad      	uxthmi	r5, r5
 8005cbe:	6031      	str	r1, [r6, #0]
 8005cc0:	07d9      	lsls	r1, r3, #31
 8005cc2:	bf44      	itt	mi
 8005cc4:	f043 0320 	orrmi.w	r3, r3, #32
 8005cc8:	6023      	strmi	r3, [r4, #0]
 8005cca:	b11d      	cbz	r5, 8005cd4 <_printf_i+0x19c>
 8005ccc:	2310      	movs	r3, #16
 8005cce:	e7ad      	b.n	8005c2c <_printf_i+0xf4>
 8005cd0:	4826      	ldr	r0, [pc, #152]	@ (8005d6c <_printf_i+0x234>)
 8005cd2:	e7e9      	b.n	8005ca8 <_printf_i+0x170>
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	f023 0320 	bic.w	r3, r3, #32
 8005cda:	6023      	str	r3, [r4, #0]
 8005cdc:	e7f6      	b.n	8005ccc <_printf_i+0x194>
 8005cde:	4616      	mov	r6, r2
 8005ce0:	e7bd      	b.n	8005c5e <_printf_i+0x126>
 8005ce2:	6833      	ldr	r3, [r6, #0]
 8005ce4:	6825      	ldr	r5, [r4, #0]
 8005ce6:	6961      	ldr	r1, [r4, #20]
 8005ce8:	1d18      	adds	r0, r3, #4
 8005cea:	6030      	str	r0, [r6, #0]
 8005cec:	062e      	lsls	r6, r5, #24
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	d501      	bpl.n	8005cf6 <_printf_i+0x1be>
 8005cf2:	6019      	str	r1, [r3, #0]
 8005cf4:	e002      	b.n	8005cfc <_printf_i+0x1c4>
 8005cf6:	0668      	lsls	r0, r5, #25
 8005cf8:	d5fb      	bpl.n	8005cf2 <_printf_i+0x1ba>
 8005cfa:	8019      	strh	r1, [r3, #0]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	6123      	str	r3, [r4, #16]
 8005d00:	4616      	mov	r6, r2
 8005d02:	e7bc      	b.n	8005c7e <_printf_i+0x146>
 8005d04:	6833      	ldr	r3, [r6, #0]
 8005d06:	1d1a      	adds	r2, r3, #4
 8005d08:	6032      	str	r2, [r6, #0]
 8005d0a:	681e      	ldr	r6, [r3, #0]
 8005d0c:	6862      	ldr	r2, [r4, #4]
 8005d0e:	2100      	movs	r1, #0
 8005d10:	4630      	mov	r0, r6
 8005d12:	f7fa fa5d 	bl	80001d0 <memchr>
 8005d16:	b108      	cbz	r0, 8005d1c <_printf_i+0x1e4>
 8005d18:	1b80      	subs	r0, r0, r6
 8005d1a:	6060      	str	r0, [r4, #4]
 8005d1c:	6863      	ldr	r3, [r4, #4]
 8005d1e:	6123      	str	r3, [r4, #16]
 8005d20:	2300      	movs	r3, #0
 8005d22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d26:	e7aa      	b.n	8005c7e <_printf_i+0x146>
 8005d28:	6923      	ldr	r3, [r4, #16]
 8005d2a:	4632      	mov	r2, r6
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	4640      	mov	r0, r8
 8005d30:	47d0      	blx	sl
 8005d32:	3001      	adds	r0, #1
 8005d34:	d0ad      	beq.n	8005c92 <_printf_i+0x15a>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	079b      	lsls	r3, r3, #30
 8005d3a:	d413      	bmi.n	8005d64 <_printf_i+0x22c>
 8005d3c:	68e0      	ldr	r0, [r4, #12]
 8005d3e:	9b03      	ldr	r3, [sp, #12]
 8005d40:	4298      	cmp	r0, r3
 8005d42:	bfb8      	it	lt
 8005d44:	4618      	movlt	r0, r3
 8005d46:	e7a6      	b.n	8005c96 <_printf_i+0x15e>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	4632      	mov	r2, r6
 8005d4c:	4649      	mov	r1, r9
 8005d4e:	4640      	mov	r0, r8
 8005d50:	47d0      	blx	sl
 8005d52:	3001      	adds	r0, #1
 8005d54:	d09d      	beq.n	8005c92 <_printf_i+0x15a>
 8005d56:	3501      	adds	r5, #1
 8005d58:	68e3      	ldr	r3, [r4, #12]
 8005d5a:	9903      	ldr	r1, [sp, #12]
 8005d5c:	1a5b      	subs	r3, r3, r1
 8005d5e:	42ab      	cmp	r3, r5
 8005d60:	dcf2      	bgt.n	8005d48 <_printf_i+0x210>
 8005d62:	e7eb      	b.n	8005d3c <_printf_i+0x204>
 8005d64:	2500      	movs	r5, #0
 8005d66:	f104 0619 	add.w	r6, r4, #25
 8005d6a:	e7f5      	b.n	8005d58 <_printf_i+0x220>
 8005d6c:	08008a11 	.word	0x08008a11
 8005d70:	08008a22 	.word	0x08008a22

08005d74 <memmove>:
 8005d74:	4288      	cmp	r0, r1
 8005d76:	b510      	push	{r4, lr}
 8005d78:	eb01 0402 	add.w	r4, r1, r2
 8005d7c:	d902      	bls.n	8005d84 <memmove+0x10>
 8005d7e:	4284      	cmp	r4, r0
 8005d80:	4623      	mov	r3, r4
 8005d82:	d807      	bhi.n	8005d94 <memmove+0x20>
 8005d84:	1e43      	subs	r3, r0, #1
 8005d86:	42a1      	cmp	r1, r4
 8005d88:	d008      	beq.n	8005d9c <memmove+0x28>
 8005d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d92:	e7f8      	b.n	8005d86 <memmove+0x12>
 8005d94:	4402      	add	r2, r0
 8005d96:	4601      	mov	r1, r0
 8005d98:	428a      	cmp	r2, r1
 8005d9a:	d100      	bne.n	8005d9e <memmove+0x2a>
 8005d9c:	bd10      	pop	{r4, pc}
 8005d9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005da2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005da6:	e7f7      	b.n	8005d98 <memmove+0x24>

08005da8 <memcpy>:
 8005da8:	440a      	add	r2, r1
 8005daa:	4291      	cmp	r1, r2
 8005dac:	f100 33ff 	add.w	r3, r0, #4294967295
 8005db0:	d100      	bne.n	8005db4 <memcpy+0xc>
 8005db2:	4770      	bx	lr
 8005db4:	b510      	push	{r4, lr}
 8005db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dbe:	4291      	cmp	r1, r2
 8005dc0:	d1f9      	bne.n	8005db6 <memcpy+0xe>
 8005dc2:	bd10      	pop	{r4, pc}

08005dc4 <_realloc_r>:
 8005dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc8:	4607      	mov	r7, r0
 8005dca:	4614      	mov	r4, r2
 8005dcc:	460d      	mov	r5, r1
 8005dce:	b921      	cbnz	r1, 8005dda <_realloc_r+0x16>
 8005dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	f7ff bbad 	b.w	8005534 <_malloc_r>
 8005dda:	b92a      	cbnz	r2, 8005de8 <_realloc_r+0x24>
 8005ddc:	f7ff fc9c 	bl	8005718 <_free_r>
 8005de0:	4625      	mov	r5, r4
 8005de2:	4628      	mov	r0, r5
 8005de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005de8:	f000 f81a 	bl	8005e20 <_malloc_usable_size_r>
 8005dec:	4284      	cmp	r4, r0
 8005dee:	4606      	mov	r6, r0
 8005df0:	d802      	bhi.n	8005df8 <_realloc_r+0x34>
 8005df2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005df6:	d8f4      	bhi.n	8005de2 <_realloc_r+0x1e>
 8005df8:	4621      	mov	r1, r4
 8005dfa:	4638      	mov	r0, r7
 8005dfc:	f7ff fb9a 	bl	8005534 <_malloc_r>
 8005e00:	4680      	mov	r8, r0
 8005e02:	b908      	cbnz	r0, 8005e08 <_realloc_r+0x44>
 8005e04:	4645      	mov	r5, r8
 8005e06:	e7ec      	b.n	8005de2 <_realloc_r+0x1e>
 8005e08:	42b4      	cmp	r4, r6
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	bf28      	it	cs
 8005e10:	4632      	movcs	r2, r6
 8005e12:	f7ff ffc9 	bl	8005da8 <memcpy>
 8005e16:	4629      	mov	r1, r5
 8005e18:	4638      	mov	r0, r7
 8005e1a:	f7ff fc7d 	bl	8005718 <_free_r>
 8005e1e:	e7f1      	b.n	8005e04 <_realloc_r+0x40>

08005e20 <_malloc_usable_size_r>:
 8005e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e24:	1f18      	subs	r0, r3, #4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bfbc      	itt	lt
 8005e2a:	580b      	ldrlt	r3, [r1, r0]
 8005e2c:	18c0      	addlt	r0, r0, r3
 8005e2e:	4770      	bx	lr

08005e30 <_init>:
 8005e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e32:	bf00      	nop
 8005e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e36:	bc08      	pop	{r3}
 8005e38:	469e      	mov	lr, r3
 8005e3a:	4770      	bx	lr

08005e3c <_fini>:
 8005e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3e:	bf00      	nop
 8005e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e42:	bc08      	pop	{r3}
 8005e44:	469e      	mov	lr, r3
 8005e46:	4770      	bx	lr
