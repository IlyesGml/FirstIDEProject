
FirstIDEProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000662c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bac  080067bc  080067bc  000077bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009368  08009368  0000b05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009368  08009368  0000a368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009370  08009370  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009370  08009370  0000a370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009374  08009374  0000a374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08009378  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b05c  2**0
                  CONTENTS
 10 .bss          0000084c  2000005c  2000005c  0000b05c  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  200008a8  200008a8  0000b05c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000173d2  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fd1  00000000  00000000  0002245e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c0  00000000  00000000  00025430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000110a  00000000  00000000  000269f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000039e3  00000000  00000000  00027afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a952  00000000  00000000  0002b4dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3d04  00000000  00000000  00045e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119b33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006264  00000000  00000000  00119b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0011fddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067a4 	.word	0x080067a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080067a4 	.word	0x080067a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <Pilote_CS0_EPAPER_metAUn>:

/**
 * @brief Met la broche CS_EPAPER � l'�tat haut (d�sactive l'e-paper)
 */
void Pilote_CS0_EPAPER_metAUn(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a6:	4802      	ldr	r0, [pc, #8]	@ (80005b0 <Pilote_CS0_EPAPER_metAUn+0x14>)
 80005a8:	f001 fd6a 	bl	8002080 <HAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40020800 	.word	0x40020800

080005b4 <Pilote_CS0_EPAPER_metAZero>:

/**
 * @brief Met la broche CS_EPAPER � l'�tat bas (active l'e-paper)
 */
void Pilote_CS0_EPAPER_metAZero(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005be:	4802      	ldr	r0, [pc, #8]	@ (80005c8 <Pilote_CS0_EPAPER_metAZero+0x14>)
 80005c0:	f001 fd5e 	bl	8002080 <HAL_GPIO_WritePin>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40020800 	.word	0x40020800

080005cc <HAL_TIM_PeriodElapsedCallback>:
//Definitions de variables publiques:
void (*piloteTimer6Up_execute)(void);

//Definitions de fonctions publiques:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  if (htim == &htim6)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a05      	ldr	r2, [pc, #20]	@ (80005ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d102      	bne.n	80005e2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    piloteTimer6Up_execute();
 80005dc:	4b04      	ldr	r3, [pc, #16]	@ (80005f0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4798      	blx	r3
  }


}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200001e4 	.word	0x200001e4
 80005f0:	20000078 	.word	0x20000078

080005f4 <EPD_352_SendCommand>:
 * @brief Send Command to the EPD 3.52" display through SPI.
 * 
 * @param Reg data to be sent as command.
 */
void EPD_352_SendCommand(uint8_t Reg)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DAT_COM_GPIO_Port, DAT_COM_Pin, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2102      	movs	r1, #2
 8000602:	4809      	ldr	r0, [pc, #36]	@ (8000628 <EPD_352_SendCommand+0x34>)
 8000604:	f001 fd3c 	bl	8002080 <HAL_GPIO_WritePin>
  Pilote_CS0_EPAPER_metAZero(); // Set CS low to select the device
 8000608:	f7ff ffd4 	bl	80005b4 <Pilote_CS0_EPAPER_metAZero>
  //HAL_SPI_Transmit(&hspi2, &Reg, 1, 1000);
  HAL_SPI_Transmit(&hspi1, &Reg, 1, 1000);
 800060c:	1df9      	adds	r1, r7, #7
 800060e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000612:	2201      	movs	r2, #1
 8000614:	4805      	ldr	r0, [pc, #20]	@ (800062c <EPD_352_SendCommand+0x38>)
 8000616:	f003 fbd0 	bl	8003dba <HAL_SPI_Transmit>
  Pilote_CS0_EPAPER_metAUn(); // Set CS high to deselect the device
 800061a:	f7ff ffbf 	bl	800059c <Pilote_CS0_EPAPER_metAUn>
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40020800 	.word	0x40020800
 800062c:	200000ec 	.word	0x200000ec

08000630 <EPD_352_SendData>:
 * @brief Send Data to the EPD 3.52" display through SPI.
 * 
 * @param Data data to be sent.
 */
void EPD_352_SendData(uint8_t Data)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DAT_COM_GPIO_Port, DAT_COM_Pin, 1);
 800063a:	2201      	movs	r2, #1
 800063c:	2102      	movs	r1, #2
 800063e:	4809      	ldr	r0, [pc, #36]	@ (8000664 <EPD_352_SendData+0x34>)
 8000640:	f001 fd1e 	bl	8002080 <HAL_GPIO_WritePin>
  Pilote_CS0_EPAPER_metAZero(); // Set CS low to select the device
 8000644:	f7ff ffb6 	bl	80005b4 <Pilote_CS0_EPAPER_metAZero>
  //HAL_SPI_Transmit(&hspi2, &Data, 1, 1000);
  HAL_SPI_Transmit(&hspi1, &Data, 1, 1000);
 8000648:	1df9      	adds	r1, r7, #7
 800064a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800064e:	2201      	movs	r2, #1
 8000650:	4805      	ldr	r0, [pc, #20]	@ (8000668 <EPD_352_SendData+0x38>)
 8000652:	f003 fbb2 	bl	8003dba <HAL_SPI_Transmit>
  Pilote_CS0_EPAPER_metAUn(); // Set CS high to deselect the device
 8000656:	f7ff ffa1 	bl	800059c <Pilote_CS0_EPAPER_metAUn>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40020800 	.word	0x40020800
 8000668:	200000ec 	.word	0x200000ec

0800066c <EPD_352_refresh>:
/**
 * @brief 
 * 
 */
void EPD_352_refresh(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
    uint8_t busy = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	71fb      	strb	r3, [r7, #7]
    EPD_352_SendCommand(0x17);
 8000676:	2017      	movs	r0, #23
 8000678:	f7ff ffbc 	bl	80005f4 <EPD_352_SendCommand>
    EPD_352_SendData(0xA5);
 800067c:	20a5      	movs	r0, #165	@ 0xa5
 800067e:	f7ff ffd7 	bl	8000630 <EPD_352_SendData>
    while(!busy)
 8000682:	e005      	b.n	8000690 <EPD_352_refresh+0x24>
    busy = HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin);
 8000684:	2140      	movs	r1, #64	@ 0x40
 8000686:	4807      	ldr	r0, [pc, #28]	@ (80006a4 <EPD_352_refresh+0x38>)
 8000688:	f001 fce2 	bl	8002050 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	71fb      	strb	r3, [r7, #7]
    while(!busy)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f6      	beq.n	8000684 <EPD_352_refresh+0x18>
    HAL_Delay(200);
 8000696:	20c8      	movs	r0, #200	@ 0xc8
 8000698:	f001 fa08 	bl	8001aac <HAL_Delay>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40020800 	.word	0x40020800

080006a8 <EPD_352_lut_GC>:
/**
 * @brief
 *
 */
void EPD_352_lut_GC(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
    uint8_t count;
    EPD_352_SendCommand(0x20); // Set vcom
 80006ae:	2020      	movs	r0, #32
 80006b0:	f7ff ffa0 	bl	80005f4 <EPD_352_SendCommand>
    for (count = 0; count< 56; count++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	e008      	b.n	80006cc <EPD_352_lut_GC+0x24>
    {
        EPD_352_SendData(EPD_3IN52_lut_R20_GC[count]);
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4a41      	ldr	r2, [pc, #260]	@ (80007c4 <EPD_352_lut_GC+0x11c>)
 80006be:	5cd3      	ldrb	r3, [r2, r3]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ffb5 	bl	8000630 <EPD_352_SendData>
    for (count = 0; count< 56; count++)
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	3301      	adds	r3, #1
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b37      	cmp	r3, #55	@ 0x37
 80006d0:	d9f3      	bls.n	80006ba <EPD_352_lut_GC+0x12>
    }
    EPD_352_SendCommand(0x21); // red not use
 80006d2:	2021      	movs	r0, #33	@ 0x21
 80006d4:	f7ff ff8e 	bl	80005f4 <EPD_352_SendCommand>
    for (count = 0; count< 42; count++)
 80006d8:	2300      	movs	r3, #0
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	e008      	b.n	80006f0 <EPD_352_lut_GC+0x48>
    {
        EPD_352_SendData(EPD_3IN52_lut_R21_GC[count]);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	4a39      	ldr	r2, [pc, #228]	@ (80007c8 <EPD_352_lut_GC+0x120>)
 80006e2:	5cd3      	ldrb	r3, [r2, r3]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffa3 	bl	8000630 <EPD_352_SendData>
    for (count = 0; count< 42; count++)
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	3301      	adds	r3, #1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2b29      	cmp	r3, #41	@ 0x29
 80006f4:	d9f3      	bls.n	80006de <EPD_352_lut_GC+0x36>
    }
    EPD_352_SendCommand(0x24); // Set bb b
 80006f6:	2024      	movs	r0, #36	@ 0x24
 80006f8:	f7ff ff7c 	bl	80005f4 <EPD_352_SendCommand>
    for (count = 0; count< 42; count++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	e008      	b.n	8000714 <EPD_352_lut_GC+0x6c>
    {
        EPD_352_SendData(EPD_3IN52_lut_R24_GC[count]);
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	4a31      	ldr	r2, [pc, #196]	@ (80007cc <EPD_352_lut_GC+0x124>)
 8000706:	5cd3      	ldrb	r3, [r2, r3]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff91 	bl	8000630 <EPD_352_SendData>
    for (count = 0; count< 42; count++)
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	3301      	adds	r3, #1
 8000712:	71fb      	strb	r3, [r7, #7]
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b29      	cmp	r3, #41	@ 0x29
 8000718:	d9f3      	bls.n	8000702 <EPD_352_lut_GC+0x5a>
    }
    if (EPD_352_FLAG == 0)
 800071a:	4b2d      	ldr	r3, [pc, #180]	@ (80007d0 <EPD_352_lut_GC+0x128>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d127      	bne.n	8000772 <EPD_352_lut_GC+0xca>
    {
        EPD_352_SendCommand(0x22); // Set bw r
 8000722:	2022      	movs	r0, #34	@ 0x22
 8000724:	f7ff ff66 	bl	80005f4 <EPD_352_SendCommand>
        for (count = 0; count< 56; count++)
 8000728:	2300      	movs	r3, #0
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	e008      	b.n	8000740 <EPD_352_lut_GC+0x98>
        {
            EPD_352_SendData(EPD_3IN52_lut_R22_GC[count]);
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	4a28      	ldr	r2, [pc, #160]	@ (80007d4 <EPD_352_lut_GC+0x12c>)
 8000732:	5cd3      	ldrb	r3, [r2, r3]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff7b 	bl	8000630 <EPD_352_SendData>
        for (count = 0; count< 56; count++)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	3301      	adds	r3, #1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b37      	cmp	r3, #55	@ 0x37
 8000744:	d9f3      	bls.n	800072e <EPD_352_lut_GC+0x86>
        }
        EPD_352_SendCommand(0x23); // Set wb w
 8000746:	2023      	movs	r0, #35	@ 0x23
 8000748:	f7ff ff54 	bl	80005f4 <EPD_352_SendCommand>
        for (count = 0; count< 42; count++)
 800074c:	2300      	movs	r3, #0
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	e008      	b.n	8000764 <EPD_352_lut_GC+0xbc>
        {
            EPD_352_SendData(EPD_3IN52_lut_R23_GC[count]);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4a20      	ldr	r2, [pc, #128]	@ (80007d8 <EPD_352_lut_GC+0x130>)
 8000756:	5cd3      	ldrb	r3, [r2, r3]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff69 	bl	8000630 <EPD_352_SendData>
        for (count = 0; count< 42; count++)
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	3301      	adds	r3, #1
 8000762:	71fb      	strb	r3, [r7, #7]
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b29      	cmp	r3, #41	@ 0x29
 8000768:	d9f3      	bls.n	8000752 <EPD_352_lut_GC+0xaa>
        }
        EPD_352_FLAG = 1; // Set flag to indicate that GC LUT has been loaded
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <EPD_352_lut_GC+0x128>)
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
        for (count = 0; count< 56; count++)
        {
            EPD_352_SendData(EPD_3IN52_lut_R22_GC[count]);
        }
    }
}
 8000770:	e023      	b.n	80007ba <EPD_352_lut_GC+0x112>
        EPD_352_SendCommand(0x22); // Set bw r
 8000772:	2022      	movs	r0, #34	@ 0x22
 8000774:	f7ff ff3e 	bl	80005f4 <EPD_352_SendCommand>
        for (count = 0; count< 42; count++)
 8000778:	2300      	movs	r3, #0
 800077a:	71fb      	strb	r3, [r7, #7]
 800077c:	e008      	b.n	8000790 <EPD_352_lut_GC+0xe8>
            EPD_352_SendData(EPD_3IN52_lut_R23_GC[count]);
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	4a15      	ldr	r2, [pc, #84]	@ (80007d8 <EPD_352_lut_GC+0x130>)
 8000782:	5cd3      	ldrb	r3, [r2, r3]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff53 	bl	8000630 <EPD_352_SendData>
        for (count = 0; count< 42; count++)
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	3301      	adds	r3, #1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2b29      	cmp	r3, #41	@ 0x29
 8000794:	d9f3      	bls.n	800077e <EPD_352_lut_GC+0xd6>
        EPD_352_SendCommand(0x23); // Set wb w
 8000796:	2023      	movs	r0, #35	@ 0x23
 8000798:	f7ff ff2c 	bl	80005f4 <EPD_352_SendCommand>
        for (count = 0; count< 56; count++)
 800079c:	2300      	movs	r3, #0
 800079e:	71fb      	strb	r3, [r7, #7]
 80007a0:	e008      	b.n	80007b4 <EPD_352_lut_GC+0x10c>
            EPD_352_SendData(EPD_3IN52_lut_R22_GC[count]);
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4a0b      	ldr	r2, [pc, #44]	@ (80007d4 <EPD_352_lut_GC+0x12c>)
 80007a6:	5cd3      	ldrb	r3, [r2, r3]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff41 	bl	8000630 <EPD_352_SendData>
        for (count = 0; count< 56; count++)
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	3301      	adds	r3, #1
 80007b2:	71fb      	strb	r3, [r7, #7]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b37      	cmp	r3, #55	@ 0x37
 80007b8:	d9f3      	bls.n	80007a2 <EPD_352_lut_GC+0xfa>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	080067e4 	.word	0x080067e4
 80007c8:	0800681c 	.word	0x0800681c
 80007cc:	080068b8 	.word	0x080068b8
 80007d0:	2000007c 	.word	0x2000007c
 80007d4:	08006848 	.word	0x08006848
 80007d8:	08006880 	.word	0x08006880

080007dc <EPD_352_Init>:
/**
 * @brief 
 * 
 */
void EPD_352_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
    EPD_352_FLAG = 0;
 80007e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000898 <EPD_352_Init+0xbc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
    EPD_352_Reset(); // Reset the display
 80007e6:	f000 f95d 	bl	8000aa4 <EPD_352_Reset>

    //HAL_GPIO_WritePin(SPI1_SCK_GPIO_Port,SPI1_SCK_Pin,GPIO_PIN_RESET);
    EPD_352_SendCommand(0x00); // SPI INIT
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff ff02 	bl	80005f4 <EPD_352_SendCommand>
    EPD_352_SendCommand(0x00); // Panel setting
 80007f0:	2000      	movs	r0, #0
 80007f2:	f7ff feff 	bl	80005f4 <EPD_352_SendCommand>
    EPD_352_SendData(0xFF); // 0x0F: 1/7.5, 0x0B: 1/7, 0x0A: 1/6.5, 0x09: 1/6
 80007f6:	20ff      	movs	r0, #255	@ 0xff
 80007f8:	f7ff ff1a 	bl	8000630 <EPD_352_SendData>
    EPD_352_SendData(0x01); // 0x0F: 1/7.5, 0x0B: 1/7, 0x0A: 1/6.5, 0x09: 1/6
 80007fc:	2001      	movs	r0, #1
 80007fe:	f7ff ff17 	bl	8000630 <EPD_352_SendData>

    EPD_352_SendCommand(0x01); // Power setting
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff fef6 	bl	80005f4 <EPD_352_SendCommand>
    EPD_352_SendData(0x03); // 0x03: VDS_EN, VDG_EN, VCOM_EN
 8000808:	2003      	movs	r0, #3
 800080a:	f7ff ff11 	bl	8000630 <EPD_352_SendData>
    EPD_352_SendData(0x10);            //  x x x VCOM_SLWE VGH[3:0]   VGH=20V, VGL=-20V	
 800080e:	2010      	movs	r0, #16
 8000810:	f7ff ff0e 	bl	8000630 <EPD_352_SendData>
    EPD_352_SendData(0x3F);            //  x x VSH[5:0]	VSH = 15V
 8000814:	203f      	movs	r0, #63	@ 0x3f
 8000816:	f7ff ff0b 	bl	8000630 <EPD_352_SendData>
    EPD_352_SendData(0x3F);            //  x x VSL[5:0]	VSL=-15V
 800081a:	203f      	movs	r0, #63	@ 0x3f
 800081c:	f7ff ff08 	bl	8000630 <EPD_352_SendData>
    EPD_352_SendData(0x03);            //  OPTEN VDHR[6:0]  VHDR=6.4V
 8000820:	2003      	movs	r0, #3
 8000822:	f7ff ff05 	bl	8000630 <EPD_352_SendData>
                                       // T_VDS_OFF[1:0] 00=1 frame; 01=2 frame; 10=3 frame; 11=4 frame
    EPD_352_SendCommand(0x06);         // booster soft start   BTST 
 8000826:	2006      	movs	r0, #6
 8000828:	f7ff fee4 	bl	80005f4 <EPD_352_SendCommand>
    EPD_352_SendData(0x37);            //  BT_PHA[7:0]  	
 800082c:	2037      	movs	r0, #55	@ 0x37
 800082e:	f7ff feff 	bl	8000630 <EPD_352_SendData>
    EPD_352_SendData(0x3D);            //  BT_PHB[7:0]	
 8000832:	203d      	movs	r0, #61	@ 0x3d
 8000834:	f7ff fefc 	bl	8000630 <EPD_352_SendData>
    EPD_352_SendData(0x3D);            //  x x BT_PHC[5:0]	
 8000838:	203d      	movs	r0, #61	@ 0x3d
 800083a:	f7ff fef9 	bl	8000630 <EPD_352_SendData>

    EPD_352_SendCommand(0x60);         // TCON setting			TCON 
 800083e:	2060      	movs	r0, #96	@ 0x60
 8000840:	f7ff fed8 	bl	80005f4 <EPD_352_SendCommand>
    EPD_352_SendData(0x22);            // S2G[3:0] G2S[3:0]   non-overlap = 12		
 8000844:	2022      	movs	r0, #34	@ 0x22
 8000846:	f7ff fef3 	bl	8000630 <EPD_352_SendData>

    EPD_352_SendCommand(0x82);         // VCOM_DC setting		VDCS 
 800084a:	2082      	movs	r0, #130	@ 0x82
 800084c:	f7ff fed2 	bl	80005f4 <EPD_352_SendCommand>
    EPD_352_SendData(0x07);            // x  VDCS[6:0]	VCOM_DC value= -1.9v    00~3f,0x12=-1.9v
 8000850:	2007      	movs	r0, #7
 8000852:	f7ff feed 	bl	8000630 <EPD_352_SendData>

    EPD_352_SendCommand(0x30);			 
 8000856:	2030      	movs	r0, #48	@ 0x30
 8000858:	f7ff fecc 	bl	80005f4 <EPD_352_SendCommand>
    EPD_352_SendData(0x09);		
 800085c:	2009      	movs	r0, #9
 800085e:	f7ff fee7 	bl	8000630 <EPD_352_SendData>

    EPD_352_SendCommand(0xe3);         // power saving			PWS 
 8000862:	20e3      	movs	r0, #227	@ 0xe3
 8000864:	f7ff fec6 	bl	80005f4 <EPD_352_SendCommand>
    EPD_352_SendData(0x88);            // VCOM_W[3:0] SD_W[3:0]
 8000868:	2088      	movs	r0, #136	@ 0x88
 800086a:	f7ff fee1 	bl	8000630 <EPD_352_SendData>

    EPD_352_SendCommand(0x61);         // resoultion setting 
 800086e:	2061      	movs	r0, #97	@ 0x61
 8000870:	f7ff fec0 	bl	80005f4 <EPD_352_SendCommand>
    EPD_352_SendData(0xf0);            //  HRES[7:3] 0 0 0	
 8000874:	20f0      	movs	r0, #240	@ 0xf0
 8000876:	f7ff fedb 	bl	8000630 <EPD_352_SendData>
    EPD_352_SendData(0x01);            //  x x x x x x x VRES[8]	
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff fed8 	bl	8000630 <EPD_352_SendData>
    EPD_352_SendData(0x68);            //  VRES[7:0]
 8000880:	2068      	movs	r0, #104	@ 0x68
 8000882:	f7ff fed5 	bl	8000630 <EPD_352_SendData>

    EPD_352_SendCommand(0x50);			
 8000886:	2050      	movs	r0, #80	@ 0x50
 8000888:	f7ff feb4 	bl	80005f4 <EPD_352_SendCommand>
    EPD_352_SendData(0xB7);	
 800088c:	20b7      	movs	r0, #183	@ 0xb7
 800088e:	f7ff fecf 	bl	8000630 <EPD_352_SendData>
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2000007c 	.word	0x2000007c

0800089c <EPD_352_display>:
 * @brief 
 * 
 * @param picData 
 */
void EPD_352_display(uint8_t* picData)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    uint16_t i;
    EPD_352_SendCommand(0x13);		     //Transfer new data
 80008a4:	2013      	movs	r0, #19
 80008a6:	f7ff fea5 	bl	80005f4 <EPD_352_SendCommand>
    for(i=0;i<(EPD_3IN52_WIDTH*EPD_3IN52_HEIGHT/8);i++)	     
 80008aa:	2300      	movs	r3, #0
 80008ac:	81fb      	strh	r3, [r7, #14]
 80008ae:	e00a      	b.n	80008c6 <EPD_352_display+0x2a>
    {
        EPD_352_SendData(*picData);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff febb 	bl	8000630 <EPD_352_SendData>
        picData++;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3301      	adds	r3, #1
 80008be:	607b      	str	r3, [r7, #4]
    for(i=0;i<(EPD_3IN52_WIDTH*EPD_3IN52_HEIGHT/8);i++)	     
 80008c0:	89fb      	ldrh	r3, [r7, #14]
 80008c2:	3301      	adds	r3, #1
 80008c4:	81fb      	strh	r3, [r7, #14]
 80008c6:	89fb      	ldrh	r3, [r7, #14]
 80008c8:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d9ef      	bls.n	80008b0 <EPD_352_display+0x14>
    }
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <EPD_352_display_NUM>:
 * @brief
 *
 * @param NUM
 */
void EPD_352_display_NUM(uint8_t NUM)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
    uint16_t row, column;
    EPD_352_SendCommand(0x13);
 80008e6:	2013      	movs	r0, #19
 80008e8:	f7ff fe84 	bl	80005f4 <EPD_352_SendCommand>
    for(column = 0; column < EPD_3IN52_HEIGHT; column++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	81bb      	strh	r3, [r7, #12]
 80008f0:	e0cd      	b.n	8000a8e <EPD_352_display_NUM+0x1b2>
    {
        for(row = 0; row < EPD_3IN52_WIDTH; row++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	81fb      	strh	r3, [r7, #14]
 80008f6:	e0c3      	b.n	8000a80 <EPD_352_display_NUM+0x1a4>
        {
            switch (NUM)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	2bff      	cmp	r3, #255	@ 0xff
 80008fc:	d03b      	beq.n	8000976 <EPD_352_display_NUM+0x9a>
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	f300 80ba 	bgt.w	8000a78 <EPD_352_display_NUM+0x19c>
 8000904:	2bf0      	cmp	r3, #240	@ 0xf0
 8000906:	d074      	beq.n	80009f2 <EPD_352_display_NUM+0x116>
 8000908:	2bf0      	cmp	r3, #240	@ 0xf0
 800090a:	f300 80b5 	bgt.w	8000a78 <EPD_352_display_NUM+0x19c>
 800090e:	2baa      	cmp	r3, #170	@ 0xaa
 8000910:	d039      	beq.n	8000986 <EPD_352_display_NUM+0xaa>
 8000912:	2baa      	cmp	r3, #170	@ 0xaa
 8000914:	f300 80b0 	bgt.w	8000a78 <EPD_352_display_NUM+0x19c>
 8000918:	2b0f      	cmp	r3, #15
 800091a:	dc29      	bgt.n	8000970 <EPD_352_display_NUM+0x94>
 800091c:	2b00      	cmp	r3, #0
 800091e:	f2c0 80ab 	blt.w	8000a78 <EPD_352_display_NUM+0x19c>
 8000922:	2b0f      	cmp	r3, #15
 8000924:	f200 80a8 	bhi.w	8000a78 <EPD_352_display_NUM+0x19c>
 8000928:	a201      	add	r2, pc, #4	@ (adr r2, 8000930 <EPD_352_display_NUM+0x54>)
 800092a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092e:	bf00      	nop
 8000930:	0800097f 	.word	0x0800097f
 8000934:	08000a09 	.word	0x08000a09
 8000938:	08000a45 	.word	0x08000a45
 800093c:	080009ab 	.word	0x080009ab
 8000940:	08000a79 	.word	0x08000a79
 8000944:	08000a79 	.word	0x08000a79
 8000948:	08000a79 	.word	0x08000a79
 800094c:	08000a79 	.word	0x08000a79
 8000950:	08000a79 	.word	0x08000a79
 8000954:	08000a79 	.word	0x08000a79
 8000958:	08000a79 	.word	0x08000a79
 800095c:	08000a79 	.word	0x08000a79
 8000960:	08000a79 	.word	0x08000a79
 8000964:	08000a79 	.word	0x08000a79
 8000968:	08000a79 	.word	0x08000a79
 800096c:	080009dd 	.word	0x080009dd
 8000970:	2b55      	cmp	r3, #85	@ 0x55
 8000972:	d00c      	beq.n	800098e <EPD_352_display_NUM+0xb2>
                case EPD_3IN52_Image:
                        //EPD_3IN52_SendData(gImage_1[pcnt++]);
                    break;  
                                        
                default:
                    break;
 8000974:	e080      	b.n	8000a78 <EPD_352_display_NUM+0x19c>
                    EPD_352_SendData(0xFF);
 8000976:	20ff      	movs	r0, #255	@ 0xff
 8000978:	f7ff fe5a 	bl	8000630 <EPD_352_SendData>
                    break;  
 800097c:	e07d      	b.n	8000a7a <EPD_352_display_NUM+0x19e>
                    EPD_352_SendData(0x00);
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff fe56 	bl	8000630 <EPD_352_SendData>
                    break;  
 8000984:	e079      	b.n	8000a7a <EPD_352_display_NUM+0x19e>
                    EPD_352_SendData(0xAA);  
 8000986:	20aa      	movs	r0, #170	@ 0xaa
 8000988:	f7ff fe52 	bl	8000630 <EPD_352_SendData>
                    break;
 800098c:	e075      	b.n	8000a7a <EPD_352_display_NUM+0x19e>
                    if(column%2)
 800098e:	89bb      	ldrh	r3, [r7, #12]
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	b29b      	uxth	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <EPD_352_display_NUM+0xc6>
                        EPD_352_SendData(0xff); //An odd number of Gate line  
 800099a:	20ff      	movs	r0, #255	@ 0xff
 800099c:	f7ff fe48 	bl	8000630 <EPD_352_SendData>
                    break;			
 80009a0:	e06b      	b.n	8000a7a <EPD_352_display_NUM+0x19e>
                        EPD_352_SendData(0x00); //The even line Gate  
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fe44 	bl	8000630 <EPD_352_SendData>
                    break;			
 80009a8:	e067      	b.n	8000a7a <EPD_352_display_NUM+0x19e>
                    if(row>=(EPD_3IN52_WIDTH/8/2)&&column>=(EPD_3IN52_HEIGHT/2))
 80009aa:	89fb      	ldrh	r3, [r7, #14]
 80009ac:	2b0e      	cmp	r3, #14
 80009ae:	d906      	bls.n	80009be <EPD_352_display_NUM+0xe2>
 80009b0:	89bb      	ldrh	r3, [r7, #12]
 80009b2:	2bb3      	cmp	r3, #179	@ 0xb3
 80009b4:	d903      	bls.n	80009be <EPD_352_display_NUM+0xe2>
                        EPD_352_SendData(0xff);
 80009b6:	20ff      	movs	r0, #255	@ 0xff
 80009b8:	f7ff fe3a 	bl	8000630 <EPD_352_SendData>
 80009bc:	e00d      	b.n	80009da <EPD_352_display_NUM+0xfe>
                    else if(row<(EPD_3IN52_WIDTH/8/2)&&column<(EPD_3IN52_HEIGHT/2))
 80009be:	89fb      	ldrh	r3, [r7, #14]
 80009c0:	2b0e      	cmp	r3, #14
 80009c2:	d806      	bhi.n	80009d2 <EPD_352_display_NUM+0xf6>
 80009c4:	89bb      	ldrh	r3, [r7, #12]
 80009c6:	2bb3      	cmp	r3, #179	@ 0xb3
 80009c8:	d803      	bhi.n	80009d2 <EPD_352_display_NUM+0xf6>
                        EPD_352_SendData(0xff);										
 80009ca:	20ff      	movs	r0, #255	@ 0xff
 80009cc:	f7ff fe30 	bl	8000630 <EPD_352_SendData>
 80009d0:	e003      	b.n	80009da <EPD_352_display_NUM+0xfe>
                        EPD_352_SendData(0x00);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fe2c 	bl	8000630 <EPD_352_SendData>
                    break; 			
 80009d8:	e04f      	b.n	8000a7a <EPD_352_display_NUM+0x19e>
 80009da:	e04e      	b.n	8000a7a <EPD_352_display_NUM+0x19e>
                    if(row>=(EPD_3IN52_WIDTH/8/2))
 80009dc:	89fb      	ldrh	r3, [r7, #14]
 80009de:	2b0e      	cmp	r3, #14
 80009e0:	d903      	bls.n	80009ea <EPD_352_display_NUM+0x10e>
                        EPD_352_SendData(0xff);
 80009e2:	20ff      	movs	r0, #255	@ 0xff
 80009e4:	f7ff fe24 	bl	8000630 <EPD_352_SendData>
                    break;
 80009e8:	e047      	b.n	8000a7a <EPD_352_display_NUM+0x19e>
                        EPD_352_SendData(0x00);
 80009ea:	2000      	movs	r0, #0
 80009ec:	f7ff fe20 	bl	8000630 <EPD_352_SendData>
                    break;
 80009f0:	e043      	b.n	8000a7a <EPD_352_display_NUM+0x19e>
                    if(column>=(EPD_3IN52_HEIGHT/2))
 80009f2:	89bb      	ldrh	r3, [r7, #12]
 80009f4:	2bb3      	cmp	r3, #179	@ 0xb3
 80009f6:	d903      	bls.n	8000a00 <EPD_352_display_NUM+0x124>
                        EPD_352_SendData(0xFF);
 80009f8:	20ff      	movs	r0, #255	@ 0xff
 80009fa:	f7ff fe19 	bl	8000630 <EPD_352_SendData>
                    break;
 80009fe:	e03c      	b.n	8000a7a <EPD_352_display_NUM+0x19e>
                        EPD_352_SendData(0x00);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff fe15 	bl	8000630 <EPD_352_SendData>
                    break;
 8000a06:	e038      	b.n	8000a7a <EPD_352_display_NUM+0x19e>
                    if(column==0||column==(EPD_3IN52_HEIGHT-1))
 8000a08:	89bb      	ldrh	r3, [r7, #12]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d004      	beq.n	8000a18 <EPD_352_display_NUM+0x13c>
 8000a0e:	89bb      	ldrh	r3, [r7, #12]
 8000a10:	f240 1267 	movw	r2, #359	@ 0x167
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d103      	bne.n	8000a20 <EPD_352_display_NUM+0x144>
                        EPD_352_SendData(0x00);						
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f7ff fe09 	bl	8000630 <EPD_352_SendData>
                    break; 					
 8000a1e:	e02c      	b.n	8000a7a <EPD_352_display_NUM+0x19e>
                    else if(row==0)
 8000a20:	89fb      	ldrh	r3, [r7, #14]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d103      	bne.n	8000a2e <EPD_352_display_NUM+0x152>
                        EPD_352_SendData(0x7F);
 8000a26:	207f      	movs	r0, #127	@ 0x7f
 8000a28:	f7ff fe02 	bl	8000630 <EPD_352_SendData>
                    break; 					
 8000a2c:	e025      	b.n	8000a7a <EPD_352_display_NUM+0x19e>
                    else if(row==(EPD_3IN52_WIDTH/8-1))
 8000a2e:	89fb      	ldrh	r3, [r7, #14]
 8000a30:	2b1d      	cmp	r3, #29
 8000a32:	d103      	bne.n	8000a3c <EPD_352_display_NUM+0x160>
                        EPD_352_SendData(0xFE);					
 8000a34:	20fe      	movs	r0, #254	@ 0xfe
 8000a36:	f7ff fdfb 	bl	8000630 <EPD_352_SendData>
                    break; 					
 8000a3a:	e01e      	b.n	8000a7a <EPD_352_display_NUM+0x19e>
                        EPD_352_SendData(0xFF);
 8000a3c:	20ff      	movs	r0, #255	@ 0xff
 8000a3e:	f7ff fdf7 	bl	8000630 <EPD_352_SendData>
                    break; 					
 8000a42:	e01a      	b.n	8000a7a <EPD_352_display_NUM+0x19e>
                    if((row>=(EPD_3IN52_WIDTH/8/3)&&row<=(EPD_3IN52_WIDTH/8/3*2)&&column<=(EPD_3IN52_HEIGHT/3))||(row>=(EPD_3IN52_WIDTH/8/3)&&row<=(EPD_3IN52_WIDTH/8/3*2)&&column>=(EPD_3IN52_HEIGHT/3*2)))
 8000a44:	89fb      	ldrh	r3, [r7, #14]
 8000a46:	2b09      	cmp	r3, #9
 8000a48:	d905      	bls.n	8000a56 <EPD_352_display_NUM+0x17a>
 8000a4a:	89fb      	ldrh	r3, [r7, #14]
 8000a4c:	2b14      	cmp	r3, #20
 8000a4e:	d802      	bhi.n	8000a56 <EPD_352_display_NUM+0x17a>
 8000a50:	89bb      	ldrh	r3, [r7, #12]
 8000a52:	2b78      	cmp	r3, #120	@ 0x78
 8000a54:	d908      	bls.n	8000a68 <EPD_352_display_NUM+0x18c>
 8000a56:	89fb      	ldrh	r3, [r7, #14]
 8000a58:	2b09      	cmp	r3, #9
 8000a5a:	d909      	bls.n	8000a70 <EPD_352_display_NUM+0x194>
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	2b14      	cmp	r3, #20
 8000a60:	d806      	bhi.n	8000a70 <EPD_352_display_NUM+0x194>
 8000a62:	89bb      	ldrh	r3, [r7, #12]
 8000a64:	2bef      	cmp	r3, #239	@ 0xef
 8000a66:	d903      	bls.n	8000a70 <EPD_352_display_NUM+0x194>
                        EPD_352_SendData(0x00);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff fde1 	bl	8000630 <EPD_352_SendData>
                    break; 					
 8000a6e:	e004      	b.n	8000a7a <EPD_352_display_NUM+0x19e>
                        EPD_352_SendData(0xFF);
 8000a70:	20ff      	movs	r0, #255	@ 0xff
 8000a72:	f7ff fddd 	bl	8000630 <EPD_352_SendData>
                    break; 					
 8000a76:	e000      	b.n	8000a7a <EPD_352_display_NUM+0x19e>
                    break;
 8000a78:	bf00      	nop
        for(row = 0; row < EPD_3IN52_WIDTH; row++)
 8000a7a:	89fb      	ldrh	r3, [r7, #14]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	81fb      	strh	r3, [r7, #14]
 8000a80:	89fb      	ldrh	r3, [r7, #14]
 8000a82:	2bef      	cmp	r3, #239	@ 0xef
 8000a84:	f67f af38 	bls.w	80008f8 <EPD_352_display_NUM+0x1c>
    for(column = 0; column < EPD_3IN52_HEIGHT; column++)
 8000a88:	89bb      	ldrh	r3, [r7, #12]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	81bb      	strh	r3, [r7, #12]
 8000a8e:	89bb      	ldrh	r3, [r7, #12]
 8000a90:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000a94:	f4ff af2d 	bcc.w	80008f2 <EPD_352_display_NUM+0x16>
            }
        }
    }
}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop

08000aa4 <EPD_352_Reset>:
/**
 * @brief Reset the EPD 3.52" display.
 * 
 */
void EPD_352_Reset(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2180      	movs	r1, #128	@ 0x80
 8000aac:	480b      	ldr	r0, [pc, #44]	@ (8000adc <EPD_352_Reset+0x38>)
 8000aae:	f001 fae7 	bl	8002080 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8000ab2:	20c8      	movs	r0, #200	@ 0xc8
 8000ab4:	f000 fffa 	bl	8001aac <HAL_Delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2180      	movs	r1, #128	@ 0x80
 8000abc:	4807      	ldr	r0, [pc, #28]	@ (8000adc <EPD_352_Reset+0x38>)
 8000abe:	f001 fadf 	bl	8002080 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f000 fff2 	bl	8001aac <HAL_Delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2180      	movs	r1, #128	@ 0x80
 8000acc:	4803      	ldr	r0, [pc, #12]	@ (8000adc <EPD_352_Reset+0x38>)
 8000ace:	f001 fad7 	bl	8002080 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8000ad2:	20c8      	movs	r0, #200	@ 0xc8
 8000ad4:	f000 ffea 	bl	8001aac <HAL_Delay>
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40020800 	.word	0x40020800

08000ae0 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(uint8_t *image, uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	4608      	mov	r0, r1
 8000aea:	4611      	mov	r1, r2
 8000aec:	461a      	mov	r2, r3
 8000aee:	4603      	mov	r3, r0
 8000af0:	817b      	strh	r3, [r7, #10]
 8000af2:	460b      	mov	r3, r1
 8000af4:	813b      	strh	r3, [r7, #8]
 8000af6:	4613      	mov	r3, r2
 8000af8:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8000afa:	4b23      	ldr	r3, [pc, #140]	@ (8000b88 <Paint_NewImage+0xa8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8000b00:	4a21      	ldr	r2, [pc, #132]	@ (8000b88 <Paint_NewImage+0xa8>)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8000b06:	4a20      	ldr	r2, [pc, #128]	@ (8000b88 <Paint_NewImage+0xa8>)
 8000b08:	897b      	ldrh	r3, [r7, #10]
 8000b0a:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8000b88 <Paint_NewImage+0xa8>)
 8000b0e:	893b      	ldrh	r3, [r7, #8]
 8000b10:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;
 8000b12:	4a1d      	ldr	r2, [pc, #116]	@ (8000b88 <Paint_NewImage+0xa8>)
 8000b14:	8b3b      	ldrh	r3, [r7, #24]
 8000b16:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	@ (8000b88 <Paint_NewImage+0xa8>)
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	82da      	strh	r2, [r3, #22]

    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000b1e:	897b      	ldrh	r3, [r7, #10]
 8000b20:	f003 0307 	and.w	r3, r3, #7
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d103      	bne.n	8000b32 <Paint_NewImage+0x52>
 8000b2a:	897b      	ldrh	r3, [r7, #10]
 8000b2c:	08db      	lsrs	r3, r3, #3
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	e004      	b.n	8000b3c <Paint_NewImage+0x5c>
 8000b32:	897b      	ldrh	r3, [r7, #10]
 8000b34:	08db      	lsrs	r3, r3, #3
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	3301      	adds	r3, #1
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	4a12      	ldr	r2, [pc, #72]	@ (8000b88 <Paint_NewImage+0xa8>)
 8000b3e:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;
 8000b40:	4a11      	ldr	r2, [pc, #68]	@ (8000b88 <Paint_NewImage+0xa8>)
 8000b42:	893b      	ldrh	r3, [r7, #8]
 8000b44:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

    Paint.Rotate = Rotate;
 8000b46:	4a10      	ldr	r2, [pc, #64]	@ (8000b88 <Paint_NewImage+0xa8>)
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <Paint_NewImage+0xa8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	821a      	strh	r2, [r3, #16]

    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d002      	beq.n	8000b5e <Paint_NewImage+0x7e>
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	2bb4      	cmp	r3, #180	@ 0xb4
 8000b5c:	d106      	bne.n	8000b6c <Paint_NewImage+0x8c>
        Paint.Width = Width;
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <Paint_NewImage+0xa8>)
 8000b60:	897b      	ldrh	r3, [r7, #10]
 8000b62:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000b64:	4a08      	ldr	r2, [pc, #32]	@ (8000b88 <Paint_NewImage+0xa8>)
 8000b66:	893b      	ldrh	r3, [r7, #8]
 8000b68:	80d3      	strh	r3, [r2, #6]
 8000b6a:	e006      	b.n	8000b7a <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	@ (8000b88 <Paint_NewImage+0xa8>)
 8000b6e:	893b      	ldrh	r3, [r7, #8]
 8000b70:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <Paint_NewImage+0xa8>)
 8000b74:	897b      	ldrh	r3, [r7, #10]
 8000b76:	80d3      	strh	r3, [r2, #6]
    }
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000080 	.word	0x20000080

08000b8c <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(uint8_t *image)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8000b94:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <Paint_SelectImage+0x1c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000080 	.word	0x20000080

08000bac <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(uint16_t Color)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	@ 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 8000bb6:	4b50      	ldr	r3, [pc, #320]	@ (8000cf8 <Paint_Clear+0x14c>)
 8000bb8:	8adb      	ldrh	r3, [r3, #22]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d125      	bne.n	8000c0a <Paint_Clear+0x5e>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	83fb      	strh	r3, [r7, #30]
 8000bc2:	e01c      	b.n	8000bfe <Paint_Clear+0x52>
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	83bb      	strh	r3, [r7, #28]
 8000bc8:	e011      	b.n	8000bee <Paint_Clear+0x42>
				uint32_t Addr = X + Y*Paint.WidthByte;
 8000bca:	8bba      	ldrh	r2, [r7, #28]
 8000bcc:	8bfb      	ldrh	r3, [r7, #30]
 8000bce:	494a      	ldr	r1, [pc, #296]	@ (8000cf8 <Paint_Clear+0x14c>)
 8000bd0:	8a49      	ldrh	r1, [r1, #18]
 8000bd2:	fb01 f303 	mul.w	r3, r1, r3
 8000bd6:	4413      	add	r3, r2
 8000bd8:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8000bda:	4b47      	ldr	r3, [pc, #284]	@ (8000cf8 <Paint_Clear+0x14c>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	4413      	add	r3, r2
 8000be2:	88fa      	ldrh	r2, [r7, #6]
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	701a      	strb	r2, [r3, #0]
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000be8:	8bbb      	ldrh	r3, [r7, #28]
 8000bea:	3301      	adds	r3, #1
 8000bec:	83bb      	strh	r3, [r7, #28]
 8000bee:	4b42      	ldr	r3, [pc, #264]	@ (8000cf8 <Paint_Clear+0x14c>)
 8000bf0:	8a5b      	ldrh	r3, [r3, #18]
 8000bf2:	8bba      	ldrh	r2, [r7, #28]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d3e8      	bcc.n	8000bca <Paint_Clear+0x1e>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000bf8:	8bfb      	ldrh	r3, [r7, #30]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	83fb      	strh	r3, [r7, #30]
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf8 <Paint_Clear+0x14c>)
 8000c00:	8a9b      	ldrh	r3, [r3, #20]
 8000c02:	8bfa      	ldrh	r2, [r7, #30]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d3dd      	bcc.n	8000bc4 <Paint_Clear+0x18>
				uint32_t Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}
	}
}
 8000c08:	e070      	b.n	8000cec <Paint_Clear+0x140>
    }else if(Paint.Scale == 4) {
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000cf8 <Paint_Clear+0x14c>)
 8000c0c:	8adb      	ldrh	r3, [r3, #22]
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	d138      	bne.n	8000c84 <Paint_Clear+0xd8>
        for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000c12:	2300      	movs	r3, #0
 8000c14:	837b      	strh	r3, [r7, #26]
 8000c16:	e02f      	b.n	8000c78 <Paint_Clear+0xcc>
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {
 8000c18:	2300      	movs	r3, #0
 8000c1a:	833b      	strh	r3, [r7, #24]
 8000c1c:	e024      	b.n	8000c68 <Paint_Clear+0xbc>
				uint32_t Addr = X + Y*Paint.WidthByte;
 8000c1e:	8b3a      	ldrh	r2, [r7, #24]
 8000c20:	8b7b      	ldrh	r3, [r7, #26]
 8000c22:	4935      	ldr	r1, [pc, #212]	@ (8000cf8 <Paint_Clear+0x14c>)
 8000c24:	8a49      	ldrh	r1, [r1, #18]
 8000c26:	fb01 f303 	mul.w	r3, r1, r3
 8000c2a:	4413      	add	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	b25b      	sxtb	r3, r3
 8000c32:	019b      	lsls	r3, r3, #6
 8000c34:	b25a      	sxtb	r2, r3
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	011b      	lsls	r3, r3, #4
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b25a      	sxtb	r2, r3
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	b25b      	sxtb	r3, r3
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	b25a      	sxtb	r2, r3
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	b25b      	sxtb	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b259      	sxtb	r1, r3
 8000c56:	4b28      	ldr	r3, [pc, #160]	@ (8000cf8 <Paint_Clear+0x14c>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	b2ca      	uxtb	r2, r1
 8000c60:	701a      	strb	r2, [r3, #0]
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {
 8000c62:	8b3b      	ldrh	r3, [r7, #24]
 8000c64:	3301      	adds	r3, #1
 8000c66:	833b      	strh	r3, [r7, #24]
 8000c68:	4b23      	ldr	r3, [pc, #140]	@ (8000cf8 <Paint_Clear+0x14c>)
 8000c6a:	8a5b      	ldrh	r3, [r3, #18]
 8000c6c:	8b3a      	ldrh	r2, [r7, #24]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d3d5      	bcc.n	8000c1e <Paint_Clear+0x72>
        for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000c72:	8b7b      	ldrh	r3, [r7, #26]
 8000c74:	3301      	adds	r3, #1
 8000c76:	837b      	strh	r3, [r7, #26]
 8000c78:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <Paint_Clear+0x14c>)
 8000c7a:	8a9b      	ldrh	r3, [r3, #20]
 8000c7c:	8b7a      	ldrh	r2, [r7, #26]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d3ca      	bcc.n	8000c18 <Paint_Clear+0x6c>
}
 8000c82:	e033      	b.n	8000cec <Paint_Clear+0x140>
	}else if(Paint.Scale == 6 || Paint.Scale == 7) {
 8000c84:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <Paint_Clear+0x14c>)
 8000c86:	8adb      	ldrh	r3, [r3, #22]
 8000c88:	2b06      	cmp	r3, #6
 8000c8a:	d003      	beq.n	8000c94 <Paint_Clear+0xe8>
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <Paint_Clear+0x14c>)
 8000c8e:	8adb      	ldrh	r3, [r3, #22]
 8000c90:	2b07      	cmp	r3, #7
 8000c92:	d12b      	bne.n	8000cec <Paint_Clear+0x140>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000c94:	2300      	movs	r3, #0
 8000c96:	82fb      	strh	r3, [r7, #22]
 8000c98:	e023      	b.n	8000ce2 <Paint_Clear+0x136>
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	82bb      	strh	r3, [r7, #20]
 8000c9e:	e018      	b.n	8000cd2 <Paint_Clear+0x126>
				uint32_t Addr = X + Y*Paint.WidthByte;
 8000ca0:	8aba      	ldrh	r2, [r7, #20]
 8000ca2:	8afb      	ldrh	r3, [r7, #22]
 8000ca4:	4914      	ldr	r1, [pc, #80]	@ (8000cf8 <Paint_Clear+0x14c>)
 8000ca6:	8a49      	ldrh	r1, [r1, #18]
 8000ca8:	fb01 f303 	mul.w	r3, r1, r3
 8000cac:	4413      	add	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	b25b      	sxtb	r3, r3
 8000cb4:	011b      	lsls	r3, r3, #4
 8000cb6:	b25a      	sxtb	r2, r3
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b259      	sxtb	r1, r3
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <Paint_Clear+0x14c>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2ca      	uxtb	r2, r1
 8000cca:	701a      	strb	r2, [r3, #0]
			for (uint16_t X = 0; X < Paint.WidthByte; X++ ) {
 8000ccc:	8abb      	ldrh	r3, [r7, #20]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	82bb      	strh	r3, [r7, #20]
 8000cd2:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <Paint_Clear+0x14c>)
 8000cd4:	8a5b      	ldrh	r3, [r3, #18]
 8000cd6:	8aba      	ldrh	r2, [r7, #20]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d3e1      	bcc.n	8000ca0 <Paint_Clear+0xf4>
		for (uint16_t Y = 0; Y < Paint.HeightByte; Y++) {
 8000cdc:	8afb      	ldrh	r3, [r7, #22]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	82fb      	strh	r3, [r7, #22]
 8000ce2:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <Paint_Clear+0x14c>)
 8000ce4:	8a9b      	ldrh	r3, [r3, #20]
 8000ce6:	8afa      	ldrh	r2, [r7, #22]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d3d6      	bcc.n	8000c9a <Paint_Clear+0xee>
}
 8000cec:	bf00      	nop
 8000cee:	3724      	adds	r7, #36	@ 0x24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	20000080 	.word	0x20000080

08000cfc <Paint_DrawBitMap>:
info:
    Use a computer to convert the image into a corresponding array,
    and then embed the array directly into Imagedata.cpp as a .c file.
******************************************************************************/
void Paint_DrawBitMap(const unsigned char* image_buffer)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
    uint16_t x, y;
    uint32_t Addr = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]

    for (y = 0; y < Paint.HeightByte; y++) {
 8000d08:	2300      	movs	r3, #0
 8000d0a:	81bb      	strh	r3, [r7, #12]
 8000d0c:	e01e      	b.n	8000d4c <Paint_DrawBitMap+0x50>
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 8000d0e:	2300      	movs	r3, #0
 8000d10:	81fb      	strh	r3, [r7, #14]
 8000d12:	e013      	b.n	8000d3c <Paint_DrawBitMap+0x40>
            Addr = x + y * Paint.WidthByte;
 8000d14:	89fa      	ldrh	r2, [r7, #14]
 8000d16:	89bb      	ldrh	r3, [r7, #12]
 8000d18:	4912      	ldr	r1, [pc, #72]	@ (8000d64 <Paint_DrawBitMap+0x68>)
 8000d1a:	8a49      	ldrh	r1, [r1, #18]
 8000d1c:	fb01 f303 	mul.w	r3, r1, r3
 8000d20:	4413      	add	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
            Paint.Image[Addr] = (unsigned char)image_buffer[Addr];
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	441a      	add	r2, r3
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <Paint_DrawBitMap+0x68>)
 8000d2c:	6819      	ldr	r1, [r3, #0]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	440b      	add	r3, r1
 8000d32:	7812      	ldrb	r2, [r2, #0]
 8000d34:	701a      	strb	r2, [r3, #0]
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 8000d36:	89fb      	ldrh	r3, [r7, #14]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	81fb      	strh	r3, [r7, #14]
 8000d3c:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <Paint_DrawBitMap+0x68>)
 8000d3e:	8a5b      	ldrh	r3, [r3, #18]
 8000d40:	89fa      	ldrh	r2, [r7, #14]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d3e6      	bcc.n	8000d14 <Paint_DrawBitMap+0x18>
    for (y = 0; y < Paint.HeightByte; y++) {
 8000d46:	89bb      	ldrh	r3, [r7, #12]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	81bb      	strh	r3, [r7, #12]
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <Paint_DrawBitMap+0x68>)
 8000d4e:	8a9b      	ldrh	r3, [r3, #20]
 8000d50:	89ba      	ldrh	r2, [r7, #12]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d3db      	bcc.n	8000d0e <Paint_DrawBitMap+0x12>
        }
    }
}
 8000d56:	bf00      	nop
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	20000080 	.word	0x20000080

08000d68 <main_initialiseApresLeHAL>:
  // Initialise the base de temps service
  serviceBaseDeTemps_initialise();
}

void main_initialiseApresLeHAL(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	EPD_352_Init();
 8000d6c:	f7ff fd36 	bl	80007dc <EPD_352_Init>
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b092      	sub	sp, #72	@ 0x48
 8000d78:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7a:	f000 fe25 	bl	80019c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7e:	f000 f86d 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d82:	f000 fa4b 	bl	800121c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d86:	f000 f8d3 	bl	8000f30 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d8a:	f000 f8ff 	bl	8000f8c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000d8e:	f000 f9ed 	bl	800116c <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d92:	f000 fa15 	bl	80011c0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8000d96:	f000 f92f 	bl	8000ff8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000d9a:	f000 f963 	bl	8001064 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000d9e:	f000 f9af 	bl	8001100 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  main_initialiseApresLeHAL();
 8000da2:	f7ff ffe1 	bl	8000d68 <main_initialiseApresLeHAL>



  EPD_352_display_NUM(EPD_3IN52_BLACK);
 8000da6:	2000      	movs	r0, #0
 8000da8:	f7ff fd98 	bl	80008dc <EPD_352_display_NUM>
  EPD_352_lut_GC();
 8000dac:	f7ff fc7c 	bl	80006a8 <EPD_352_lut_GC>
  EPD_352_refresh();
 8000db0:	f7ff fc5c 	bl	800066c <EPD_352_refresh>

  EPD_352_SendCommand(0x50);
 8000db4:	2050      	movs	r0, #80	@ 0x50
 8000db6:	f7ff fc1d 	bl	80005f4 <EPD_352_SendCommand>
  EPD_352_SendData(0x17);
 8000dba:	2017      	movs	r0, #23
 8000dbc:	f7ff fc38 	bl	8000630 <EPD_352_SendData>

  HAL_Delay(500);
 8000dc0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dc4:	f000 fe72 	bl	8001aac <HAL_Delay>

  uint8_t *imagenoir;
  uint16_t imagesize= ((EPD_3IN52_WIDTH % 8 == 0)? (EPD_3IN52_WIDTH / 8 ): (EPD_3IN52_WIDTH / 8 + 1)) * EPD_3IN52_HEIGHT;
 8000dc8:	f642 2330 	movw	r3, #10800	@ 0x2a30
 8000dcc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if((imagenoir = (uint8_t *)malloc(imagesize)) == NULL) {
 8000dce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f005 f83f 	bl	8005e54 <malloc>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d110      	bne.n	8000e02 <main+0x8e>
	  uart_len = sprintf(uart_buf, "Failed to apply for black memory...\r\n");
 8000de0:	463b      	mov	r3, r7
 8000de2:	491b      	ldr	r1, [pc, #108]	@ (8000e50 <main+0xdc>)
 8000de4:	4618      	mov	r0, r3
 8000de6:	f005 f8eb 	bl	8005fc0 <siprintf>
 8000dea:	6378      	str	r0, [r7, #52]	@ 0x34
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_len, HAL_MAX_DELAY);
 8000dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4639      	mov	r1, r7
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	4817      	ldr	r0, [pc, #92]	@ (8000e54 <main+0xe0>)
 8000df8:	f003 fe4e 	bl	8004a98 <HAL_UART_Transmit>
          return -1;
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000e00:	e022      	b.n	8000e48 <main+0xd4>
      }
  Paint_NewImage(imagenoir, EPD_3IN52_WIDTH, EPD_3IN52_HEIGHT, ROTATE_270, WHITE);
 8000e02:	23ff      	movs	r3, #255	@ 0xff
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8000e0a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8000e0e:	21f0      	movs	r1, #240	@ 0xf0
 8000e10:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000e12:	f7ff fe65 	bl	8000ae0 <Paint_NewImage>
  Paint_Clear(WHITE);
 8000e16:	20ff      	movs	r0, #255	@ 0xff
 8000e18:	f7ff fec8 	bl	8000bac <Paint_Clear>

  Paint_SelectImage(imagenoir);
 8000e1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000e1e:	f7ff feb5 	bl	8000b8c <Paint_SelectImage>
  Paint_Clear(WHITE);
 8000e22:	20ff      	movs	r0, #255	@ 0xff
 8000e24:	f7ff fec2 	bl	8000bac <Paint_Clear>
  Paint_DrawBitMap(gImage_Didou);
 8000e28:	480b      	ldr	r0, [pc, #44]	@ (8000e58 <main+0xe4>)
 8000e2a:	f7ff ff67 	bl	8000cfc <Paint_DrawBitMap>

  EPD_352_display(imagenoir);
 8000e2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000e30:	f7ff fd34 	bl	800089c <EPD_352_display>
  EPD_352_lut_GC();
 8000e34:	f7ff fc38 	bl	80006a8 <EPD_352_lut_GC>
  EPD_352_refresh();
 8000e38:	f7ff fc18 	bl	800066c <EPD_352_refresh>

    EPD_352_display(imagenoir);
    EPD_352_lut_GC();
    EPD_352_refresh();
*/
    HAL_Delay(2000);
 8000e3c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e40:	f000 fe34 	bl	8001aac <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <main+0xd0>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3740      	adds	r7, #64	@ 0x40
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	080067bc 	.word	0x080067bc
 8000e54:	2000022c 	.word	0x2000022c
 8000e58:	080068e4 	.word	0x080068e4

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b094      	sub	sp, #80	@ 0x50
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 0320 	add.w	r3, r7, #32
 8000e66:	2230      	movs	r2, #48	@ 0x30
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f005 f8ca 	bl	8006004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	4b28      	ldr	r3, [pc, #160]	@ (8000f28 <SystemClock_Config+0xcc>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e88:	4a27      	ldr	r2, [pc, #156]	@ (8000f28 <SystemClock_Config+0xcc>)
 8000e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e90:	4b25      	ldr	r3, [pc, #148]	@ (8000f28 <SystemClock_Config+0xcc>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <SystemClock_Config+0xd0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a21      	ldr	r2, [pc, #132]	@ (8000f2c <SystemClock_Config+0xd0>)
 8000ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <SystemClock_Config+0xd0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ebc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ed0:	23a8      	movs	r3, #168	@ 0xa8
 8000ed2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ed8:	2307      	movs	r3, #7
 8000eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000edc:	f107 0320 	add.w	r3, r7, #32
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 fa49 	bl	8003378 <HAL_RCC_OscConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000eec:	f000 fac8 	bl	8001480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000efc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	2105      	movs	r1, #5
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 fcaa 	bl	8003868 <HAL_RCC_ClockConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f1a:	f000 fab1 	bl	8001480 <Error_Handler>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3750      	adds	r7, #80	@ 0x50
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40007000 	.word	0x40007000

08000f30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_I2C1_Init+0x50>)
 8000f36:	4a13      	ldr	r2, [pc, #76]	@ (8000f84 <MX_I2C1_Init+0x54>)
 8000f38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <MX_I2C1_Init+0x50>)
 8000f3c:	4a12      	ldr	r2, [pc, #72]	@ (8000f88 <MX_I2C1_Init+0x58>)
 8000f3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <MX_I2C1_Init+0x50>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <MX_I2C1_Init+0x50>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <MX_I2C1_Init+0x50>)
 8000f4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f54:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <MX_I2C1_Init+0x50>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <MX_I2C1_Init+0x50>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f60:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <MX_I2C1_Init+0x50>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_I2C1_Init+0x50>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	@ (8000f80 <MX_I2C1_Init+0x50>)
 8000f6e:	f001 f8a1 	bl	80020b4 <HAL_I2C_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f78:	f000 fa82 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000098 	.word	0x20000098
 8000f84:	40005400 	.word	0x40005400
 8000f88:	000186a0 	.word	0x000186a0

08000f8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f90:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <MX_SPI1_Init+0x64>)
 8000f92:	4a18      	ldr	r2, [pc, #96]	@ (8000ff4 <MX_SPI1_Init+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f96:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <MX_SPI1_Init+0x64>)
 8000f98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <MX_SPI1_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <MX_SPI1_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <MX_SPI1_Init+0x64>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <MX_SPI1_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <MX_SPI1_Init+0x64>)
 8000fb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <MX_SPI1_Init+0x64>)
 8000fc0:	2228      	movs	r2, #40	@ 0x28
 8000fc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <MX_SPI1_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <MX_SPI1_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <MX_SPI1_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <MX_SPI1_Init+0x64>)
 8000fd8:	220a      	movs	r2, #10
 8000fda:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fdc:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <MX_SPI1_Init+0x64>)
 8000fde:	f002 fe63 	bl	8003ca8 <HAL_SPI_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fe8:	f000 fa4a 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200000ec 	.word	0x200000ec
 8000ff4:	40013000 	.word	0x40013000

08000ff8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	@ (800105c <MX_SPI2_Init+0x64>)
 8000ffe:	4a18      	ldr	r2, [pc, #96]	@ (8001060 <MX_SPI2_Init+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001002:	4b16      	ldr	r3, [pc, #88]	@ (800105c <MX_SPI2_Init+0x64>)
 8001004:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001008:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800100a:	4b14      	ldr	r3, [pc, #80]	@ (800105c <MX_SPI2_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <MX_SPI2_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001016:	4b11      	ldr	r3, [pc, #68]	@ (800105c <MX_SPI2_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800101c:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <MX_SPI2_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001022:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <MX_SPI2_Init+0x64>)
 8001024:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001028:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800102a:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <MX_SPI2_Init+0x64>)
 800102c:	2220      	movs	r2, #32
 800102e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001030:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <MX_SPI2_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <MX_SPI2_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800103c:	4b07      	ldr	r3, [pc, #28]	@ (800105c <MX_SPI2_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <MX_SPI2_Init+0x64>)
 8001044:	220a      	movs	r2, #10
 8001046:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	@ (800105c <MX_SPI2_Init+0x64>)
 800104a:	f002 fe2d 	bl	8003ca8 <HAL_SPI_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001054:	f000 fa14 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000144 	.word	0x20000144
 8001060:	40003800 	.word	0x40003800

08001064 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001078:	463b      	mov	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001080:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <MX_TIM3_Init+0x94>)
 8001082:	4a1e      	ldr	r2, [pc, #120]	@ (80010fc <MX_TIM3_Init+0x98>)
 8001084:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 8001086:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <MX_TIM3_Init+0x94>)
 8001088:	220b      	movs	r2, #11
 800108a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <MX_TIM3_Init+0x94>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001092:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <MX_TIM3_Init+0x94>)
 8001094:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001098:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_TIM3_Init+0x94>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <MX_TIM3_Init+0x94>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010a6:	4814      	ldr	r0, [pc, #80]	@ (80010f8 <MX_TIM3_Init+0x94>)
 80010a8:	f003 f8a8 	bl	80041fc <HAL_TIM_Base_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010b2:	f000 f9e5 	bl	8001480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	4619      	mov	r1, r3
 80010c2:	480d      	ldr	r0, [pc, #52]	@ (80010f8 <MX_TIM3_Init+0x94>)
 80010c4:	f003 f9d9 	bl	800447a <HAL_TIM_ConfigClockSource>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80010ce:	f000 f9d7 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	@ (80010f8 <MX_TIM3_Init+0x94>)
 80010e0:	f003 fbfa 	bl	80048d8 <HAL_TIMEx_MasterConfigSynchronization>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80010ea:	f000 f9c9 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000019c 	.word	0x2000019c
 80010fc:	40000400 	.word	0x40000400

08001100 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <MX_TIM6_Init+0x64>)
 8001110:	4a15      	ldr	r2, [pc, #84]	@ (8001168 <MX_TIM6_Init+0x68>)
 8001112:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001114:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <MX_TIM6_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <MX_TIM6_Init+0x64>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001120:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <MX_TIM6_Init+0x64>)
 8001122:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001126:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <MX_TIM6_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800112e:	480d      	ldr	r0, [pc, #52]	@ (8001164 <MX_TIM6_Init+0x64>)
 8001130:	f003 f864 	bl	80041fc <HAL_TIM_Base_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800113a:	f000 f9a1 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800113e:	2310      	movs	r3, #16
 8001140:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	@ (8001164 <MX_TIM6_Init+0x64>)
 800114c:	f003 fbc4 	bl	80048d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001156:	f000 f993 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200001e4 	.word	0x200001e4
 8001168:	40001000 	.word	0x40001000

0800116c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001172:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <MX_USART2_UART_Init+0x50>)
 8001174:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001178:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800117c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117e:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001192:	220c      	movs	r2, #12
 8001194:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001196:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 80011a4:	f003 fc28 	bl	80049f8 <HAL_UART_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ae:	f000 f967 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000022c 	.word	0x2000022c
 80011bc:	40004400 	.word	0x40004400

080011c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011c4:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80011ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ce:	2204      	movs	r2, #4
 80011d0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d4:	2202      	movs	r2, #2
 80011d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011da:	2200      	movs	r2, #0
 80011dc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e0:	2202      	movs	r2, #2
 80011e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011f0:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001204:	f001 f89a 	bl	800233c <HAL_PCD_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800120e:	f000 f937 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000274 	.word	0x20000274

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	@ 0x30
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	4b8c      	ldr	r3, [pc, #560]	@ (8001468 <MX_GPIO_Init+0x24c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a8b      	ldr	r2, [pc, #556]	@ (8001468 <MX_GPIO_Init+0x24c>)
 800123c:	f043 0310 	orr.w	r3, r3, #16
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b89      	ldr	r3, [pc, #548]	@ (8001468 <MX_GPIO_Init+0x24c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	61bb      	str	r3, [r7, #24]
 800124c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	4b85      	ldr	r3, [pc, #532]	@ (8001468 <MX_GPIO_Init+0x24c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a84      	ldr	r2, [pc, #528]	@ (8001468 <MX_GPIO_Init+0x24c>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b82      	ldr	r3, [pc, #520]	@ (8001468 <MX_GPIO_Init+0x24c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b7e      	ldr	r3, [pc, #504]	@ (8001468 <MX_GPIO_Init+0x24c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a7d      	ldr	r2, [pc, #500]	@ (8001468 <MX_GPIO_Init+0x24c>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b7b      	ldr	r3, [pc, #492]	@ (8001468 <MX_GPIO_Init+0x24c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b77      	ldr	r3, [pc, #476]	@ (8001468 <MX_GPIO_Init+0x24c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a76      	ldr	r2, [pc, #472]	@ (8001468 <MX_GPIO_Init+0x24c>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b74      	ldr	r3, [pc, #464]	@ (8001468 <MX_GPIO_Init+0x24c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	4b70      	ldr	r3, [pc, #448]	@ (8001468 <MX_GPIO_Init+0x24c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a6f      	ldr	r2, [pc, #444]	@ (8001468 <MX_GPIO_Init+0x24c>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001468 <MX_GPIO_Init+0x24c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b69      	ldr	r3, [pc, #420]	@ (8001468 <MX_GPIO_Init+0x24c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a68      	ldr	r2, [pc, #416]	@ (8001468 <MX_GPIO_Init+0x24c>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b66      	ldr	r3, [pc, #408]	@ (8001468 <MX_GPIO_Init+0x24c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2108      	movs	r1, #8
 80012de:	4863      	ldr	r0, [pc, #396]	@ (800146c <MX_GPIO_Init+0x250>)
 80012e0:	f000 fece 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_CS_Pin|DAT_COM_Pin|RST_Pin|PWR_Pin, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	f242 2182 	movw	r1, #8834	@ 0x2282
 80012ea:	4861      	ldr	r0, [pc, #388]	@ (8001470 <MX_GPIO_Init+0x254>)
 80012ec:	f000 fec8 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2101      	movs	r1, #1
 80012f4:	485e      	ldr	r0, [pc, #376]	@ (8001470 <MX_GPIO_Init+0x254>)
 80012f6:	f000 fec3 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012fa:	2200      	movs	r2, #0
 80012fc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001300:	485c      	ldr	r0, [pc, #368]	@ (8001474 <MX_GPIO_Init+0x258>)
 8001302:	f000 febd 	bl	8002080 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001306:	2308      	movs	r3, #8
 8001308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130a:	2301      	movs	r3, #1
 800130c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	4853      	ldr	r0, [pc, #332]	@ (800146c <MX_GPIO_Init+0x250>)
 800131e:	f000 fcfb 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin OTG_FS_PowerSwitchOn_Pin DAT_COM_Pin RST_Pin
                           PWR_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|OTG_FS_PowerSwitchOn_Pin|DAT_COM_Pin|RST_Pin
 8001322:	f242 2383 	movw	r3, #8835	@ 0x2283
 8001326:	61fb      	str	r3, [r7, #28]
                          |PWR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	484d      	ldr	r0, [pc, #308]	@ (8001470 <MX_GPIO_Init+0x254>)
 800133c:	f000 fcec 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001340:	2308      	movs	r3, #8
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001350:	2305      	movs	r3, #5
 8001352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4845      	ldr	r0, [pc, #276]	@ (8001470 <MX_GPIO_Init+0x254>)
 800135c:	f000 fcdc 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001360:	2301      	movs	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001364:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	4619      	mov	r1, r3
 8001374:	4840      	ldr	r0, [pc, #256]	@ (8001478 <MX_GPIO_Init+0x25c>)
 8001376:	f000 fccf 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800137a:	2310      	movs	r3, #16
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800138a:	2306      	movs	r3, #6
 800138c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	4838      	ldr	r0, [pc, #224]	@ (8001478 <MX_GPIO_Init+0x25c>)
 8001396:	f000 fcbf 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800139a:	2304      	movs	r3, #4
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4833      	ldr	r0, [pc, #204]	@ (800147c <MX_GPIO_Init+0x260>)
 80013ae:	f000 fcb3 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80013b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013c4:	2305      	movs	r3, #5
 80013c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	482b      	ldr	r0, [pc, #172]	@ (800147c <MX_GPIO_Init+0x260>)
 80013d0:	f000 fca2 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013d4:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80013d8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	4619      	mov	r1, r3
 80013ec:	4821      	ldr	r0, [pc, #132]	@ (8001474 <MX_GPIO_Init+0x258>)
 80013ee:	f000 fc93 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 80013f2:	2340      	movs	r3, #64	@ 0x40
 80013f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	4619      	mov	r1, r3
 8001404:	481a      	ldr	r0, [pc, #104]	@ (8001470 <MX_GPIO_Init+0x254>)
 8001406:	f000 fc87 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 800140a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800140e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800141c:	2306      	movs	r3, #6
 800141e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	4812      	ldr	r0, [pc, #72]	@ (8001470 <MX_GPIO_Init+0x254>)
 8001428:	f000 fc76 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800142c:	2320      	movs	r3, #32
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4619      	mov	r1, r3
 800143e:	480d      	ldr	r0, [pc, #52]	@ (8001474 <MX_GPIO_Init+0x258>)
 8001440:	f000 fc6a 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001444:	2302      	movs	r3, #2
 8001446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001448:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800144c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	4804      	ldr	r0, [pc, #16]	@ (800146c <MX_GPIO_Init+0x250>)
 800145a:	f000 fc5d 	bl	8001d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800145e:	bf00      	nop
 8001460:	3730      	adds	r7, #48	@ 0x30
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40021000 	.word	0x40021000
 8001470:	40020800 	.word	0x40020800
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40020000 	.word	0x40020000
 800147c:	40020400 	.word	0x40020400

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <Error_Handler+0x8>

0800148c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <HAL_MspInit+0x4c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	4a0f      	ldr	r2, [pc, #60]	@ (80014d8 <HAL_MspInit+0x4c>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014a2:	4b0d      	ldr	r3, [pc, #52]	@ (80014d8 <HAL_MspInit+0x4c>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	4a08      	ldr	r2, [pc, #32]	@ (80014d8 <HAL_MspInit+0x4c>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_MspInit+0x4c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ca:	2007      	movs	r0, #7
 80014cc:	f000 fbe2 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a19      	ldr	r2, [pc, #100]	@ (8001560 <HAL_I2C_MspInit+0x84>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d12c      	bne.n	8001558 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <HAL_I2C_MspInit+0x88>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a17      	ldr	r2, [pc, #92]	@ (8001564 <HAL_I2C_MspInit+0x88>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <HAL_I2C_MspInit+0x88>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800151a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800151e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001520:	2312      	movs	r3, #18
 8001522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001524:	2301      	movs	r3, #1
 8001526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800152c:	2304      	movs	r3, #4
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	480c      	ldr	r0, [pc, #48]	@ (8001568 <HAL_I2C_MspInit+0x8c>)
 8001538:	f000 fbee 	bl	8001d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <HAL_I2C_MspInit+0x88>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001544:	4a07      	ldr	r2, [pc, #28]	@ (8001564 <HAL_I2C_MspInit+0x88>)
 8001546:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800154a:	6413      	str	r3, [r2, #64]	@ 0x40
 800154c:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <HAL_I2C_MspInit+0x88>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001558:	bf00      	nop
 800155a:	3728      	adds	r7, #40	@ 0x28
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40005400 	.word	0x40005400
 8001564:	40023800 	.word	0x40023800
 8001568:	40020400 	.word	0x40020400

0800156c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	@ 0x30
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a32      	ldr	r2, [pc, #200]	@ (8001654 <HAL_SPI_MspInit+0xe8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d12c      	bne.n	80015e8 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	4b31      	ldr	r3, [pc, #196]	@ (8001658 <HAL_SPI_MspInit+0xec>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	4a30      	ldr	r2, [pc, #192]	@ (8001658 <HAL_SPI_MspInit+0xec>)
 8001598:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800159c:	6453      	str	r3, [r2, #68]	@ 0x44
 800159e:	4b2e      	ldr	r3, [pc, #184]	@ (8001658 <HAL_SPI_MspInit+0xec>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001658 <HAL_SPI_MspInit+0xec>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	4a29      	ldr	r2, [pc, #164]	@ (8001658 <HAL_SPI_MspInit+0xec>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ba:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <HAL_SPI_MspInit+0xec>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80015c6:	23e0      	movs	r3, #224	@ 0xe0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015d6:	2305      	movs	r3, #5
 80015d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	481e      	ldr	r0, [pc, #120]	@ (800165c <HAL_SPI_MspInit+0xf0>)
 80015e2:	f000 fb99 	bl	8001d18 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015e6:	e031      	b.n	800164c <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001660 <HAL_SPI_MspInit+0xf4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d12c      	bne.n	800164c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <HAL_SPI_MspInit+0xec>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	4a17      	ldr	r2, [pc, #92]	@ (8001658 <HAL_SPI_MspInit+0xec>)
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001600:	6413      	str	r3, [r2, #64]	@ 0x40
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <HAL_SPI_MspInit+0xec>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <HAL_SPI_MspInit+0xec>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a10      	ldr	r2, [pc, #64]	@ (8001658 <HAL_SPI_MspInit+0xec>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <HAL_SPI_MspInit+0xec>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800162a:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800163c:	2305      	movs	r3, #5
 800163e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	4807      	ldr	r0, [pc, #28]	@ (8001664 <HAL_SPI_MspInit+0xf8>)
 8001648:	f000 fb66 	bl	8001d18 <HAL_GPIO_Init>
}
 800164c:	bf00      	nop
 800164e:	3730      	adds	r7, #48	@ 0x30
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40013000 	.word	0x40013000
 8001658:	40023800 	.word	0x40023800
 800165c:	40020000 	.word	0x40020000
 8001660:	40003800 	.word	0x40003800
 8001664:	40020400 	.word	0x40020400

08001668 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a1c      	ldr	r2, [pc, #112]	@ (80016e8 <HAL_TIM_Base_MspInit+0x80>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d116      	bne.n	80016a8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <HAL_TIM_Base_MspInit+0x84>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	4a1a      	ldr	r2, [pc, #104]	@ (80016ec <HAL_TIM_Base_MspInit+0x84>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6413      	str	r3, [r2, #64]	@ 0x40
 800168a:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <HAL_TIM_Base_MspInit+0x84>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	201d      	movs	r0, #29
 800169c:	f000 fb05 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016a0:	201d      	movs	r0, #29
 80016a2:	f000 fb1e 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 80016a6:	e01a      	b.n	80016de <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a10      	ldr	r2, [pc, #64]	@ (80016f0 <HAL_TIM_Base_MspInit+0x88>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d115      	bne.n	80016de <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <HAL_TIM_Base_MspInit+0x84>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	4a0c      	ldr	r2, [pc, #48]	@ (80016ec <HAL_TIM_Base_MspInit+0x84>)
 80016bc:	f043 0310 	orr.w	r3, r3, #16
 80016c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <HAL_TIM_Base_MspInit+0x84>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2036      	movs	r0, #54	@ 0x36
 80016d4:	f000 fae9 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016d8:	2036      	movs	r0, #54	@ 0x36
 80016da:	f000 fb02 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40000400 	.word	0x40000400
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40001000 	.word	0x40001000

080016f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	@ 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a19      	ldr	r2, [pc, #100]	@ (8001778 <HAL_UART_MspInit+0x84>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d12b      	bne.n	800176e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b18      	ldr	r3, [pc, #96]	@ (800177c <HAL_UART_MspInit+0x88>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	4a17      	ldr	r2, [pc, #92]	@ (800177c <HAL_UART_MspInit+0x88>)
 8001720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001724:	6413      	str	r3, [r2, #64]	@ 0x40
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <HAL_UART_MspInit+0x88>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <HAL_UART_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4a10      	ldr	r2, [pc, #64]	@ (800177c <HAL_UART_MspInit+0x88>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	@ 0x30
 8001742:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <HAL_UART_MspInit+0x88>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800174e:	230c      	movs	r3, #12
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800175e:	2307      	movs	r3, #7
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	4805      	ldr	r0, [pc, #20]	@ (8001780 <HAL_UART_MspInit+0x8c>)
 800176a:	f000 fad5 	bl	8001d18 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	@ 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40004400 	.word	0x40004400
 800177c:	40023800 	.word	0x40023800
 8001780:	40020000 	.word	0x40020000

08001784 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	@ 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017a4:	d147      	bne.n	8001836 <HAL_PCD_MspInit+0xb2>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b25      	ldr	r3, [pc, #148]	@ (8001840 <HAL_PCD_MspInit+0xbc>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a24      	ldr	r2, [pc, #144]	@ (8001840 <HAL_PCD_MspInit+0xbc>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b22      	ldr	r3, [pc, #136]	@ (8001840 <HAL_PCD_MspInit+0xbc>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80017c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	481b      	ldr	r0, [pc, #108]	@ (8001844 <HAL_PCD_MspInit+0xc0>)
 80017d8:	f000 fa9e 	bl	8001d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80017dc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017ee:	230a      	movs	r3, #10
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	4812      	ldr	r0, [pc, #72]	@ (8001844 <HAL_PCD_MspInit+0xc0>)
 80017fa:	f000 fa8d 	bl	8001d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017fe:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <HAL_PCD_MspInit+0xbc>)
 8001800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001802:	4a0f      	ldr	r2, [pc, #60]	@ (8001840 <HAL_PCD_MspInit+0xbc>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001808:	6353      	str	r3, [r2, #52]	@ 0x34
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <HAL_PCD_MspInit+0xbc>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	4a0b      	ldr	r2, [pc, #44]	@ (8001840 <HAL_PCD_MspInit+0xbc>)
 8001814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001818:	6453      	str	r3, [r2, #68]	@ 0x44
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <HAL_PCD_MspInit+0xbc>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	2043      	movs	r0, #67	@ 0x43
 800182c:	f000 fa3d 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001830:	2043      	movs	r0, #67	@ 0x43
 8001832:	f000 fa56 	bl	8001ce2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	@ 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40020000 	.word	0x40020000

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <NMI_Handler+0x4>

08001850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <MemManage_Handler+0x4>

08001860 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <BusFault_Handler+0x4>

08001868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <UsageFault_Handler+0x4>

08001870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189e:	f000 f8e5 	bl	8001a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <TIM3_IRQHandler+0x10>)
 80018ae:	f002 fcf4 	bl	800429a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2000019c 	.word	0x2000019c

080018bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <TIM6_DAC_IRQHandler+0x10>)
 80018c2:	f002 fcea 	bl	800429a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200001e4 	.word	0x200001e4

080018d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <OTG_FS_IRQHandler+0x10>)
 80018d6:	f000 fe40 	bl	800255a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000274 	.word	0x20000274

080018e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ec:	4a14      	ldr	r2, [pc, #80]	@ (8001940 <_sbrk+0x5c>)
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <_sbrk+0x60>)
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f8:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <_sbrk+0x64>)
 8001902:	4a12      	ldr	r2, [pc, #72]	@ (800194c <_sbrk+0x68>)
 8001904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <_sbrk+0x64>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	429a      	cmp	r2, r3
 8001912:	d207      	bcs.n	8001924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001914:	f004 fb8e 	bl	8006034 <__errno>
 8001918:	4603      	mov	r3, r0
 800191a:	220c      	movs	r2, #12
 800191c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	e009      	b.n	8001938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001924:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800192a:	4b07      	ldr	r3, [pc, #28]	@ (8001948 <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	4a05      	ldr	r2, [pc, #20]	@ (8001948 <_sbrk+0x64>)
 8001934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20020000 	.word	0x20020000
 8001944:	00004000 	.word	0x00004000
 8001948:	20000758 	.word	0x20000758
 800194c:	200008a8 	.word	0x200008a8

08001950 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <SystemInit+0x20>)
 8001956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800195a:	4a05      	ldr	r2, [pc, #20]	@ (8001970 <SystemInit+0x20>)
 800195c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001960:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001974:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001978:	f7ff ffea 	bl	8001950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800197c:	480c      	ldr	r0, [pc, #48]	@ (80019b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800197e:	490d      	ldr	r1, [pc, #52]	@ (80019b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001980:	4a0d      	ldr	r2, [pc, #52]	@ (80019b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001984:	e002      	b.n	800198c <LoopCopyDataInit>

08001986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198a:	3304      	adds	r3, #4

0800198c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800198c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001990:	d3f9      	bcc.n	8001986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001992:	4a0a      	ldr	r2, [pc, #40]	@ (80019bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001994:	4c0a      	ldr	r4, [pc, #40]	@ (80019c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001998:	e001      	b.n	800199e <LoopFillZerobss>

0800199a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800199c:	3204      	adds	r2, #4

0800199e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a0:	d3fb      	bcc.n	800199a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019a2:	f004 fb4d 	bl	8006040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a6:	f7ff f9e5 	bl	8000d74 <main>
  bx  lr    
 80019aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80019b8:	08009378 	.word	0x08009378
  ldr r2, =_sbss
 80019bc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80019c0:	200008a8 	.word	0x200008a8

080019c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c4:	e7fe      	b.n	80019c4 <ADC_IRQHandler>
	...

080019c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <HAL_Init+0x40>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a08 <HAL_Init+0x40>)
 80019d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <HAL_Init+0x40>)
 80019de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e4:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a07      	ldr	r2, [pc, #28]	@ (8001a08 <HAL_Init+0x40>)
 80019ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f0:	2003      	movs	r0, #3
 80019f2:	f000 f94f 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f000 f808 	bl	8001a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019fc:	f7ff fd46 	bl	800148c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023c00 	.word	0x40023c00

08001a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_InitTick+0x54>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_InitTick+0x58>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f967 	bl	8001cfe <HAL_SYSTICK_Config>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00e      	b.n	8001a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d80a      	bhi.n	8001a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a40:	2200      	movs	r2, #0
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f000 f92f 	bl	8001caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a4c:	4a06      	ldr	r2, [pc, #24]	@ (8001a68 <HAL_InitTick+0x5c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000008 	.word	0x20000008
 8001a68:	20000004 	.word	0x20000004

08001a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_IncTick+0x20>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_IncTick+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <HAL_IncTick+0x24>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000008 	.word	0x20000008
 8001a90:	2000075c 	.word	0x2000075c

08001a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;
 8001a98:	4b03      	ldr	r3, [pc, #12]	@ (8001aa8 <HAL_GetTick+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	2000075c 	.word	0x2000075c

08001aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff ffee 	bl	8001a94 <HAL_GetTick>
 8001ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d005      	beq.n	8001ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <HAL_Delay+0x44>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ad2:	bf00      	nop
 8001ad4:	f7ff ffde 	bl	8001a94 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d8f7      	bhi.n	8001ad4 <HAL_Delay+0x28>
  {
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000008 	.word	0x20000008

08001af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b04:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b26:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	60d3      	str	r3, [r2, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b40:	4b04      	ldr	r3, [pc, #16]	@ (8001b54 <__NVIC_GetPriorityGrouping+0x18>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0307 	and.w	r3, r3, #7
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db0b      	blt.n	8001b82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	4907      	ldr	r1, [pc, #28]	@ (8001b90 <__NVIC_EnableIRQ+0x38>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	2001      	movs	r0, #1
 8001b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000e100 	.word	0xe000e100

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	@ (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	@ (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	@ 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	@ 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f7ff ff8e 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff29 	bl	8001af4 <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff3e 	bl	8001b3c <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff8e 	bl	8001be8 <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5d 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff31 	bl	8001b58 <__NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffa2 	bl	8001c50 <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	@ 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	e16b      	b.n	800200c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d34:	2201      	movs	r2, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	f040 815a 	bne.w	8002006 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d005      	beq.n	8001d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d130      	bne.n	8001dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2203      	movs	r2, #3
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da0:	2201      	movs	r2, #1
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 0201 	and.w	r2, r3, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d017      	beq.n	8001e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d123      	bne.n	8001e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	08da      	lsrs	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3208      	adds	r2, #8
 8001e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	08da      	lsrs	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3208      	adds	r2, #8
 8001e56:	69b9      	ldr	r1, [r7, #24]
 8001e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0203 	and.w	r2, r3, #3
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80b4 	beq.w	8002006 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b60      	ldr	r3, [pc, #384]	@ (8002024 <HAL_GPIO_Init+0x30c>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea6:	4a5f      	ldr	r2, [pc, #380]	@ (8002024 <HAL_GPIO_Init+0x30c>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eae:	4b5d      	ldr	r3, [pc, #372]	@ (8002024 <HAL_GPIO_Init+0x30c>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eba:	4a5b      	ldr	r2, [pc, #364]	@ (8002028 <HAL_GPIO_Init+0x310>)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a52      	ldr	r2, [pc, #328]	@ (800202c <HAL_GPIO_Init+0x314>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d02b      	beq.n	8001f3e <HAL_GPIO_Init+0x226>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a51      	ldr	r2, [pc, #324]	@ (8002030 <HAL_GPIO_Init+0x318>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d025      	beq.n	8001f3a <HAL_GPIO_Init+0x222>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a50      	ldr	r2, [pc, #320]	@ (8002034 <HAL_GPIO_Init+0x31c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01f      	beq.n	8001f36 <HAL_GPIO_Init+0x21e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4f      	ldr	r2, [pc, #316]	@ (8002038 <HAL_GPIO_Init+0x320>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0x21a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4e      	ldr	r2, [pc, #312]	@ (800203c <HAL_GPIO_Init+0x324>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x216>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4d      	ldr	r2, [pc, #308]	@ (8002040 <HAL_GPIO_Init+0x328>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x212>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4c      	ldr	r2, [pc, #304]	@ (8002044 <HAL_GPIO_Init+0x32c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x20e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4b      	ldr	r2, [pc, #300]	@ (8002048 <HAL_GPIO_Init+0x330>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x20a>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	e00e      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f22:	2308      	movs	r3, #8
 8001f24:	e00c      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f26:	2306      	movs	r3, #6
 8001f28:	e00a      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f2a:	2305      	movs	r3, #5
 8001f2c:	e008      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f2e:	2304      	movs	r3, #4
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f32:	2303      	movs	r3, #3
 8001f34:	e004      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_GPIO_Init+0x228>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	f002 0203 	and.w	r2, r2, #3
 8001f46:	0092      	lsls	r2, r2, #2
 8001f48:	4093      	lsls	r3, r2
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f50:	4935      	ldr	r1, [pc, #212]	@ (8002028 <HAL_GPIO_Init+0x310>)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	3302      	adds	r3, #2
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800204c <HAL_GPIO_Init+0x334>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f82:	4a32      	ldr	r2, [pc, #200]	@ (800204c <HAL_GPIO_Init+0x334>)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f88:	4b30      	ldr	r3, [pc, #192]	@ (800204c <HAL_GPIO_Init+0x334>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fac:	4a27      	ldr	r2, [pc, #156]	@ (800204c <HAL_GPIO_Init+0x334>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fb2:	4b26      	ldr	r3, [pc, #152]	@ (800204c <HAL_GPIO_Init+0x334>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800204c <HAL_GPIO_Init+0x334>)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_GPIO_Init+0x334>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002000:	4a12      	ldr	r2, [pc, #72]	@ (800204c <HAL_GPIO_Init+0x334>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3301      	adds	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b0f      	cmp	r3, #15
 8002010:	f67f ae90 	bls.w	8001d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3724      	adds	r7, #36	@ 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	40013800 	.word	0x40013800
 800202c:	40020000 	.word	0x40020000
 8002030:	40020400 	.word	0x40020400
 8002034:	40020800 	.word	0x40020800
 8002038:	40020c00 	.word	0x40020c00
 800203c:	40021000 	.word	0x40021000
 8002040:	40021400 	.word	0x40021400
 8002044:	40021800 	.word	0x40021800
 8002048:	40021c00 	.word	0x40021c00
 800204c:	40013c00 	.word	0x40013c00

08002050 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	887b      	ldrh	r3, [r7, #2]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e001      	b.n	8002072 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002072:	7bfb      	ldrb	r3, [r7, #15]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
 800208c:	4613      	mov	r3, r2
 800208e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002090:	787b      	ldrb	r3, [r7, #1]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800209c:	e003      	b.n	80020a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800209e:	887b      	ldrh	r3, [r7, #2]
 80020a0:	041a      	lsls	r2, r3, #16
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	619a      	str	r2, [r3, #24]
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e12b      	b.n	800231e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d106      	bne.n	80020e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff f9fe 	bl	80014dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2224      	movs	r2, #36	@ 0x24
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002106:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002116:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002118:	f001 fd9e 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 800211c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4a81      	ldr	r2, [pc, #516]	@ (8002328 <HAL_I2C_Init+0x274>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d807      	bhi.n	8002138 <HAL_I2C_Init+0x84>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4a80      	ldr	r2, [pc, #512]	@ (800232c <HAL_I2C_Init+0x278>)
 800212c:	4293      	cmp	r3, r2
 800212e:	bf94      	ite	ls
 8002130:	2301      	movls	r3, #1
 8002132:	2300      	movhi	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	e006      	b.n	8002146 <HAL_I2C_Init+0x92>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4a7d      	ldr	r2, [pc, #500]	@ (8002330 <HAL_I2C_Init+0x27c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	bf94      	ite	ls
 8002140:	2301      	movls	r3, #1
 8002142:	2300      	movhi	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e0e7      	b.n	800231e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4a78      	ldr	r2, [pc, #480]	@ (8002334 <HAL_I2C_Init+0x280>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	0c9b      	lsrs	r3, r3, #18
 8002158:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	430a      	orrs	r2, r1
 800216c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4a6a      	ldr	r2, [pc, #424]	@ (8002328 <HAL_I2C_Init+0x274>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d802      	bhi.n	8002188 <HAL_I2C_Init+0xd4>
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	3301      	adds	r3, #1
 8002186:	e009      	b.n	800219c <HAL_I2C_Init+0xe8>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	4a69      	ldr	r2, [pc, #420]	@ (8002338 <HAL_I2C_Init+0x284>)
 8002194:	fba2 2303 	umull	r2, r3, r2, r3
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	3301      	adds	r3, #1
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	495c      	ldr	r1, [pc, #368]	@ (8002328 <HAL_I2C_Init+0x274>)
 80021b8:	428b      	cmp	r3, r1
 80021ba:	d819      	bhi.n	80021f0 <HAL_I2C_Init+0x13c>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1e59      	subs	r1, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ca:	1c59      	adds	r1, r3, #1
 80021cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021d0:	400b      	ands	r3, r1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_I2C_Init+0x138>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1e59      	subs	r1, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ea:	e051      	b.n	8002290 <HAL_I2C_Init+0x1dc>
 80021ec:	2304      	movs	r3, #4
 80021ee:	e04f      	b.n	8002290 <HAL_I2C_Init+0x1dc>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d111      	bne.n	800221c <HAL_I2C_Init+0x168>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1e58      	subs	r0, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6859      	ldr	r1, [r3, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	440b      	add	r3, r1
 8002206:	fbb0 f3f3 	udiv	r3, r0, r3
 800220a:	3301      	adds	r3, #1
 800220c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf0c      	ite	eq
 8002214:	2301      	moveq	r3, #1
 8002216:	2300      	movne	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	e012      	b.n	8002242 <HAL_I2C_Init+0x18e>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1e58      	subs	r0, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6859      	ldr	r1, [r3, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	0099      	lsls	r1, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002232:	3301      	adds	r3, #1
 8002234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_I2C_Init+0x196>
 8002246:	2301      	movs	r3, #1
 8002248:	e022      	b.n	8002290 <HAL_I2C_Init+0x1dc>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10e      	bne.n	8002270 <HAL_I2C_Init+0x1bc>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1e58      	subs	r0, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6859      	ldr	r1, [r3, #4]
 800225a:	460b      	mov	r3, r1
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	440b      	add	r3, r1
 8002260:	fbb0 f3f3 	udiv	r3, r0, r3
 8002264:	3301      	adds	r3, #1
 8002266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800226a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800226e:	e00f      	b.n	8002290 <HAL_I2C_Init+0x1dc>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1e58      	subs	r0, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	0099      	lsls	r1, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	fbb0 f3f3 	udiv	r3, r0, r3
 8002286:	3301      	adds	r3, #1
 8002288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	6809      	ldr	r1, [r1, #0]
 8002294:	4313      	orrs	r3, r2
 8002296:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69da      	ldr	r2, [r3, #28]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6911      	ldr	r1, [r2, #16]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68d2      	ldr	r2, [r2, #12]
 80022ca:	4311      	orrs	r1, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	430b      	orrs	r3, r1
 80022d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	000186a0 	.word	0x000186a0
 800232c:	001e847f 	.word	0x001e847f
 8002330:	003d08ff 	.word	0x003d08ff
 8002334:	431bde83 	.word	0x431bde83
 8002338:	10624dd3 	.word	0x10624dd3

0800233c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af02      	add	r7, sp, #8
 8002342:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e101      	b.n	8002552 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d106      	bne.n	800236e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff fa0b 	bl	8001784 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2203      	movs	r2, #3
 8002372:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800237c:	d102      	bne.n	8002384 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f003 f847 	bl	800541c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	7c1a      	ldrb	r2, [r3, #16]
 8002396:	f88d 2000 	strb.w	r2, [sp]
 800239a:	3304      	adds	r3, #4
 800239c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800239e:	f002 ff37 	bl	8005210 <USB_CoreInit>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0ce      	b.n	8002552 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f003 f83f 	bl	800543e <USB_SetCurrentMode>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2202      	movs	r2, #2
 80023ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0bf      	b.n	8002552 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]
 80023d6:	e04a      	b.n	800246e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	3315      	adds	r3, #21
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	3314      	adds	r3, #20
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	b298      	uxth	r0, r3
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	332e      	adds	r3, #46	@ 0x2e
 8002414:	4602      	mov	r2, r0
 8002416:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	3318      	adds	r3, #24
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	331c      	adds	r3, #28
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	3320      	adds	r3, #32
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	3324      	adds	r3, #36	@ 0x24
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	3301      	adds	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	791b      	ldrb	r3, [r3, #4]
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	429a      	cmp	r2, r3
 8002476:	d3af      	bcc.n	80023d8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e044      	b.n	8002508 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800247e:	7bfa      	ldrb	r2, [r7, #15]
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4413      	add	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002494:	7bfa      	ldrb	r2, [r7, #15]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024c0:	7bfa      	ldrb	r2, [r7, #15]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	3301      	adds	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	791b      	ldrb	r3, [r3, #4]
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	429a      	cmp	r2, r3
 8002510:	d3b5      	bcc.n	800247e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7c1a      	ldrb	r2, [r3, #16]
 800251a:	f88d 2000 	strb.w	r2, [sp]
 800251e:	3304      	adds	r3, #4
 8002520:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002522:	f002 ffd9 	bl	80054d8 <USB_DevInit>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e00c      	b.n	8002552 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f003 fb06 	bl	8005b5c <USB_DevDisconnect>

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800255a:	b590      	push	{r4, r7, lr}
 800255c:	b08d      	sub	sp, #52	@ 0x34
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f003 fba7 	bl	8005cc4 <USB_GetMode>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	f040 848c 	bne.w	8002e96 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f003 fb0b 	bl	8005b9e <USB_ReadInterrupts>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 8482 	beq.w	8002e94 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f003 faf8 	bl	8005b9e <USB_ReadInterrupts>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d107      	bne.n	80025c8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f002 0202 	and.w	r2, r2, #2
 80025c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 fae6 	bl	8005b9e <USB_ReadInterrupts>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d161      	bne.n	80026a0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0210 	bic.w	r2, r2, #16
 80025ea:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f003 020f 	and.w	r2, r3, #15
 80025f8:	4613      	mov	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4413      	add	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	4413      	add	r3, r2
 8002608:	3304      	adds	r3, #4
 800260a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002612:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002616:	d124      	bne.n	8002662 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d035      	beq.n	8002690 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800262e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002632:	b29b      	uxth	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	6a38      	ldr	r0, [r7, #32]
 8002638:	f003 fa38 	bl	8005aac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002648:	441a      	add	r2, r3
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800265a:	441a      	add	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	615a      	str	r2, [r3, #20]
 8002660:	e016      	b.n	8002690 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002668:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800266c:	d110      	bne.n	8002690 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002674:	2208      	movs	r2, #8
 8002676:	4619      	mov	r1, r3
 8002678:	6a38      	ldr	r0, [r7, #32]
 800267a:	f003 fa17 	bl	8005aac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800268a:	441a      	add	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0210 	orr.w	r2, r2, #16
 800269e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f003 fa7a 	bl	8005b9e <USB_ReadInterrupts>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80026b4:	f040 80a7 	bne.w	8002806 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f003 fa7f 	bl	8005bc4 <USB_ReadDevAllOutEpInterrupt>
 80026c6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80026c8:	e099      	b.n	80027fe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80026ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 808e 	beq.w	80027f2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f003 faa3 	bl	8005c2c <USB_ReadDevOutEPInterrupt>
 80026e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00c      	beq.n	800270c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026fe:	461a      	mov	r2, r3
 8002700:	2301      	movs	r3, #1
 8002702:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002704:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fcfc 	bl	8003104 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00c      	beq.n	8002730 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	4413      	add	r3, r2
 800271e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002722:	461a      	mov	r2, r3
 8002724:	2308      	movs	r3, #8
 8002726:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002728:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fdd2 	bl	80032d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	4413      	add	r3, r2
 8002742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002746:	461a      	mov	r2, r3
 8002748:	2310      	movs	r3, #16
 800274a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d030      	beq.n	80027b8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275e:	2b80      	cmp	r3, #128	@ 0x80
 8002760:	d109      	bne.n	8002776 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002770:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002774:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	4413      	add	r3, r2
 8002788:	3304      	adds	r3, #4
 800278a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	78db      	ldrb	r3, [r3, #3]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d108      	bne.n	80027a6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2200      	movs	r2, #0
 8002798:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	b2db      	uxtb	r3, r3
 800279e:	4619      	mov	r1, r3
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 fbc5 	bl	8002f30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027b2:	461a      	mov	r2, r3
 80027b4:	2302      	movs	r3, #2
 80027b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027ce:	461a      	mov	r2, r3
 80027d0:	2320      	movs	r3, #32
 80027d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027ea:	461a      	mov	r2, r3
 80027ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	3301      	adds	r3, #1
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80027f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80027fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	f47f af62 	bne.w	80026ca <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f003 f9c7 	bl	8005b9e <USB_ReadInterrupts>
 8002810:	4603      	mov	r3, r0
 8002812:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002816:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800281a:	f040 80db 	bne.w	80029d4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f003 f9e8 	bl	8005bf8 <USB_ReadDevAllInEpInterrupt>
 8002828:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800282e:	e0cd      	b.n	80029cc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 80c2 	beq.w	80029c0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f003 fa0e 	bl	8005c68 <USB_ReadDevInEPInterrupt>
 800284c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d057      	beq.n	8002908 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	2201      	movs	r2, #1
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800286c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	43db      	mvns	r3, r3
 8002872:	69f9      	ldr	r1, [r7, #28]
 8002874:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002878:	4013      	ands	r3, r2
 800287a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	4413      	add	r3, r2
 8002884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002888:	461a      	mov	r2, r3
 800288a:	2301      	movs	r3, #1
 800288c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	799b      	ldrb	r3, [r3, #6]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d132      	bne.n	80028fc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	3320      	adds	r3, #32
 80028a6:	6819      	ldr	r1, [r3, #0]
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4403      	add	r3, r0
 80028b6:	331c      	adds	r3, #28
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4419      	add	r1, r3
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4403      	add	r3, r0
 80028ca:	3320      	adds	r3, #32
 80028cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d113      	bne.n	80028fc <HAL_PCD_IRQHandler+0x3a2>
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	3324      	adds	r3, #36	@ 0x24
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d108      	bne.n	80028fc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028f4:	461a      	mov	r2, r3
 80028f6:	2101      	movs	r1, #1
 80028f8:	f003 fa16 	bl	8005d28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	4619      	mov	r1, r3
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fad6 	bl	8002eb4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d008      	beq.n	8002924 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	4413      	add	r3, r2
 800291a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800291e:	461a      	mov	r2, r3
 8002920:	2308      	movs	r3, #8
 8002922:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	2b00      	cmp	r3, #0
 800292c:	d008      	beq.n	8002940 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	4413      	add	r3, r2
 8002936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800293a:	461a      	mov	r2, r3
 800293c:	2310      	movs	r3, #16
 800293e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	4413      	add	r3, r2
 8002952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002956:	461a      	mov	r2, r3
 8002958:	2340      	movs	r3, #64	@ 0x40
 800295a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d023      	beq.n	80029ae <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002966:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002968:	6a38      	ldr	r0, [r7, #32]
 800296a:	f002 ff19 	bl	80057a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800296e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	3310      	adds	r3, #16
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	3304      	adds	r3, #4
 8002980:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	78db      	ldrb	r3, [r3, #3]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d108      	bne.n	800299c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2200      	movs	r2, #0
 800298e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	b2db      	uxtb	r3, r3
 8002994:	4619      	mov	r1, r3
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fad6 	bl	8002f48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029a8:	461a      	mov	r2, r3
 80029aa:	2302      	movs	r3, #2
 80029ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80029b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fb15 	bl	8002fea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c2:	3301      	adds	r3, #1
 80029c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80029c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f47f af2e 	bne.w	8002830 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f003 f8e0 	bl	8005b9e <USB_ReadInterrupts>
 80029de:	4603      	mov	r3, r0
 80029e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029e8:	d122      	bne.n	8002a30 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d108      	bne.n	8002a1a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a10:	2100      	movs	r1, #0
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fca4 	bl	8003360 <HAL_PCDEx_LPM_Callback>
 8002a18:	e002      	b.n	8002a20 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa7e 	bl	8002f1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695a      	ldr	r2, [r3, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f003 f8b2 	bl	8005b9e <USB_ReadInterrupts>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a44:	d112      	bne.n	8002a6c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d102      	bne.n	8002a5c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fa56 	bl	8002f08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002a6a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 f894 	bl	8005b9e <USB_ReadInterrupts>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a80:	f040 80b7 	bne.w	8002bf2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2110      	movs	r1, #16
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f002 fe7e 	bl	80057a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aa8:	e046      	b.n	8002b38 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002abc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ace:	0151      	lsls	r1, r2, #5
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	440a      	add	r2, r1
 8002ad4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002ad8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002adc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aea:	461a      	mov	r2, r3
 8002aec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002af0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b02:	0151      	lsls	r1, r2, #5
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	440a      	add	r2, r1
 8002b08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b0c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b22:	0151      	lsls	r1, r2, #5
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	440a      	add	r2, r1
 8002b28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002b30:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b34:	3301      	adds	r3, #1
 8002b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	791b      	ldrb	r3, [r3, #4]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d3b2      	bcc.n	8002aaa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b52:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002b56:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	7bdb      	ldrb	r3, [r3, #15]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d016      	beq.n	8002b8e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b70:	f043 030b 	orr.w	r3, r3, #11
 8002b74:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b86:	f043 030b 	orr.w	r3, r3, #11
 8002b8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b8c:	e015      	b.n	8002bba <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ba0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002ba4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bb4:	f043 030b 	orr.w	r3, r3, #11
 8002bb8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bc8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002bcc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bdc:	461a      	mov	r2, r3
 8002bde:	f003 f8a3 	bl	8005d28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 ffd1 	bl	8005b9e <USB_ReadInterrupts>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c06:	d123      	bne.n	8002c50 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 f867 	bl	8005ce0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f002 fe3b 	bl	8005892 <USB_GetDevSpeed>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	461a      	mov	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681c      	ldr	r4, [r3, #0]
 8002c28:	f001 f80a 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8002c2c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c32:	461a      	mov	r2, r3
 8002c34:	4620      	mov	r0, r4
 8002c36:	f002 fb4f 	bl	80052d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f95a 	bl	8002ef4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f002 ffa2 	bl	8005b9e <USB_ReadInterrupts>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d10a      	bne.n	8002c7a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f93b 	bl	8002ee0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f002 0208 	and.w	r2, r2, #8
 8002c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f002 ff8d 	bl	8005b9e <USB_ReadInterrupts>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8a:	2b80      	cmp	r3, #128	@ 0x80
 8002c8c:	d123      	bne.n	8002cd6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c9e:	e014      	b.n	8002cca <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f962 	bl	8002f88 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	791b      	ldrb	r3, [r3, #4]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d3e4      	bcc.n	8002ca0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f002 ff5f 	bl	8005b9e <USB_ReadInterrupts>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ce6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cea:	d13c      	bne.n	8002d66 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cec:	2301      	movs	r3, #1
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf0:	e02b      	b.n	8002d4a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	3318      	adds	r3, #24
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d115      	bne.n	8002d44 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	da12      	bge.n	8002d44 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d22:	4613      	mov	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3317      	adds	r3, #23
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f922 	bl	8002f88 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d46:	3301      	adds	r3, #1
 8002d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	791b      	ldrb	r3, [r3, #4]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d3cd      	bcc.n	8002cf2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f002 ff17 	bl	8005b9e <USB_ReadInterrupts>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d7a:	d156      	bne.n	8002e2a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d80:	e045      	b.n	8002e0e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d96:	4613      	mov	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d12e      	bne.n	8002e08 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002daa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	da2b      	bge.n	8002e08 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	0c1a      	lsrs	r2, r3, #16
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002dba:	4053      	eors	r3, r2
 8002dbc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d121      	bne.n	8002e08 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10a      	bne.n	8002e08 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e04:	6053      	str	r3, [r2, #4]
            break;
 8002e06:	e008      	b.n	8002e1a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	791b      	ldrb	r3, [r3, #4]
 8002e12:	461a      	mov	r2, r3
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d3b3      	bcc.n	8002d82 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f002 feb5 	bl	8005b9e <USB_ReadInterrupts>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e3e:	d10a      	bne.n	8002e56 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f88d 	bl	8002f60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002e54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f002 fe9f 	bl	8005b9e <USB_ReadInterrupts>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d115      	bne.n	8002e96 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f879 	bl	8002f74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6859      	ldr	r1, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	e000      	b.n	8002e96 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002e94:	bf00      	nop
    }
  }
}
 8002e96:	3734      	adds	r7, #52	@ 0x34
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd90      	pop	{r4, r7, pc}

08002e9c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	da0c      	bge.n	8002fb6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	f003 020f 	and.w	r2, r3, #15
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	3310      	adds	r3, #16
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e00c      	b.n	8002fd0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	f003 020f 	and.w	r2, r3, #15
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	3304      	adds	r3, #4
 8002fce:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68f9      	ldr	r1, [r7, #12]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f002 fc80 	bl	80058dc <USB_EPStopXfer>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002fe0:	7afb      	ldrb	r3, [r7, #11]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b08a      	sub	sp, #40	@ 0x28
 8002fee:	af02      	add	r7, sp, #8
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	3310      	adds	r3, #16
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	4413      	add	r3, r2
 800300e:	3304      	adds	r3, #4
 8003010:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	429a      	cmp	r2, r3
 800301c:	d901      	bls.n	8003022 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e06b      	b.n	80030fa <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	69fa      	ldr	r2, [r7, #28]
 8003034:	429a      	cmp	r2, r3
 8003036:	d902      	bls.n	800303e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3303      	adds	r3, #3
 8003042:	089b      	lsrs	r3, r3, #2
 8003044:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003046:	e02a      	b.n	800309e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	429a      	cmp	r2, r3
 800305c:	d902      	bls.n	8003064 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	3303      	adds	r3, #3
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	68d9      	ldr	r1, [r3, #12]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	4603      	mov	r3, r0
 8003080:	6978      	ldr	r0, [r7, #20]
 8003082:	f002 fcd5 	bl	8005a30 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	441a      	add	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	441a      	add	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d809      	bhi.n	80030c8 <PCD_WriteEmptyTxFifo+0xde>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030bc:	429a      	cmp	r2, r3
 80030be:	d203      	bcs.n	80030c8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1bf      	bne.n	8003048 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d811      	bhi.n	80030f8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	2201      	movs	r2, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	6939      	ldr	r1, [r7, #16]
 80030f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030f4:	4013      	ands	r3, r2
 80030f6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	333c      	adds	r3, #60	@ 0x3c
 800311c:	3304      	adds	r3, #4
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	4413      	add	r3, r2
 800312a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	799b      	ldrb	r3, [r3, #6]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d17b      	bne.n	8003232 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d015      	beq.n	8003170 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	4a61      	ldr	r2, [pc, #388]	@ (80032cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	f240 80b9 	bls.w	80032c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80b3 	beq.w	80032c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003166:	461a      	mov	r2, r3
 8003168:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800316c:	6093      	str	r3, [r2, #8]
 800316e:	e0a7      	b.n	80032c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003186:	461a      	mov	r2, r3
 8003188:	2320      	movs	r3, #32
 800318a:	6093      	str	r3, [r2, #8]
 800318c:	e098      	b.n	80032c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003194:	2b00      	cmp	r3, #0
 8003196:	f040 8093 	bne.w	80032c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	4a4b      	ldr	r2, [pc, #300]	@ (80032cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d90f      	bls.n	80031c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031b8:	461a      	mov	r2, r3
 80031ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031be:	6093      	str	r3, [r2, #8]
 80031c0:	e07e      	b.n	80032c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	4413      	add	r3, r2
 80031d4:	3304      	adds	r3, #4
 80031d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a1a      	ldr	r2, [r3, #32]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	0159      	lsls	r1, r3, #5
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	440b      	add	r3, r1
 80031e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ee:	1ad2      	subs	r2, r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d114      	bne.n	8003224 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800320c:	461a      	mov	r2, r3
 800320e:	2101      	movs	r1, #1
 8003210:	f002 fd8a 	bl	8005d28 <USB_EP0_OutStart>
 8003214:	e006      	b.n	8003224 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	441a      	add	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	4619      	mov	r1, r3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fe36 	bl	8002e9c <HAL_PCD_DataOutStageCallback>
 8003230:	e046      	b.n	80032c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	4a26      	ldr	r2, [pc, #152]	@ (80032d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d124      	bne.n	8003284 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003250:	461a      	mov	r2, r3
 8003252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003256:	6093      	str	r3, [r2, #8]
 8003258:	e032      	b.n	80032c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003270:	461a      	mov	r2, r3
 8003272:	2320      	movs	r3, #32
 8003274:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff fe0d 	bl	8002e9c <HAL_PCD_DataOutStageCallback>
 8003282:	e01d      	b.n	80032c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d114      	bne.n	80032b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d108      	bne.n	80032b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032ac:	461a      	mov	r2, r3
 80032ae:	2100      	movs	r1, #0
 80032b0:	f002 fd3a 	bl	8005d28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff fdee 	bl	8002e9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	4f54300a 	.word	0x4f54300a
 80032d0:	4f54310a 	.word	0x4f54310a

080032d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	333c      	adds	r3, #60	@ 0x3c
 80032ec:	3304      	adds	r3, #4
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a15      	ldr	r2, [pc, #84]	@ (800335c <PCD_EP_OutSetupPacket_int+0x88>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d90e      	bls.n	8003328 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003310:	2b00      	cmp	r3, #0
 8003312:	d009      	beq.n	8003328 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003320:	461a      	mov	r2, r3
 8003322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003326:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff fdcf 	bl	8002ecc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a0a      	ldr	r2, [pc, #40]	@ (800335c <PCD_EP_OutSetupPacket_int+0x88>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d90c      	bls.n	8003350 <PCD_EP_OutSetupPacket_int+0x7c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	799b      	ldrb	r3, [r3, #6]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d108      	bne.n	8003350 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003348:	461a      	mov	r2, r3
 800334a:	2101      	movs	r1, #1
 800334c:	f002 fcec 	bl	8005d28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	4f54300a 	.word	0x4f54300a

08003360 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e267      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d075      	beq.n	8003482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003396:	4b88      	ldr	r3, [pc, #544]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d00c      	beq.n	80033bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a2:	4b85      	ldr	r3, [pc, #532]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d112      	bne.n	80033d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ae:	4b82      	ldr	r3, [pc, #520]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033ba:	d10b      	bne.n	80033d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033bc:	4b7e      	ldr	r3, [pc, #504]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d05b      	beq.n	8003480 <HAL_RCC_OscConfig+0x108>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d157      	bne.n	8003480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e242      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033dc:	d106      	bne.n	80033ec <HAL_RCC_OscConfig+0x74>
 80033de:	4b76      	ldr	r3, [pc, #472]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a75      	ldr	r2, [pc, #468]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e01d      	b.n	8003428 <HAL_RCC_OscConfig+0xb0>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x98>
 80033f6:	4b70      	ldr	r3, [pc, #448]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a6f      	ldr	r2, [pc, #444]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b6d      	ldr	r3, [pc, #436]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a6c      	ldr	r2, [pc, #432]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e00b      	b.n	8003428 <HAL_RCC_OscConfig+0xb0>
 8003410:	4b69      	ldr	r3, [pc, #420]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a68      	ldr	r2, [pc, #416]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4b66      	ldr	r3, [pc, #408]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a65      	ldr	r2, [pc, #404]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003422:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d013      	beq.n	8003458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe fb30 	bl	8001a94 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003438:	f7fe fb2c 	bl	8001a94 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	@ 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e207      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	4b5b      	ldr	r3, [pc, #364]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0xc0>
 8003456:	e014      	b.n	8003482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fe fb1c 	bl	8001a94 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003460:	f7fe fb18 	bl	8001a94 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	@ 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1f3      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	4b51      	ldr	r3, [pc, #324]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0xe8>
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d063      	beq.n	8003556 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800348e:	4b4a      	ldr	r3, [pc, #296]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800349a:	4b47      	ldr	r3, [pc, #284]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d11c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a6:	4b44      	ldr	r3, [pc, #272]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d116      	bne.n	80034e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	4b41      	ldr	r3, [pc, #260]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_RCC_OscConfig+0x152>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d001      	beq.n	80034ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e1c7      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	4b3b      	ldr	r3, [pc, #236]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4937      	ldr	r1, [pc, #220]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034de:	e03a      	b.n	8003556 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d020      	beq.n	800352a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e8:	4b34      	ldr	r3, [pc, #208]	@ (80035bc <HAL_RCC_OscConfig+0x244>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ee:	f7fe fad1 	bl	8001a94 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f6:	f7fe facd 	bl	8001a94 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e1a8      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	4b2b      	ldr	r3, [pc, #172]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003514:	4b28      	ldr	r3, [pc, #160]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4925      	ldr	r1, [pc, #148]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
 8003528:	e015      	b.n	8003556 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352a:	4b24      	ldr	r3, [pc, #144]	@ (80035bc <HAL_RCC_OscConfig+0x244>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fe fab0 	bl	8001a94 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003538:	f7fe faac 	bl	8001a94 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e187      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d036      	beq.n	80035d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d016      	beq.n	8003598 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356a:	4b15      	ldr	r3, [pc, #84]	@ (80035c0 <HAL_RCC_OscConfig+0x248>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003570:	f7fe fa90 	bl	8001a94 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003578:	f7fe fa8c 	bl	8001a94 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e167      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	4b0b      	ldr	r3, [pc, #44]	@ (80035b8 <HAL_RCC_OscConfig+0x240>)
 800358c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x200>
 8003596:	e01b      	b.n	80035d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003598:	4b09      	ldr	r3, [pc, #36]	@ (80035c0 <HAL_RCC_OscConfig+0x248>)
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359e:	f7fe fa79 	bl	8001a94 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a4:	e00e      	b.n	80035c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a6:	f7fe fa75 	bl	8001a94 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d907      	bls.n	80035c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e150      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
 80035b8:	40023800 	.word	0x40023800
 80035bc:	42470000 	.word	0x42470000
 80035c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c4:	4b88      	ldr	r3, [pc, #544]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 80035c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ea      	bne.n	80035a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 8097 	beq.w	800370c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035de:	2300      	movs	r3, #0
 80035e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e2:	4b81      	ldr	r3, [pc, #516]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10f      	bne.n	800360e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	4b7d      	ldr	r3, [pc, #500]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	4a7c      	ldr	r2, [pc, #496]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 80035f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035fe:	4b7a      	ldr	r3, [pc, #488]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360a:	2301      	movs	r3, #1
 800360c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360e:	4b77      	ldr	r3, [pc, #476]	@ (80037ec <HAL_RCC_OscConfig+0x474>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d118      	bne.n	800364c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361a:	4b74      	ldr	r3, [pc, #464]	@ (80037ec <HAL_RCC_OscConfig+0x474>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a73      	ldr	r2, [pc, #460]	@ (80037ec <HAL_RCC_OscConfig+0x474>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003626:	f7fe fa35 	bl	8001a94 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362e:	f7fe fa31 	bl	8001a94 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e10c      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	4b6a      	ldr	r3, [pc, #424]	@ (80037ec <HAL_RCC_OscConfig+0x474>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d106      	bne.n	8003662 <HAL_RCC_OscConfig+0x2ea>
 8003654:	4b64      	ldr	r3, [pc, #400]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003658:	4a63      	ldr	r2, [pc, #396]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003660:	e01c      	b.n	800369c <HAL_RCC_OscConfig+0x324>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b05      	cmp	r3, #5
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0x30c>
 800366a:	4b5f      	ldr	r3, [pc, #380]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366e:	4a5e      	ldr	r2, [pc, #376]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003670:	f043 0304 	orr.w	r3, r3, #4
 8003674:	6713      	str	r3, [r2, #112]	@ 0x70
 8003676:	4b5c      	ldr	r3, [pc, #368]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367a:	4a5b      	ldr	r2, [pc, #364]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6713      	str	r3, [r2, #112]	@ 0x70
 8003682:	e00b      	b.n	800369c <HAL_RCC_OscConfig+0x324>
 8003684:	4b58      	ldr	r3, [pc, #352]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003688:	4a57      	ldr	r2, [pc, #348]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003690:	4b55      	ldr	r3, [pc, #340]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003694:	4a54      	ldr	r2, [pc, #336]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003696:	f023 0304 	bic.w	r3, r3, #4
 800369a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d015      	beq.n	80036d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a4:	f7fe f9f6 	bl	8001a94 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ac:	f7fe f9f2 	bl	8001a94 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e0cb      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c2:	4b49      	ldr	r3, [pc, #292]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0ee      	beq.n	80036ac <HAL_RCC_OscConfig+0x334>
 80036ce:	e014      	b.n	80036fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d0:	f7fe f9e0 	bl	8001a94 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d6:	e00a      	b.n	80036ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d8:	f7fe f9dc 	bl	8001a94 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e0b5      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ee:	4b3e      	ldr	r3, [pc, #248]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1ee      	bne.n	80036d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003700:	4b39      	ldr	r3, [pc, #228]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003704:	4a38      	ldr	r2, [pc, #224]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800370a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80a1 	beq.w	8003858 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003716:	4b34      	ldr	r3, [pc, #208]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b08      	cmp	r3, #8
 8003720:	d05c      	beq.n	80037dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d141      	bne.n	80037ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372a:	4b31      	ldr	r3, [pc, #196]	@ (80037f0 <HAL_RCC_OscConfig+0x478>)
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fe f9b0 	bl	8001a94 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003738:	f7fe f9ac 	bl	8001a94 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e087      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	4b27      	ldr	r3, [pc, #156]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69da      	ldr	r2, [r3, #28]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003764:	019b      	lsls	r3, r3, #6
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376c:	085b      	lsrs	r3, r3, #1
 800376e:	3b01      	subs	r3, #1
 8003770:	041b      	lsls	r3, r3, #16
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003778:	061b      	lsls	r3, r3, #24
 800377a:	491b      	ldr	r1, [pc, #108]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 800377c:	4313      	orrs	r3, r2
 800377e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003780:	4b1b      	ldr	r3, [pc, #108]	@ (80037f0 <HAL_RCC_OscConfig+0x478>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003786:	f7fe f985 	bl	8001a94 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378e:	f7fe f981 	bl	8001a94 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e05c      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a0:	4b11      	ldr	r3, [pc, #68]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x416>
 80037ac:	e054      	b.n	8003858 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ae:	4b10      	ldr	r3, [pc, #64]	@ (80037f0 <HAL_RCC_OscConfig+0x478>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fe f96e 	bl	8001a94 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037bc:	f7fe f96a 	bl	8001a94 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e045      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <HAL_RCC_OscConfig+0x470>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0x444>
 80037da:	e03d      	b.n	8003858 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e038      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40007000 	.word	0x40007000
 80037f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003864 <HAL_RCC_OscConfig+0x4ec>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d028      	beq.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800380c:	429a      	cmp	r2, r3
 800380e:	d121      	bne.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d11a      	bne.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003824:	4013      	ands	r3, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800382a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800382c:	4293      	cmp	r3, r2
 800382e:	d111      	bne.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383a:	085b      	lsrs	r3, r3, #1
 800383c:	3b01      	subs	r3, #1
 800383e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d107      	bne.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40023800 	.word	0x40023800

08003868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0cc      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800387c:	4b68      	ldr	r3, [pc, #416]	@ (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d90c      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b65      	ldr	r3, [pc, #404]	@ (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b63      	ldr	r3, [pc, #396]	@ (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b8      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038bc:	4b59      	ldr	r3, [pc, #356]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a58      	ldr	r2, [pc, #352]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d4:	4b53      	ldr	r3, [pc, #332]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a52      	ldr	r2, [pc, #328]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b50      	ldr	r3, [pc, #320]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	494d      	ldr	r1, [pc, #308]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d044      	beq.n	8003988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b47      	ldr	r3, [pc, #284]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d119      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d003      	beq.n	8003926 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003922:	2b03      	cmp	r3, #3
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	4b3f      	ldr	r3, [pc, #252]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e06f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003936:	4b3b      	ldr	r3, [pc, #236]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e067      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003946:	4b37      	ldr	r3, [pc, #220]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4934      	ldr	r1, [pc, #208]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	4313      	orrs	r3, r2
 8003956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003958:	f7fe f89c 	bl	8001a94 <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	e00a      	b.n	8003976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003960:	f7fe f898 	bl	8001a94 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e04f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	4b2b      	ldr	r3, [pc, #172]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 020c 	and.w	r2, r3, #12
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	429a      	cmp	r2, r3
 8003986:	d1eb      	bne.n	8003960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003988:	4b25      	ldr	r3, [pc, #148]	@ (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d20c      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b22      	ldr	r3, [pc, #136]	@ (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b20      	ldr	r3, [pc, #128]	@ (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e032      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b19      	ldr	r3, [pc, #100]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4916      	ldr	r1, [pc, #88]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039da:	4b12      	ldr	r3, [pc, #72]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	490e      	ldr	r1, [pc, #56]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ee:	f000 f821 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	490a      	ldr	r1, [pc, #40]	@ (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 8003a00:	5ccb      	ldrb	r3, [r1, r3]
 8003a02:	fa22 f303 	lsr.w	r3, r2, r3
 8003a06:	4a09      	ldr	r2, [pc, #36]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	@ (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fd fffc 	bl	8001a0c <HAL_InitTick>

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023c00 	.word	0x40023c00
 8003a24:	40023800 	.word	0x40023800
 8003a28:	0800931c 	.word	0x0800931c
 8003a2c:	20000000 	.word	0x20000000
 8003a30:	20000004 	.word	0x20000004

08003a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a38:	b094      	sub	sp, #80	@ 0x50
 8003a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a4c:	4b79      	ldr	r3, [pc, #484]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d00d      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x40>
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	f200 80e1 	bhi.w	8003c20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x34>
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a66:	e0db      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a68:	4b73      	ldr	r3, [pc, #460]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a6c:	e0db      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a6e:	4b73      	ldr	r3, [pc, #460]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x208>)
 8003a70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a72:	e0d8      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a74:	4b6f      	ldr	r3, [pc, #444]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a7e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d063      	beq.n	8003b52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	099b      	lsrs	r3, r3, #6
 8003a90:	2200      	movs	r2, #0
 8003a92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003aa6:	4622      	mov	r2, r4
 8003aa8:	462b      	mov	r3, r5
 8003aaa:	f04f 0000 	mov.w	r0, #0
 8003aae:	f04f 0100 	mov.w	r1, #0
 8003ab2:	0159      	lsls	r1, r3, #5
 8003ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab8:	0150      	lsls	r0, r2, #5
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4621      	mov	r1, r4
 8003ac0:	1a51      	subs	r1, r2, r1
 8003ac2:	6139      	str	r1, [r7, #16]
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ad8:	4659      	mov	r1, fp
 8003ada:	018b      	lsls	r3, r1, #6
 8003adc:	4651      	mov	r1, sl
 8003ade:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ae2:	4651      	mov	r1, sl
 8003ae4:	018a      	lsls	r2, r1, #6
 8003ae6:	4651      	mov	r1, sl
 8003ae8:	ebb2 0801 	subs.w	r8, r2, r1
 8003aec:	4659      	mov	r1, fp
 8003aee:	eb63 0901 	sbc.w	r9, r3, r1
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b06:	4690      	mov	r8, r2
 8003b08:	4699      	mov	r9, r3
 8003b0a:	4623      	mov	r3, r4
 8003b0c:	eb18 0303 	adds.w	r3, r8, r3
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	462b      	mov	r3, r5
 8003b14:	eb49 0303 	adc.w	r3, r9, r3
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b26:	4629      	mov	r1, r5
 8003b28:	024b      	lsls	r3, r1, #9
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b30:	4621      	mov	r1, r4
 8003b32:	024a      	lsls	r2, r1, #9
 8003b34:	4610      	mov	r0, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b44:	f7fc fb94 	bl	8000270 <__aeabi_uldivmod>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b50:	e058      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b52:	4b38      	ldr	r3, [pc, #224]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	099b      	lsrs	r3, r3, #6
 8003b58:	2200      	movs	r2, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b62:	623b      	str	r3, [r7, #32]
 8003b64:	2300      	movs	r3, #0
 8003b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	464b      	mov	r3, r9
 8003b70:	f04f 0000 	mov.w	r0, #0
 8003b74:	f04f 0100 	mov.w	r1, #0
 8003b78:	0159      	lsls	r1, r3, #5
 8003b7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b7e:	0150      	lsls	r0, r2, #5
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4641      	mov	r1, r8
 8003b86:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b8a:	4649      	mov	r1, r9
 8003b8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ba0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ba4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ba8:	eb63 050b 	sbc.w	r5, r3, fp
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	00eb      	lsls	r3, r5, #3
 8003bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bba:	00e2      	lsls	r2, r4, #3
 8003bbc:	4614      	mov	r4, r2
 8003bbe:	461d      	mov	r5, r3
 8003bc0:	4643      	mov	r3, r8
 8003bc2:	18e3      	adds	r3, r4, r3
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	eb45 0303 	adc.w	r3, r5, r3
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bda:	4629      	mov	r1, r5
 8003bdc:	028b      	lsls	r3, r1, #10
 8003bde:	4621      	mov	r1, r4
 8003be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003be4:	4621      	mov	r1, r4
 8003be6:	028a      	lsls	r2, r1, #10
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bee:	2200      	movs	r2, #0
 8003bf0:	61bb      	str	r3, [r7, #24]
 8003bf2:	61fa      	str	r2, [r7, #28]
 8003bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf8:	f7fc fb3a 	bl	8000270 <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4613      	mov	r3, r2
 8003c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c04:	4b0b      	ldr	r3, [pc, #44]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c1e:	e002      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c20:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3750      	adds	r7, #80	@ 0x50
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	00f42400 	.word	0x00f42400
 8003c3c:	007a1200 	.word	0x007a1200

08003c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c44:	4b03      	ldr	r3, [pc, #12]	@ (8003c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c46:	681b      	ldr	r3, [r3, #0]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	20000000 	.word	0x20000000

08003c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c5c:	f7ff fff0 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0a9b      	lsrs	r3, r3, #10
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4903      	ldr	r1, [pc, #12]	@ (8003c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	0800932c 	.word	0x0800932c

08003c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c84:	f7ff ffdc 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b05      	ldr	r3, [pc, #20]	@ (8003ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0b5b      	lsrs	r3, r3, #13
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4903      	ldr	r1, [pc, #12]	@ (8003ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	0800932c 	.word	0x0800932c

08003ca8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e07b      	b.n	8003db2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d108      	bne.n	8003cd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cca:	d009      	beq.n	8003ce0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	61da      	str	r2, [r3, #28]
 8003cd2:	e005      	b.n	8003ce0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fd fc36 	bl	800156c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d64:	ea42 0103 	orr.w	r1, r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	f003 0104 	and.w	r1, r3, #4
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	f003 0210 	and.w	r2, r3, #16
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003da0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b088      	sub	sp, #32
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	603b      	str	r3, [r7, #0]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dca:	f7fd fe63 	bl	8001a94 <HAL_GetTick>
 8003dce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d001      	beq.n	8003de4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
 8003de2:	e12a      	b.n	800403a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_SPI_Transmit+0x36>
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e122      	b.n	800403a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_SPI_Transmit+0x48>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e11b      	b.n	800403a <HAL_SPI_Transmit+0x280>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	88fa      	ldrh	r2, [r7, #6]
 8003e22:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	88fa      	ldrh	r2, [r7, #6]
 8003e28:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e50:	d10f      	bne.n	8003e72 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7c:	2b40      	cmp	r3, #64	@ 0x40
 8003e7e:	d007      	beq.n	8003e90 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e98:	d152      	bne.n	8003f40 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_SPI_Transmit+0xee>
 8003ea2:	8b7b      	ldrh	r3, [r7, #26]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d145      	bne.n	8003f34 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eac:	881a      	ldrh	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb8:	1c9a      	adds	r2, r3, #2
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ecc:	e032      	b.n	8003f34 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d112      	bne.n	8003f02 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee0:	881a      	ldrh	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eec:	1c9a      	adds	r2, r3, #2
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f00:	e018      	b.n	8003f34 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f02:	f7fd fdc7 	bl	8001a94 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d803      	bhi.n	8003f1a <HAL_SPI_Transmit+0x160>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d102      	bne.n	8003f20 <HAL_SPI_Transmit+0x166>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d109      	bne.n	8003f34 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e082      	b.n	800403a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1c7      	bne.n	8003ece <HAL_SPI_Transmit+0x114>
 8003f3e:	e053      	b.n	8003fe8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_SPI_Transmit+0x194>
 8003f48:	8b7b      	ldrh	r3, [r7, #26]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d147      	bne.n	8003fde <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	330c      	adds	r3, #12
 8003f58:	7812      	ldrb	r2, [r2, #0]
 8003f5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f74:	e033      	b.n	8003fde <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d113      	bne.n	8003fac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	7812      	ldrb	r2, [r2, #0]
 8003f90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003faa:	e018      	b.n	8003fde <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fac:	f7fd fd72 	bl	8001a94 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d803      	bhi.n	8003fc4 <HAL_SPI_Transmit+0x20a>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d102      	bne.n	8003fca <HAL_SPI_Transmit+0x210>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e02d      	b.n	800403a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1c6      	bne.n	8003f76 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	6839      	ldr	r1, [r7, #0]
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f8b1 	bl	8004154 <SPI_EndRxTxTransaction>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10a      	bne.n	800401c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004038:	2300      	movs	r3, #0
  }
}
 800403a:	4618      	mov	r0, r3
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004054:	f7fd fd1e 	bl	8001a94 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	4413      	add	r3, r2
 8004062:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004064:	f7fd fd16 	bl	8001a94 <HAL_GetTick>
 8004068:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800406a:	4b39      	ldr	r3, [pc, #228]	@ (8004150 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	015b      	lsls	r3, r3, #5
 8004070:	0d1b      	lsrs	r3, r3, #20
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	fb02 f303 	mul.w	r3, r2, r3
 8004078:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800407a:	e055      	b.n	8004128 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004082:	d051      	beq.n	8004128 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004084:	f7fd fd06 	bl	8001a94 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	429a      	cmp	r2, r3
 8004092:	d902      	bls.n	800409a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d13d      	bne.n	8004116 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040b2:	d111      	bne.n	80040d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040bc:	d004      	beq.n	80040c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040c6:	d107      	bne.n	80040d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040e0:	d10f      	bne.n	8004102 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004100:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e018      	b.n	8004148 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d102      	bne.n	8004122 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	61fb      	str	r3, [r7, #28]
 8004120:	e002      	b.n	8004128 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	3b01      	subs	r3, #1
 8004126:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4013      	ands	r3, r2
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	429a      	cmp	r2, r3
 8004136:	bf0c      	ite	eq
 8004138:	2301      	moveq	r3, #1
 800413a:	2300      	movne	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	429a      	cmp	r2, r3
 8004144:	d19a      	bne.n	800407c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20000000 	.word	0x20000000

08004154 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2201      	movs	r2, #1
 8004168:	2102      	movs	r1, #2
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7ff ff6a 	bl	8004044 <SPI_WaitFlagStateUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800417a:	f043 0220 	orr.w	r2, r3, #32
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e032      	b.n	80041ec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004186:	4b1b      	ldr	r3, [pc, #108]	@ (80041f4 <SPI_EndRxTxTransaction+0xa0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a1b      	ldr	r2, [pc, #108]	@ (80041f8 <SPI_EndRxTxTransaction+0xa4>)
 800418c:	fba2 2303 	umull	r2, r3, r2, r3
 8004190:	0d5b      	lsrs	r3, r3, #21
 8004192:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004196:	fb02 f303 	mul.w	r3, r2, r3
 800419a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041a4:	d112      	bne.n	80041cc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2200      	movs	r2, #0
 80041ae:	2180      	movs	r1, #128	@ 0x80
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f7ff ff47 	bl	8004044 <SPI_WaitFlagStateUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d016      	beq.n	80041ea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c0:	f043 0220 	orr.w	r2, r3, #32
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e00f      	b.n	80041ec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e2:	2b80      	cmp	r3, #128	@ 0x80
 80041e4:	d0f2      	beq.n	80041cc <SPI_EndRxTxTransaction+0x78>
 80041e6:	e000      	b.n	80041ea <SPI_EndRxTxTransaction+0x96>
        break;
 80041e8:	bf00      	nop
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000000 	.word	0x20000000
 80041f8:	165e9f81 	.word	0x165e9f81

080041fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e041      	b.n	8004292 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fd fa20 	bl	8001668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	4619      	mov	r1, r3
 800423a:	4610      	mov	r0, r2
 800423c:	f000 fa0c 	bl	8004658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d020      	beq.n	80042fe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01b      	beq.n	80042fe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f06f 0202 	mvn.w	r2, #2
 80042ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f999 	bl	800461c <HAL_TIM_IC_CaptureCallback>
 80042ea:	e005      	b.n	80042f8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f98b 	bl	8004608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f99c 	bl	8004630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d020      	beq.n	800434a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01b      	beq.n	800434a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f06f 0204 	mvn.w	r2, #4
 800431a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f973 	bl	800461c <HAL_TIM_IC_CaptureCallback>
 8004336:	e005      	b.n	8004344 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f965 	bl	8004608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f976 	bl	8004630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d020      	beq.n	8004396 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01b      	beq.n	8004396 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f06f 0208 	mvn.w	r2, #8
 8004366:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2204      	movs	r2, #4
 800436c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f94d 	bl	800461c <HAL_TIM_IC_CaptureCallback>
 8004382:	e005      	b.n	8004390 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f93f 	bl	8004608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f950 	bl	8004630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b00      	cmp	r3, #0
 800439e:	d020      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 0310 	and.w	r3, r3, #16
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01b      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f06f 0210 	mvn.w	r2, #16
 80043b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2208      	movs	r2, #8
 80043b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f927 	bl	800461c <HAL_TIM_IC_CaptureCallback>
 80043ce:	e005      	b.n	80043dc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f919 	bl	8004608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f92a 	bl	8004630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00c      	beq.n	8004406 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f06f 0201 	mvn.w	r2, #1
 80043fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7fc f8e3 	bl	80005cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00c      	beq.n	800442a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fadd 	bl	80049e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00c      	beq.n	800444e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d007      	beq.n	800444e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f8fb 	bl	8004644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00c      	beq.n	8004472 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f06f 0220 	mvn.w	r2, #32
 800446a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 faaf 	bl	80049d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b084      	sub	sp, #16
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_TIM_ConfigClockSource+0x1c>
 8004492:	2302      	movs	r3, #2
 8004494:	e0b4      	b.n	8004600 <HAL_TIM_ConfigClockSource+0x186>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2202      	movs	r2, #2
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044bc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ce:	d03e      	beq.n	800454e <HAL_TIM_ConfigClockSource+0xd4>
 80044d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044d4:	f200 8087 	bhi.w	80045e6 <HAL_TIM_ConfigClockSource+0x16c>
 80044d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044dc:	f000 8086 	beq.w	80045ec <HAL_TIM_ConfigClockSource+0x172>
 80044e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044e4:	d87f      	bhi.n	80045e6 <HAL_TIM_ConfigClockSource+0x16c>
 80044e6:	2b70      	cmp	r3, #112	@ 0x70
 80044e8:	d01a      	beq.n	8004520 <HAL_TIM_ConfigClockSource+0xa6>
 80044ea:	2b70      	cmp	r3, #112	@ 0x70
 80044ec:	d87b      	bhi.n	80045e6 <HAL_TIM_ConfigClockSource+0x16c>
 80044ee:	2b60      	cmp	r3, #96	@ 0x60
 80044f0:	d050      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0x11a>
 80044f2:	2b60      	cmp	r3, #96	@ 0x60
 80044f4:	d877      	bhi.n	80045e6 <HAL_TIM_ConfigClockSource+0x16c>
 80044f6:	2b50      	cmp	r3, #80	@ 0x50
 80044f8:	d03c      	beq.n	8004574 <HAL_TIM_ConfigClockSource+0xfa>
 80044fa:	2b50      	cmp	r3, #80	@ 0x50
 80044fc:	d873      	bhi.n	80045e6 <HAL_TIM_ConfigClockSource+0x16c>
 80044fe:	2b40      	cmp	r3, #64	@ 0x40
 8004500:	d058      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0x13a>
 8004502:	2b40      	cmp	r3, #64	@ 0x40
 8004504:	d86f      	bhi.n	80045e6 <HAL_TIM_ConfigClockSource+0x16c>
 8004506:	2b30      	cmp	r3, #48	@ 0x30
 8004508:	d064      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0x15a>
 800450a:	2b30      	cmp	r3, #48	@ 0x30
 800450c:	d86b      	bhi.n	80045e6 <HAL_TIM_ConfigClockSource+0x16c>
 800450e:	2b20      	cmp	r3, #32
 8004510:	d060      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0x15a>
 8004512:	2b20      	cmp	r3, #32
 8004514:	d867      	bhi.n	80045e6 <HAL_TIM_ConfigClockSource+0x16c>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d05c      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0x15a>
 800451a:	2b10      	cmp	r3, #16
 800451c:	d05a      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0x15a>
 800451e:	e062      	b.n	80045e6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004530:	f000 f9b2 	bl	8004898 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004542:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	609a      	str	r2, [r3, #8]
      break;
 800454c:	e04f      	b.n	80045ee <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800455e:	f000 f99b 	bl	8004898 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004570:	609a      	str	r2, [r3, #8]
      break;
 8004572:	e03c      	b.n	80045ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004580:	461a      	mov	r2, r3
 8004582:	f000 f90f 	bl	80047a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2150      	movs	r1, #80	@ 0x50
 800458c:	4618      	mov	r0, r3
 800458e:	f000 f968 	bl	8004862 <TIM_ITRx_SetConfig>
      break;
 8004592:	e02c      	b.n	80045ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045a0:	461a      	mov	r2, r3
 80045a2:	f000 f92e 	bl	8004802 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2160      	movs	r1, #96	@ 0x60
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 f958 	bl	8004862 <TIM_ITRx_SetConfig>
      break;
 80045b2:	e01c      	b.n	80045ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c0:	461a      	mov	r2, r3
 80045c2:	f000 f8ef 	bl	80047a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2140      	movs	r1, #64	@ 0x40
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 f948 	bl	8004862 <TIM_ITRx_SetConfig>
      break;
 80045d2:	e00c      	b.n	80045ee <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f000 f93f 	bl	8004862 <TIM_ITRx_SetConfig>
      break;
 80045e4:	e003      	b.n	80045ee <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	73fb      	strb	r3, [r7, #15]
      break;
 80045ea:	e000      	b.n	80045ee <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a43      	ldr	r2, [pc, #268]	@ (8004778 <TIM_Base_SetConfig+0x120>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d013      	beq.n	8004698 <TIM_Base_SetConfig+0x40>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004676:	d00f      	beq.n	8004698 <TIM_Base_SetConfig+0x40>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a40      	ldr	r2, [pc, #256]	@ (800477c <TIM_Base_SetConfig+0x124>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00b      	beq.n	8004698 <TIM_Base_SetConfig+0x40>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a3f      	ldr	r2, [pc, #252]	@ (8004780 <TIM_Base_SetConfig+0x128>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d007      	beq.n	8004698 <TIM_Base_SetConfig+0x40>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a3e      	ldr	r2, [pc, #248]	@ (8004784 <TIM_Base_SetConfig+0x12c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d003      	beq.n	8004698 <TIM_Base_SetConfig+0x40>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a3d      	ldr	r2, [pc, #244]	@ (8004788 <TIM_Base_SetConfig+0x130>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d108      	bne.n	80046aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a32      	ldr	r2, [pc, #200]	@ (8004778 <TIM_Base_SetConfig+0x120>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d02b      	beq.n	800470a <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b8:	d027      	beq.n	800470a <TIM_Base_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a2f      	ldr	r2, [pc, #188]	@ (800477c <TIM_Base_SetConfig+0x124>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d023      	beq.n	800470a <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a2e      	ldr	r2, [pc, #184]	@ (8004780 <TIM_Base_SetConfig+0x128>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01f      	beq.n	800470a <TIM_Base_SetConfig+0xb2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004784 <TIM_Base_SetConfig+0x12c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d01b      	beq.n	800470a <TIM_Base_SetConfig+0xb2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004788 <TIM_Base_SetConfig+0x130>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d017      	beq.n	800470a <TIM_Base_SetConfig+0xb2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a2b      	ldr	r2, [pc, #172]	@ (800478c <TIM_Base_SetConfig+0x134>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d013      	beq.n	800470a <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004790 <TIM_Base_SetConfig+0x138>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00f      	beq.n	800470a <TIM_Base_SetConfig+0xb2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a29      	ldr	r2, [pc, #164]	@ (8004794 <TIM_Base_SetConfig+0x13c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00b      	beq.n	800470a <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a28      	ldr	r2, [pc, #160]	@ (8004798 <TIM_Base_SetConfig+0x140>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d007      	beq.n	800470a <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a27      	ldr	r2, [pc, #156]	@ (800479c <TIM_Base_SetConfig+0x144>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d003      	beq.n	800470a <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a26      	ldr	r2, [pc, #152]	@ (80047a0 <TIM_Base_SetConfig+0x148>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d108      	bne.n	800471c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a0e      	ldr	r2, [pc, #56]	@ (8004778 <TIM_Base_SetConfig+0x120>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d003      	beq.n	800474a <TIM_Base_SetConfig+0xf2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a10      	ldr	r2, [pc, #64]	@ (8004788 <TIM_Base_SetConfig+0x130>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d103      	bne.n	8004752 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f043 0204 	orr.w	r2, r3, #4
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	601a      	str	r2, [r3, #0]
}
 800476a:	bf00      	nop
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40010000 	.word	0x40010000
 800477c:	40000400 	.word	0x40000400
 8004780:	40000800 	.word	0x40000800
 8004784:	40000c00 	.word	0x40000c00
 8004788:	40010400 	.word	0x40010400
 800478c:	40014000 	.word	0x40014000
 8004790:	40014400 	.word	0x40014400
 8004794:	40014800 	.word	0x40014800
 8004798:	40001800 	.word	0x40001800
 800479c:	40001c00 	.word	0x40001c00
 80047a0:	40002000 	.word	0x40002000

080047a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f023 0201 	bic.w	r2, r3, #1
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f023 030a 	bic.w	r3, r3, #10
 80047e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	621a      	str	r2, [r3, #32]
}
 80047f6:	bf00      	nop
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004802:	b480      	push	{r7}
 8004804:	b087      	sub	sp, #28
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f023 0210 	bic.w	r2, r3, #16
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800482c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	031b      	lsls	r3, r3, #12
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800483e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	621a      	str	r2, [r3, #32]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	f043 0307 	orr.w	r3, r3, #7
 8004884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	609a      	str	r2, [r3, #8]
}
 800488c:	bf00      	nop
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	021a      	lsls	r2, r3, #8
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4313      	orrs	r3, r2
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	609a      	str	r2, [r3, #8]
}
 80048cc:	bf00      	nop
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e05a      	b.n	80049a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a21      	ldr	r2, [pc, #132]	@ (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d022      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800493c:	d01d      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1d      	ldr	r2, [pc, #116]	@ (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d018      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1b      	ldr	r2, [pc, #108]	@ (80049bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1a      	ldr	r2, [pc, #104]	@ (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00e      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a18      	ldr	r2, [pc, #96]	@ (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d009      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a17      	ldr	r2, [pc, #92]	@ (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d004      	beq.n	800497a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a15      	ldr	r2, [pc, #84]	@ (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d10c      	bne.n	8004994 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	4313      	orrs	r3, r2
 800498a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40010000 	.word	0x40010000
 80049b8:	40000400 	.word	0x40000400
 80049bc:	40000800 	.word	0x40000800
 80049c0:	40000c00 	.word	0x40000c00
 80049c4:	40010400 	.word	0x40010400
 80049c8:	40014000 	.word	0x40014000
 80049cc:	40001800 	.word	0x40001800

080049d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e042      	b.n	8004a90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fc fe68 	bl	80016f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2224      	movs	r2, #36	@ 0x24
 8004a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f973 	bl	8004d28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695a      	ldr	r2, [r3, #20]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08a      	sub	sp, #40	@ 0x28
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d175      	bne.n	8004ba4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <HAL_UART_Transmit+0x2c>
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e06e      	b.n	8004ba6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2221      	movs	r2, #33	@ 0x21
 8004ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ad6:	f7fc ffdd 	bl	8001a94 <HAL_GetTick>
 8004ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	88fa      	ldrh	r2, [r7, #6]
 8004ae0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	88fa      	ldrh	r2, [r7, #6]
 8004ae6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004af0:	d108      	bne.n	8004b04 <HAL_UART_Transmit+0x6c>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d104      	bne.n	8004b04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	e003      	b.n	8004b0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b0c:	e02e      	b.n	8004b6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2180      	movs	r1, #128	@ 0x80
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f848 	bl	8004bae <UART_WaitOnFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e03a      	b.n	8004ba6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10b      	bne.n	8004b4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	3302      	adds	r3, #2
 8004b4a:	61bb      	str	r3, [r7, #24]
 8004b4c:	e007      	b.n	8004b5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	781a      	ldrb	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1cb      	bne.n	8004b0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2140      	movs	r1, #64	@ 0x40
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f814 	bl	8004bae <UART_WaitOnFlagUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e006      	b.n	8004ba6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e000      	b.n	8004ba6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
  }
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b086      	sub	sp, #24
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	603b      	str	r3, [r7, #0]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bbe:	e03b      	b.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc6:	d037      	beq.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc8:	f7fc ff64 	bl	8001a94 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	6a3a      	ldr	r2, [r7, #32]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d302      	bcc.n	8004bde <UART_WaitOnFlagUntilTimeout+0x30>
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e03a      	b.n	8004c58 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d023      	beq.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b80      	cmp	r3, #128	@ 0x80
 8004bf4:	d020      	beq.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b40      	cmp	r3, #64	@ 0x40
 8004bfa:	d01d      	beq.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d116      	bne.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f81d 	bl	8004c60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2208      	movs	r2, #8
 8004c2a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e00f      	b.n	8004c58 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4013      	ands	r3, r2
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	bf0c      	ite	eq
 8004c48:	2301      	moveq	r3, #1
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d0b4      	beq.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b095      	sub	sp, #84	@ 0x54
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	330c      	adds	r3, #12
 8004c6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c72:	e853 3f00 	ldrex	r3, [r3]
 8004c76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	330c      	adds	r3, #12
 8004c86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c88:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c90:	e841 2300 	strex	r3, r2, [r1]
 8004c94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1e5      	bne.n	8004c68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3314      	adds	r3, #20
 8004ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	e853 3f00 	ldrex	r3, [r3]
 8004caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f023 0301 	bic.w	r3, r3, #1
 8004cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3314      	adds	r3, #20
 8004cba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e5      	bne.n	8004c9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d119      	bne.n	8004d0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f023 0310 	bic.w	r3, r3, #16
 8004cee:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	330c      	adds	r3, #12
 8004cf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cf8:	61ba      	str	r2, [r7, #24]
 8004cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	6979      	ldr	r1, [r7, #20]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	613b      	str	r3, [r7, #16]
   return(result);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e5      	bne.n	8004cd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d1a:	bf00      	nop
 8004d1c:	3754      	adds	r7, #84	@ 0x54
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d2c:	b0c0      	sub	sp, #256	@ 0x100
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d44:	68d9      	ldr	r1, [r3, #12]
 8004d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	ea40 0301 	orr.w	r3, r0, r1
 8004d50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d80:	f021 010c 	bic.w	r1, r1, #12
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da2:	6999      	ldr	r1, [r3, #24]
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	ea40 0301 	orr.w	r3, r0, r1
 8004dae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	4b8f      	ldr	r3, [pc, #572]	@ (8004ff4 <UART_SetConfig+0x2cc>)
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d005      	beq.n	8004dc8 <UART_SetConfig+0xa0>
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4b8d      	ldr	r3, [pc, #564]	@ (8004ff8 <UART_SetConfig+0x2d0>)
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d104      	bne.n	8004dd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dc8:	f7fe ff5a 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 8004dcc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004dd0:	e003      	b.n	8004dda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dd2:	f7fe ff41 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 8004dd6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004de4:	f040 810c 	bne.w	8005000 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004df2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004df6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	462b      	mov	r3, r5
 8004dfe:	1891      	adds	r1, r2, r2
 8004e00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e02:	415b      	adcs	r3, r3
 8004e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	eb12 0801 	adds.w	r8, r2, r1
 8004e10:	4629      	mov	r1, r5
 8004e12:	eb43 0901 	adc.w	r9, r3, r1
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e2a:	4690      	mov	r8, r2
 8004e2c:	4699      	mov	r9, r3
 8004e2e:	4623      	mov	r3, r4
 8004e30:	eb18 0303 	adds.w	r3, r8, r3
 8004e34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e38:	462b      	mov	r3, r5
 8004e3a:	eb49 0303 	adc.w	r3, r9, r3
 8004e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e56:	460b      	mov	r3, r1
 8004e58:	18db      	adds	r3, r3, r3
 8004e5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	eb42 0303 	adc.w	r3, r2, r3
 8004e62:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e6c:	f7fb fa00 	bl	8000270 <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4b61      	ldr	r3, [pc, #388]	@ (8004ffc <UART_SetConfig+0x2d4>)
 8004e76:	fba3 2302 	umull	r2, r3, r3, r2
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	011c      	lsls	r4, r3, #4
 8004e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e90:	4642      	mov	r2, r8
 8004e92:	464b      	mov	r3, r9
 8004e94:	1891      	adds	r1, r2, r2
 8004e96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e98:	415b      	adcs	r3, r3
 8004e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	eb43 0b01 	adc.w	fp, r3, r1
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004eb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ebc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ec0:	4692      	mov	sl, r2
 8004ec2:	469b      	mov	fp, r3
 8004ec4:	4643      	mov	r3, r8
 8004ec6:	eb1a 0303 	adds.w	r3, sl, r3
 8004eca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ed4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ee4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ee8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004eec:	460b      	mov	r3, r1
 8004eee:	18db      	adds	r3, r3, r3
 8004ef0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	eb42 0303 	adc.w	r3, r2, r3
 8004ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004efa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004efe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f02:	f7fb f9b5 	bl	8000270 <__aeabi_uldivmod>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8004ffc <UART_SetConfig+0x2d4>)
 8004f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	2264      	movs	r2, #100	@ 0x64
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	1acb      	subs	r3, r1, r3
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f22:	4b36      	ldr	r3, [pc, #216]	@ (8004ffc <UART_SetConfig+0x2d4>)
 8004f24:	fba3 2302 	umull	r2, r3, r3, r2
 8004f28:	095b      	lsrs	r3, r3, #5
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f30:	441c      	add	r4, r3
 8004f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f44:	4642      	mov	r2, r8
 8004f46:	464b      	mov	r3, r9
 8004f48:	1891      	adds	r1, r2, r2
 8004f4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f4c:	415b      	adcs	r3, r3
 8004f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f54:	4641      	mov	r1, r8
 8004f56:	1851      	adds	r1, r2, r1
 8004f58:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	414b      	adcs	r3, r1
 8004f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f6c:	4659      	mov	r1, fp
 8004f6e:	00cb      	lsls	r3, r1, #3
 8004f70:	4651      	mov	r1, sl
 8004f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f76:	4651      	mov	r1, sl
 8004f78:	00ca      	lsls	r2, r1, #3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4642      	mov	r2, r8
 8004f82:	189b      	adds	r3, r3, r2
 8004f84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f88:	464b      	mov	r3, r9
 8004f8a:	460a      	mov	r2, r1
 8004f8c:	eb42 0303 	adc.w	r3, r2, r3
 8004f90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004fa0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004fa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004fa8:	460b      	mov	r3, r1
 8004faa:	18db      	adds	r3, r3, r3
 8004fac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fae:	4613      	mov	r3, r2
 8004fb0:	eb42 0303 	adc.w	r3, r2, r3
 8004fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004fbe:	f7fb f957 	bl	8000270 <__aeabi_uldivmod>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004ffc <UART_SetConfig+0x2d4>)
 8004fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fcc:	095b      	lsrs	r3, r3, #5
 8004fce:	2164      	movs	r1, #100	@ 0x64
 8004fd0:	fb01 f303 	mul.w	r3, r1, r3
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	3332      	adds	r3, #50	@ 0x32
 8004fda:	4a08      	ldr	r2, [pc, #32]	@ (8004ffc <UART_SetConfig+0x2d4>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	095b      	lsrs	r3, r3, #5
 8004fe2:	f003 0207 	and.w	r2, r3, #7
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4422      	add	r2, r4
 8004fee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ff0:	e106      	b.n	8005200 <UART_SetConfig+0x4d8>
 8004ff2:	bf00      	nop
 8004ff4:	40011000 	.word	0x40011000
 8004ff8:	40011400 	.word	0x40011400
 8004ffc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005004:	2200      	movs	r2, #0
 8005006:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800500a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800500e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005012:	4642      	mov	r2, r8
 8005014:	464b      	mov	r3, r9
 8005016:	1891      	adds	r1, r2, r2
 8005018:	6239      	str	r1, [r7, #32]
 800501a:	415b      	adcs	r3, r3
 800501c:	627b      	str	r3, [r7, #36]	@ 0x24
 800501e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005022:	4641      	mov	r1, r8
 8005024:	1854      	adds	r4, r2, r1
 8005026:	4649      	mov	r1, r9
 8005028:	eb43 0501 	adc.w	r5, r3, r1
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	00eb      	lsls	r3, r5, #3
 8005036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800503a:	00e2      	lsls	r2, r4, #3
 800503c:	4614      	mov	r4, r2
 800503e:	461d      	mov	r5, r3
 8005040:	4643      	mov	r3, r8
 8005042:	18e3      	adds	r3, r4, r3
 8005044:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005048:	464b      	mov	r3, r9
 800504a:	eb45 0303 	adc.w	r3, r5, r3
 800504e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800505e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800506e:	4629      	mov	r1, r5
 8005070:	008b      	lsls	r3, r1, #2
 8005072:	4621      	mov	r1, r4
 8005074:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005078:	4621      	mov	r1, r4
 800507a:	008a      	lsls	r2, r1, #2
 800507c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005080:	f7fb f8f6 	bl	8000270 <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4b60      	ldr	r3, [pc, #384]	@ (800520c <UART_SetConfig+0x4e4>)
 800508a:	fba3 2302 	umull	r2, r3, r3, r2
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	011c      	lsls	r4, r3, #4
 8005092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005096:	2200      	movs	r2, #0
 8005098:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800509c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80050a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	1891      	adds	r1, r2, r2
 80050aa:	61b9      	str	r1, [r7, #24]
 80050ac:	415b      	adcs	r3, r3
 80050ae:	61fb      	str	r3, [r7, #28]
 80050b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050b4:	4641      	mov	r1, r8
 80050b6:	1851      	adds	r1, r2, r1
 80050b8:	6139      	str	r1, [r7, #16]
 80050ba:	4649      	mov	r1, r9
 80050bc:	414b      	adcs	r3, r1
 80050be:	617b      	str	r3, [r7, #20]
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050cc:	4659      	mov	r1, fp
 80050ce:	00cb      	lsls	r3, r1, #3
 80050d0:	4651      	mov	r1, sl
 80050d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d6:	4651      	mov	r1, sl
 80050d8:	00ca      	lsls	r2, r1, #3
 80050da:	4610      	mov	r0, r2
 80050dc:	4619      	mov	r1, r3
 80050de:	4603      	mov	r3, r0
 80050e0:	4642      	mov	r2, r8
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050e8:	464b      	mov	r3, r9
 80050ea:	460a      	mov	r2, r1
 80050ec:	eb42 0303 	adc.w	r3, r2, r3
 80050f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800510c:	4649      	mov	r1, r9
 800510e:	008b      	lsls	r3, r1, #2
 8005110:	4641      	mov	r1, r8
 8005112:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005116:	4641      	mov	r1, r8
 8005118:	008a      	lsls	r2, r1, #2
 800511a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800511e:	f7fb f8a7 	bl	8000270 <__aeabi_uldivmod>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4611      	mov	r1, r2
 8005128:	4b38      	ldr	r3, [pc, #224]	@ (800520c <UART_SetConfig+0x4e4>)
 800512a:	fba3 2301 	umull	r2, r3, r3, r1
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	2264      	movs	r2, #100	@ 0x64
 8005132:	fb02 f303 	mul.w	r3, r2, r3
 8005136:	1acb      	subs	r3, r1, r3
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	3332      	adds	r3, #50	@ 0x32
 800513c:	4a33      	ldr	r2, [pc, #204]	@ (800520c <UART_SetConfig+0x4e4>)
 800513e:	fba2 2303 	umull	r2, r3, r2, r3
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005148:	441c      	add	r4, r3
 800514a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800514e:	2200      	movs	r2, #0
 8005150:	673b      	str	r3, [r7, #112]	@ 0x70
 8005152:	677a      	str	r2, [r7, #116]	@ 0x74
 8005154:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005158:	4642      	mov	r2, r8
 800515a:	464b      	mov	r3, r9
 800515c:	1891      	adds	r1, r2, r2
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	415b      	adcs	r3, r3
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005168:	4641      	mov	r1, r8
 800516a:	1851      	adds	r1, r2, r1
 800516c:	6039      	str	r1, [r7, #0]
 800516e:	4649      	mov	r1, r9
 8005170:	414b      	adcs	r3, r1
 8005172:	607b      	str	r3, [r7, #4]
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005180:	4659      	mov	r1, fp
 8005182:	00cb      	lsls	r3, r1, #3
 8005184:	4651      	mov	r1, sl
 8005186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800518a:	4651      	mov	r1, sl
 800518c:	00ca      	lsls	r2, r1, #3
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	4603      	mov	r3, r0
 8005194:	4642      	mov	r2, r8
 8005196:	189b      	adds	r3, r3, r2
 8005198:	66bb      	str	r3, [r7, #104]	@ 0x68
 800519a:	464b      	mov	r3, r9
 800519c:	460a      	mov	r2, r1
 800519e:	eb42 0303 	adc.w	r3, r2, r3
 80051a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80051ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051bc:	4649      	mov	r1, r9
 80051be:	008b      	lsls	r3, r1, #2
 80051c0:	4641      	mov	r1, r8
 80051c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c6:	4641      	mov	r1, r8
 80051c8:	008a      	lsls	r2, r1, #2
 80051ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80051ce:	f7fb f84f 	bl	8000270 <__aeabi_uldivmod>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4b0d      	ldr	r3, [pc, #52]	@ (800520c <UART_SetConfig+0x4e4>)
 80051d8:	fba3 1302 	umull	r1, r3, r3, r2
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	2164      	movs	r1, #100	@ 0x64
 80051e0:	fb01 f303 	mul.w	r3, r1, r3
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	3332      	adds	r3, #50	@ 0x32
 80051ea:	4a08      	ldr	r2, [pc, #32]	@ (800520c <UART_SetConfig+0x4e4>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	f003 020f 	and.w	r2, r3, #15
 80051f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4422      	add	r2, r4
 80051fe:	609a      	str	r2, [r3, #8]
}
 8005200:	bf00      	nop
 8005202:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005206:	46bd      	mov	sp, r7
 8005208:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800520c:	51eb851f 	.word	0x51eb851f

08005210 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005210:	b084      	sub	sp, #16
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	f107 001c 	add.w	r0, r7, #28
 800521e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005222:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005226:	2b01      	cmp	r3, #1
 8005228:	d123      	bne.n	8005272 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800523e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005252:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005256:	2b01      	cmp	r3, #1
 8005258:	d105      	bne.n	8005266 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fdbc 	bl	8005de4 <USB_CoreReset>
 800526c:	4603      	mov	r3, r0
 800526e:	73fb      	strb	r3, [r7, #15]
 8005270:	e01b      	b.n	80052aa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fdb0 	bl	8005de4 <USB_CoreReset>
 8005284:	4603      	mov	r3, r0
 8005286:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005288:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800528c:	2b00      	cmp	r3, #0
 800528e:	d106      	bne.n	800529e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005294:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	639a      	str	r2, [r3, #56]	@ 0x38
 800529c:	e005      	b.n	80052aa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052aa:	7fbb      	ldrb	r3, [r7, #30]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d10b      	bne.n	80052c8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f043 0206 	orr.w	r2, r3, #6
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f043 0220 	orr.w	r2, r3, #32
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052d4:	b004      	add	sp, #16
 80052d6:	4770      	bx	lr

080052d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	4613      	mov	r3, r2
 80052e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052e6:	79fb      	ldrb	r3, [r7, #7]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d165      	bne.n	80053b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4a41      	ldr	r2, [pc, #260]	@ (80053f4 <USB_SetTurnaroundTime+0x11c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d906      	bls.n	8005302 <USB_SetTurnaroundTime+0x2a>
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4a40      	ldr	r2, [pc, #256]	@ (80053f8 <USB_SetTurnaroundTime+0x120>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d202      	bcs.n	8005302 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052fc:	230f      	movs	r3, #15
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	e062      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4a3c      	ldr	r2, [pc, #240]	@ (80053f8 <USB_SetTurnaroundTime+0x120>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d306      	bcc.n	8005318 <USB_SetTurnaroundTime+0x40>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4a3b      	ldr	r2, [pc, #236]	@ (80053fc <USB_SetTurnaroundTime+0x124>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d202      	bcs.n	8005318 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005312:	230e      	movs	r3, #14
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e057      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4a38      	ldr	r2, [pc, #224]	@ (80053fc <USB_SetTurnaroundTime+0x124>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d306      	bcc.n	800532e <USB_SetTurnaroundTime+0x56>
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4a37      	ldr	r2, [pc, #220]	@ (8005400 <USB_SetTurnaroundTime+0x128>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d202      	bcs.n	800532e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005328:	230d      	movs	r3, #13
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	e04c      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4a33      	ldr	r2, [pc, #204]	@ (8005400 <USB_SetTurnaroundTime+0x128>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d306      	bcc.n	8005344 <USB_SetTurnaroundTime+0x6c>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4a32      	ldr	r2, [pc, #200]	@ (8005404 <USB_SetTurnaroundTime+0x12c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d802      	bhi.n	8005344 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800533e:	230c      	movs	r3, #12
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e041      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4a2f      	ldr	r2, [pc, #188]	@ (8005404 <USB_SetTurnaroundTime+0x12c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d906      	bls.n	800535a <USB_SetTurnaroundTime+0x82>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4a2e      	ldr	r2, [pc, #184]	@ (8005408 <USB_SetTurnaroundTime+0x130>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d802      	bhi.n	800535a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005354:	230b      	movs	r3, #11
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	e036      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	4a2a      	ldr	r2, [pc, #168]	@ (8005408 <USB_SetTurnaroundTime+0x130>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d906      	bls.n	8005370 <USB_SetTurnaroundTime+0x98>
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	4a29      	ldr	r2, [pc, #164]	@ (800540c <USB_SetTurnaroundTime+0x134>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d802      	bhi.n	8005370 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800536a:	230a      	movs	r3, #10
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	e02b      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4a26      	ldr	r2, [pc, #152]	@ (800540c <USB_SetTurnaroundTime+0x134>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d906      	bls.n	8005386 <USB_SetTurnaroundTime+0xae>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4a25      	ldr	r2, [pc, #148]	@ (8005410 <USB_SetTurnaroundTime+0x138>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d202      	bcs.n	8005386 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005380:	2309      	movs	r3, #9
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	e020      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	4a21      	ldr	r2, [pc, #132]	@ (8005410 <USB_SetTurnaroundTime+0x138>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d306      	bcc.n	800539c <USB_SetTurnaroundTime+0xc4>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	4a20      	ldr	r2, [pc, #128]	@ (8005414 <USB_SetTurnaroundTime+0x13c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d802      	bhi.n	800539c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005396:	2308      	movs	r3, #8
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	e015      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4a1d      	ldr	r2, [pc, #116]	@ (8005414 <USB_SetTurnaroundTime+0x13c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d906      	bls.n	80053b2 <USB_SetTurnaroundTime+0xda>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005418 <USB_SetTurnaroundTime+0x140>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d202      	bcs.n	80053b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80053ac:	2307      	movs	r3, #7
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	e00a      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80053b2:	2306      	movs	r3, #6
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	e007      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80053b8:	79fb      	ldrb	r3, [r7, #7]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80053be:	2309      	movs	r3, #9
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	e001      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80053c4:	2309      	movs	r3, #9
 80053c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	029b      	lsls	r3, r3, #10
 80053dc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80053e0:	431a      	orrs	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	00d8acbf 	.word	0x00d8acbf
 80053f8:	00e4e1c0 	.word	0x00e4e1c0
 80053fc:	00f42400 	.word	0x00f42400
 8005400:	01067380 	.word	0x01067380
 8005404:	011a499f 	.word	0x011a499f
 8005408:	01312cff 	.word	0x01312cff
 800540c:	014ca43f 	.word	0x014ca43f
 8005410:	016e3600 	.word	0x016e3600
 8005414:	01a6ab1f 	.word	0x01a6ab1f
 8005418:	01e84800 	.word	0x01e84800

0800541c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f023 0201 	bic.w	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	460b      	mov	r3, r1
 8005448:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800545a:	78fb      	ldrb	r3, [r7, #3]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d115      	bne.n	800548c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800546c:	200a      	movs	r0, #10
 800546e:	f7fc fb1d 	bl	8001aac <HAL_Delay>
      ms += 10U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	330a      	adds	r3, #10
 8005476:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fc23 	bl	8005cc4 <USB_GetMode>
 800547e:	4603      	mov	r3, r0
 8005480:	2b01      	cmp	r3, #1
 8005482:	d01e      	beq.n	80054c2 <USB_SetCurrentMode+0x84>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2bc7      	cmp	r3, #199	@ 0xc7
 8005488:	d9f0      	bls.n	800546c <USB_SetCurrentMode+0x2e>
 800548a:	e01a      	b.n	80054c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d115      	bne.n	80054be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800549e:	200a      	movs	r0, #10
 80054a0:	f7fc fb04 	bl	8001aac <HAL_Delay>
      ms += 10U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	330a      	adds	r3, #10
 80054a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fc0a 	bl	8005cc4 <USB_GetMode>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <USB_SetCurrentMode+0x84>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80054ba:	d9f0      	bls.n	800549e <USB_SetCurrentMode+0x60>
 80054bc:	e001      	b.n	80054c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e005      	b.n	80054ce <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2bc8      	cmp	r3, #200	@ 0xc8
 80054c6:	d101      	bne.n	80054cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054d8:	b084      	sub	sp, #16
 80054da:	b580      	push	{r7, lr}
 80054dc:	b086      	sub	sp, #24
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80054e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054f2:	2300      	movs	r3, #0
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	e009      	b.n	800550c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	3340      	adds	r3, #64	@ 0x40
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	2200      	movs	r2, #0
 8005504:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	3301      	adds	r3, #1
 800550a:	613b      	str	r3, [r7, #16]
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	2b0e      	cmp	r3, #14
 8005510:	d9f2      	bls.n	80054f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005512:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005516:	2b00      	cmp	r3, #0
 8005518:	d11c      	bne.n	8005554 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005528:	f043 0302 	orr.w	r3, r3, #2
 800552c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005532:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800553e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	639a      	str	r2, [r3, #56]	@ 0x38
 8005552:	e00b      	b.n	800556c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005558:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005564:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005572:	461a      	mov	r2, r3
 8005574:	2300      	movs	r3, #0
 8005576:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005578:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800557c:	2b01      	cmp	r3, #1
 800557e:	d10d      	bne.n	800559c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005584:	2b00      	cmp	r3, #0
 8005586:	d104      	bne.n	8005592 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005588:	2100      	movs	r1, #0
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f968 	bl	8005860 <USB_SetDevSpeed>
 8005590:	e008      	b.n	80055a4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005592:	2101      	movs	r1, #1
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f963 	bl	8005860 <USB_SetDevSpeed>
 800559a:	e003      	b.n	80055a4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800559c:	2103      	movs	r1, #3
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f95e 	bl	8005860 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055a4:	2110      	movs	r1, #16
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f8fa 	bl	80057a0 <USB_FlushTxFifo>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f924 	bl	8005804 <USB_FlushRxFifo>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055cc:	461a      	mov	r2, r3
 80055ce:	2300      	movs	r3, #0
 80055d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055d8:	461a      	mov	r2, r3
 80055da:	2300      	movs	r3, #0
 80055dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e4:	461a      	mov	r2, r3
 80055e6:	2300      	movs	r3, #0
 80055e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ea:	2300      	movs	r3, #0
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	e043      	b.n	8005678 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005602:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005606:	d118      	bne.n	800563a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10a      	bne.n	8005624 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800561a:	461a      	mov	r2, r3
 800561c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	e013      	b.n	800564c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005630:	461a      	mov	r2, r3
 8005632:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005636:	6013      	str	r3, [r2, #0]
 8005638:	e008      	b.n	800564c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005646:	461a      	mov	r2, r3
 8005648:	2300      	movs	r3, #0
 800564a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005658:	461a      	mov	r2, r3
 800565a:	2300      	movs	r3, #0
 800565c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800566a:	461a      	mov	r2, r3
 800566c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005670:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	3301      	adds	r3, #1
 8005676:	613b      	str	r3, [r7, #16]
 8005678:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800567c:	461a      	mov	r2, r3
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	4293      	cmp	r3, r2
 8005682:	d3b5      	bcc.n	80055f0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]
 8005688:	e043      	b.n	8005712 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800569c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056a0:	d118      	bne.n	80056d4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b4:	461a      	mov	r2, r3
 80056b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	e013      	b.n	80056e6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ca:	461a      	mov	r2, r3
 80056cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e008      	b.n	80056e6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e0:	461a      	mov	r2, r3
 80056e2:	2300      	movs	r3, #0
 80056e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f2:	461a      	mov	r2, r3
 80056f4:	2300      	movs	r3, #0
 80056f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005704:	461a      	mov	r2, r3
 8005706:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800570a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	3301      	adds	r3, #1
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005716:	461a      	mov	r2, r3
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	4293      	cmp	r3, r2
 800571c:	d3b5      	bcc.n	800568a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800572c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005730:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800573e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005740:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005744:	2b00      	cmp	r3, #0
 8005746:	d105      	bne.n	8005754 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f043 0210 	orr.w	r2, r3, #16
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	699a      	ldr	r2, [r3, #24]
 8005758:	4b10      	ldr	r3, [pc, #64]	@ (800579c <USB_DevInit+0x2c4>)
 800575a:	4313      	orrs	r3, r2
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005760:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	f043 0208 	orr.w	r2, r3, #8
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005774:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005778:	2b01      	cmp	r3, #1
 800577a:	d107      	bne.n	800578c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005784:	f043 0304 	orr.w	r3, r3, #4
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800578c:	7dfb      	ldrb	r3, [r7, #23]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005798:	b004      	add	sp, #16
 800579a:	4770      	bx	lr
 800579c:	803c3800 	.word	0x803c3800

080057a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3301      	adds	r3, #1
 80057b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057ba:	d901      	bls.n	80057c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e01b      	b.n	80057f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	daf2      	bge.n	80057ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	019b      	lsls	r3, r3, #6
 80057d0:	f043 0220 	orr.w	r2, r3, #32
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3301      	adds	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057e4:	d901      	bls.n	80057ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e006      	b.n	80057f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0320 	and.w	r3, r3, #32
 80057f2:	2b20      	cmp	r3, #32
 80057f4:	d0f0      	beq.n	80057d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3301      	adds	r3, #1
 8005814:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800581c:	d901      	bls.n	8005822 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e018      	b.n	8005854 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	daf2      	bge.n	8005810 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2210      	movs	r2, #16
 8005832:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3301      	adds	r3, #1
 8005838:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005840:	d901      	bls.n	8005846 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e006      	b.n	8005854 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	2b10      	cmp	r3, #16
 8005850:	d0f0      	beq.n	8005834 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	460b      	mov	r3, r1
 800586a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	68f9      	ldr	r1, [r7, #12]
 800587c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005880:	4313      	orrs	r3, r2
 8005882:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005892:	b480      	push	{r7}
 8005894:	b087      	sub	sp, #28
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 0306 	and.w	r3, r3, #6
 80058aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80058b2:	2300      	movs	r3, #0
 80058b4:	75fb      	strb	r3, [r7, #23]
 80058b6:	e00a      	b.n	80058ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d002      	beq.n	80058c4 <USB_GetDevSpeed+0x32>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2b06      	cmp	r3, #6
 80058c2:	d102      	bne.n	80058ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80058c4:	2302      	movs	r3, #2
 80058c6:	75fb      	strb	r3, [r7, #23]
 80058c8:	e001      	b.n	80058ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80058ca:	230f      	movs	r3, #15
 80058cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80058ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	371c      	adds	r7, #28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	785b      	ldrb	r3, [r3, #1]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d14a      	bne.n	8005990 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800590e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005912:	f040 8086 	bne.w	8005a22 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	7812      	ldrb	r2, [r2, #0]
 800592a:	0151      	lsls	r1, r2, #5
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	440a      	add	r2, r1
 8005930:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005934:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005938:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	7812      	ldrb	r2, [r2, #0]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	440a      	add	r2, r1
 8005954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005958:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800595c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3301      	adds	r3, #1
 8005962:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f242 7210 	movw	r2, #10000	@ 0x2710
 800596a:	4293      	cmp	r3, r2
 800596c:	d902      	bls.n	8005974 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	75fb      	strb	r3, [r7, #23]
          break;
 8005972:	e056      	b.n	8005a22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005988:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800598c:	d0e7      	beq.n	800595e <USB_EPStopXfer+0x82>
 800598e:	e048      	b.n	8005a22 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059a8:	d13b      	bne.n	8005a22 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	7812      	ldrb	r2, [r2, #0]
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80059cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	7812      	ldrb	r2, [r2, #0]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3301      	adds	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d902      	bls.n	8005a08 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	75fb      	strb	r3, [r7, #23]
          break;
 8005a06:	e00c      	b.n	8005a22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a20:	d0e7      	beq.n	80059f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b089      	sub	sp, #36	@ 0x24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	460b      	mov	r3, r1
 8005a40:	71fb      	strb	r3, [r7, #7]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d123      	bne.n	8005a9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a56:	88bb      	ldrh	r3, [r7, #4]
 8005a58:	3303      	adds	r3, #3
 8005a5a:	089b      	lsrs	r3, r3, #2
 8005a5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61bb      	str	r3, [r7, #24]
 8005a62:	e018      	b.n	8005a96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a64:	79fb      	ldrb	r3, [r7, #7]
 8005a66:	031a      	lsls	r2, r3, #12
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a70:	461a      	mov	r2, r3
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	3301      	adds	r3, #1
 8005a82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	3301      	adds	r3, #1
 8005a88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	3301      	adds	r3, #1
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d3e2      	bcc.n	8005a64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3724      	adds	r7, #36	@ 0x24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b08b      	sub	sp, #44	@ 0x2c
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ac2:	88fb      	ldrh	r3, [r7, #6]
 8005ac4:	089b      	lsrs	r3, r3, #2
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	623b      	str	r3, [r7, #32]
 8005ad6:	e014      	b.n	8005b02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	3301      	adds	r3, #1
 8005aee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af2:	3301      	adds	r3, #1
 8005af4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	3301      	adds	r3, #1
 8005afa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	3301      	adds	r3, #1
 8005b00:	623b      	str	r3, [r7, #32]
 8005b02:	6a3a      	ldr	r2, [r7, #32]
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d3e6      	bcc.n	8005ad8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b0a:	8bfb      	ldrh	r3, [r7, #30]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01e      	beq.n	8005b4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f107 0310 	add.w	r3, r7, #16
 8005b20:	6812      	ldr	r2, [r2, #0]
 8005b22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	701a      	strb	r2, [r3, #0]
      i++;
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	3301      	adds	r3, #1
 8005b40:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005b42:	8bfb      	ldrh	r3, [r7, #30]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b48:	8bfb      	ldrh	r3, [r7, #30]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1ea      	bne.n	8005b24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	372c      	adds	r7, #44	@ 0x2c
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b76:	f023 0303 	bic.w	r3, r3, #3
 8005b7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b8a:	f043 0302 	orr.w	r3, r3, #2
 8005b8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	4013      	ands	r3, r2
 8005be6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	0c1b      	lsrs	r3, r3, #16
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	b29b      	uxth	r3, r3
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	4013      	ands	r3, r2
 8005c58:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c8a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	fa22 f303 	lsr.w	r3, r2, r3
 8005c98:	01db      	lsls	r3, r3, #7
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cfa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005cfe:	f023 0307 	bic.w	r3, r3, #7
 8005d02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	460b      	mov	r3, r1
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	333c      	adds	r3, #60	@ 0x3c
 8005d3e:	3304      	adds	r3, #4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	4a26      	ldr	r2, [pc, #152]	@ (8005de0 <USB_EP0_OutStart+0xb8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d90a      	bls.n	8005d62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d5c:	d101      	bne.n	8005d62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	e037      	b.n	8005dd2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d90:	f043 0318 	orr.w	r3, r3, #24
 8005d94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005da4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005da8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005daa:	7afb      	ldrb	r3, [r7, #11]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d10f      	bne.n	8005dd0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db6:	461a      	mov	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005dce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	4f54300a 	.word	0x4f54300a

08005de4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3301      	adds	r3, #1
 8005df4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dfc:	d901      	bls.n	8005e02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e022      	b.n	8005e48 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	daf2      	bge.n	8005df0 <USB_CoreReset+0xc>

  count = 10U;
 8005e0a:	230a      	movs	r3, #10
 8005e0c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005e0e:	e002      	b.n	8005e16 <USB_CoreReset+0x32>
  {
    count--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1f9      	bne.n	8005e10 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f043 0201 	orr.w	r2, r3, #1
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e34:	d901      	bls.n	8005e3a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e006      	b.n	8005e48 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d0f0      	beq.n	8005e28 <USB_CoreReset+0x44>

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <malloc>:
 8005e54:	4b02      	ldr	r3, [pc, #8]	@ (8005e60 <malloc+0xc>)
 8005e56:	4601      	mov	r1, r0
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	f000 b825 	b.w	8005ea8 <_malloc_r>
 8005e5e:	bf00      	nop
 8005e60:	2000000c 	.word	0x2000000c

08005e64 <sbrk_aligned>:
 8005e64:	b570      	push	{r4, r5, r6, lr}
 8005e66:	4e0f      	ldr	r6, [pc, #60]	@ (8005ea4 <sbrk_aligned+0x40>)
 8005e68:	460c      	mov	r4, r1
 8005e6a:	6831      	ldr	r1, [r6, #0]
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	b911      	cbnz	r1, 8005e76 <sbrk_aligned+0x12>
 8005e70:	f000 f8d0 	bl	8006014 <_sbrk_r>
 8005e74:	6030      	str	r0, [r6, #0]
 8005e76:	4621      	mov	r1, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f000 f8cb 	bl	8006014 <_sbrk_r>
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	d103      	bne.n	8005e8a <sbrk_aligned+0x26>
 8005e82:	f04f 34ff 	mov.w	r4, #4294967295
 8005e86:	4620      	mov	r0, r4
 8005e88:	bd70      	pop	{r4, r5, r6, pc}
 8005e8a:	1cc4      	adds	r4, r0, #3
 8005e8c:	f024 0403 	bic.w	r4, r4, #3
 8005e90:	42a0      	cmp	r0, r4
 8005e92:	d0f8      	beq.n	8005e86 <sbrk_aligned+0x22>
 8005e94:	1a21      	subs	r1, r4, r0
 8005e96:	4628      	mov	r0, r5
 8005e98:	f000 f8bc 	bl	8006014 <_sbrk_r>
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d1f2      	bne.n	8005e86 <sbrk_aligned+0x22>
 8005ea0:	e7ef      	b.n	8005e82 <sbrk_aligned+0x1e>
 8005ea2:	bf00      	nop
 8005ea4:	20000760 	.word	0x20000760

08005ea8 <_malloc_r>:
 8005ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eac:	1ccd      	adds	r5, r1, #3
 8005eae:	f025 0503 	bic.w	r5, r5, #3
 8005eb2:	3508      	adds	r5, #8
 8005eb4:	2d0c      	cmp	r5, #12
 8005eb6:	bf38      	it	cc
 8005eb8:	250c      	movcc	r5, #12
 8005eba:	2d00      	cmp	r5, #0
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	db01      	blt.n	8005ec4 <_malloc_r+0x1c>
 8005ec0:	42a9      	cmp	r1, r5
 8005ec2:	d904      	bls.n	8005ece <_malloc_r+0x26>
 8005ec4:	230c      	movs	r3, #12
 8005ec6:	6033      	str	r3, [r6, #0]
 8005ec8:	2000      	movs	r0, #0
 8005eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ece:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005fa4 <_malloc_r+0xfc>
 8005ed2:	f000 f869 	bl	8005fa8 <__malloc_lock>
 8005ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8005eda:	461c      	mov	r4, r3
 8005edc:	bb44      	cbnz	r4, 8005f30 <_malloc_r+0x88>
 8005ede:	4629      	mov	r1, r5
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f7ff ffbf 	bl	8005e64 <sbrk_aligned>
 8005ee6:	1c43      	adds	r3, r0, #1
 8005ee8:	4604      	mov	r4, r0
 8005eea:	d158      	bne.n	8005f9e <_malloc_r+0xf6>
 8005eec:	f8d8 4000 	ldr.w	r4, [r8]
 8005ef0:	4627      	mov	r7, r4
 8005ef2:	2f00      	cmp	r7, #0
 8005ef4:	d143      	bne.n	8005f7e <_malloc_r+0xd6>
 8005ef6:	2c00      	cmp	r4, #0
 8005ef8:	d04b      	beq.n	8005f92 <_malloc_r+0xea>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	4639      	mov	r1, r7
 8005efe:	4630      	mov	r0, r6
 8005f00:	eb04 0903 	add.w	r9, r4, r3
 8005f04:	f000 f886 	bl	8006014 <_sbrk_r>
 8005f08:	4581      	cmp	r9, r0
 8005f0a:	d142      	bne.n	8005f92 <_malloc_r+0xea>
 8005f0c:	6821      	ldr	r1, [r4, #0]
 8005f0e:	1a6d      	subs	r5, r5, r1
 8005f10:	4629      	mov	r1, r5
 8005f12:	4630      	mov	r0, r6
 8005f14:	f7ff ffa6 	bl	8005e64 <sbrk_aligned>
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d03a      	beq.n	8005f92 <_malloc_r+0xea>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	442b      	add	r3, r5
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	f8d8 3000 	ldr.w	r3, [r8]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	bb62      	cbnz	r2, 8005f84 <_malloc_r+0xdc>
 8005f2a:	f8c8 7000 	str.w	r7, [r8]
 8005f2e:	e00f      	b.n	8005f50 <_malloc_r+0xa8>
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	1b52      	subs	r2, r2, r5
 8005f34:	d420      	bmi.n	8005f78 <_malloc_r+0xd0>
 8005f36:	2a0b      	cmp	r2, #11
 8005f38:	d917      	bls.n	8005f6a <_malloc_r+0xc2>
 8005f3a:	1961      	adds	r1, r4, r5
 8005f3c:	42a3      	cmp	r3, r4
 8005f3e:	6025      	str	r5, [r4, #0]
 8005f40:	bf18      	it	ne
 8005f42:	6059      	strne	r1, [r3, #4]
 8005f44:	6863      	ldr	r3, [r4, #4]
 8005f46:	bf08      	it	eq
 8005f48:	f8c8 1000 	streq.w	r1, [r8]
 8005f4c:	5162      	str	r2, [r4, r5]
 8005f4e:	604b      	str	r3, [r1, #4]
 8005f50:	4630      	mov	r0, r6
 8005f52:	f000 f82f 	bl	8005fb4 <__malloc_unlock>
 8005f56:	f104 000b 	add.w	r0, r4, #11
 8005f5a:	1d23      	adds	r3, r4, #4
 8005f5c:	f020 0007 	bic.w	r0, r0, #7
 8005f60:	1ac2      	subs	r2, r0, r3
 8005f62:	bf1c      	itt	ne
 8005f64:	1a1b      	subne	r3, r3, r0
 8005f66:	50a3      	strne	r3, [r4, r2]
 8005f68:	e7af      	b.n	8005eca <_malloc_r+0x22>
 8005f6a:	6862      	ldr	r2, [r4, #4]
 8005f6c:	42a3      	cmp	r3, r4
 8005f6e:	bf0c      	ite	eq
 8005f70:	f8c8 2000 	streq.w	r2, [r8]
 8005f74:	605a      	strne	r2, [r3, #4]
 8005f76:	e7eb      	b.n	8005f50 <_malloc_r+0xa8>
 8005f78:	4623      	mov	r3, r4
 8005f7a:	6864      	ldr	r4, [r4, #4]
 8005f7c:	e7ae      	b.n	8005edc <_malloc_r+0x34>
 8005f7e:	463c      	mov	r4, r7
 8005f80:	687f      	ldr	r7, [r7, #4]
 8005f82:	e7b6      	b.n	8005ef2 <_malloc_r+0x4a>
 8005f84:	461a      	mov	r2, r3
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	42a3      	cmp	r3, r4
 8005f8a:	d1fb      	bne.n	8005f84 <_malloc_r+0xdc>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	6053      	str	r3, [r2, #4]
 8005f90:	e7de      	b.n	8005f50 <_malloc_r+0xa8>
 8005f92:	230c      	movs	r3, #12
 8005f94:	6033      	str	r3, [r6, #0]
 8005f96:	4630      	mov	r0, r6
 8005f98:	f000 f80c 	bl	8005fb4 <__malloc_unlock>
 8005f9c:	e794      	b.n	8005ec8 <_malloc_r+0x20>
 8005f9e:	6005      	str	r5, [r0, #0]
 8005fa0:	e7d6      	b.n	8005f50 <_malloc_r+0xa8>
 8005fa2:	bf00      	nop
 8005fa4:	20000764 	.word	0x20000764

08005fa8 <__malloc_lock>:
 8005fa8:	4801      	ldr	r0, [pc, #4]	@ (8005fb0 <__malloc_lock+0x8>)
 8005faa:	f000 b86d 	b.w	8006088 <__retarget_lock_acquire_recursive>
 8005fae:	bf00      	nop
 8005fb0:	200008a4 	.word	0x200008a4

08005fb4 <__malloc_unlock>:
 8005fb4:	4801      	ldr	r0, [pc, #4]	@ (8005fbc <__malloc_unlock+0x8>)
 8005fb6:	f000 b868 	b.w	800608a <__retarget_lock_release_recursive>
 8005fba:	bf00      	nop
 8005fbc:	200008a4 	.word	0x200008a4

08005fc0 <siprintf>:
 8005fc0:	b40e      	push	{r1, r2, r3}
 8005fc2:	b510      	push	{r4, lr}
 8005fc4:	b09d      	sub	sp, #116	@ 0x74
 8005fc6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005fc8:	9002      	str	r0, [sp, #8]
 8005fca:	9006      	str	r0, [sp, #24]
 8005fcc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005fd0:	480a      	ldr	r0, [pc, #40]	@ (8005ffc <siprintf+0x3c>)
 8005fd2:	9107      	str	r1, [sp, #28]
 8005fd4:	9104      	str	r1, [sp, #16]
 8005fd6:	490a      	ldr	r1, [pc, #40]	@ (8006000 <siprintf+0x40>)
 8005fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fdc:	9105      	str	r1, [sp, #20]
 8005fde:	2400      	movs	r4, #0
 8005fe0:	a902      	add	r1, sp, #8
 8005fe2:	6800      	ldr	r0, [r0, #0]
 8005fe4:	9301      	str	r3, [sp, #4]
 8005fe6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005fe8:	f000 f8f6 	bl	80061d8 <_svfiprintf_r>
 8005fec:	9b02      	ldr	r3, [sp, #8]
 8005fee:	701c      	strb	r4, [r3, #0]
 8005ff0:	b01d      	add	sp, #116	@ 0x74
 8005ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff6:	b003      	add	sp, #12
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	2000000c 	.word	0x2000000c
 8006000:	ffff0208 	.word	0xffff0208

08006004 <memset>:
 8006004:	4402      	add	r2, r0
 8006006:	4603      	mov	r3, r0
 8006008:	4293      	cmp	r3, r2
 800600a:	d100      	bne.n	800600e <memset+0xa>
 800600c:	4770      	bx	lr
 800600e:	f803 1b01 	strb.w	r1, [r3], #1
 8006012:	e7f9      	b.n	8006008 <memset+0x4>

08006014 <_sbrk_r>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	4d06      	ldr	r5, [pc, #24]	@ (8006030 <_sbrk_r+0x1c>)
 8006018:	2300      	movs	r3, #0
 800601a:	4604      	mov	r4, r0
 800601c:	4608      	mov	r0, r1
 800601e:	602b      	str	r3, [r5, #0]
 8006020:	f7fb fc60 	bl	80018e4 <_sbrk>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d102      	bne.n	800602e <_sbrk_r+0x1a>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	b103      	cbz	r3, 800602e <_sbrk_r+0x1a>
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	200008a0 	.word	0x200008a0

08006034 <__errno>:
 8006034:	4b01      	ldr	r3, [pc, #4]	@ (800603c <__errno+0x8>)
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	2000000c 	.word	0x2000000c

08006040 <__libc_init_array>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	4d0d      	ldr	r5, [pc, #52]	@ (8006078 <__libc_init_array+0x38>)
 8006044:	4c0d      	ldr	r4, [pc, #52]	@ (800607c <__libc_init_array+0x3c>)
 8006046:	1b64      	subs	r4, r4, r5
 8006048:	10a4      	asrs	r4, r4, #2
 800604a:	2600      	movs	r6, #0
 800604c:	42a6      	cmp	r6, r4
 800604e:	d109      	bne.n	8006064 <__libc_init_array+0x24>
 8006050:	4d0b      	ldr	r5, [pc, #44]	@ (8006080 <__libc_init_array+0x40>)
 8006052:	4c0c      	ldr	r4, [pc, #48]	@ (8006084 <__libc_init_array+0x44>)
 8006054:	f000 fba6 	bl	80067a4 <_init>
 8006058:	1b64      	subs	r4, r4, r5
 800605a:	10a4      	asrs	r4, r4, #2
 800605c:	2600      	movs	r6, #0
 800605e:	42a6      	cmp	r6, r4
 8006060:	d105      	bne.n	800606e <__libc_init_array+0x2e>
 8006062:	bd70      	pop	{r4, r5, r6, pc}
 8006064:	f855 3b04 	ldr.w	r3, [r5], #4
 8006068:	4798      	blx	r3
 800606a:	3601      	adds	r6, #1
 800606c:	e7ee      	b.n	800604c <__libc_init_array+0xc>
 800606e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006072:	4798      	blx	r3
 8006074:	3601      	adds	r6, #1
 8006076:	e7f2      	b.n	800605e <__libc_init_array+0x1e>
 8006078:	08009370 	.word	0x08009370
 800607c:	08009370 	.word	0x08009370
 8006080:	08009370 	.word	0x08009370
 8006084:	08009374 	.word	0x08009374

08006088 <__retarget_lock_acquire_recursive>:
 8006088:	4770      	bx	lr

0800608a <__retarget_lock_release_recursive>:
 800608a:	4770      	bx	lr

0800608c <_free_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	4605      	mov	r5, r0
 8006090:	2900      	cmp	r1, #0
 8006092:	d041      	beq.n	8006118 <_free_r+0x8c>
 8006094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006098:	1f0c      	subs	r4, r1, #4
 800609a:	2b00      	cmp	r3, #0
 800609c:	bfb8      	it	lt
 800609e:	18e4      	addlt	r4, r4, r3
 80060a0:	f7ff ff82 	bl	8005fa8 <__malloc_lock>
 80060a4:	4a1d      	ldr	r2, [pc, #116]	@ (800611c <_free_r+0x90>)
 80060a6:	6813      	ldr	r3, [r2, #0]
 80060a8:	b933      	cbnz	r3, 80060b8 <_free_r+0x2c>
 80060aa:	6063      	str	r3, [r4, #4]
 80060ac:	6014      	str	r4, [r2, #0]
 80060ae:	4628      	mov	r0, r5
 80060b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060b4:	f7ff bf7e 	b.w	8005fb4 <__malloc_unlock>
 80060b8:	42a3      	cmp	r3, r4
 80060ba:	d908      	bls.n	80060ce <_free_r+0x42>
 80060bc:	6820      	ldr	r0, [r4, #0]
 80060be:	1821      	adds	r1, r4, r0
 80060c0:	428b      	cmp	r3, r1
 80060c2:	bf01      	itttt	eq
 80060c4:	6819      	ldreq	r1, [r3, #0]
 80060c6:	685b      	ldreq	r3, [r3, #4]
 80060c8:	1809      	addeq	r1, r1, r0
 80060ca:	6021      	streq	r1, [r4, #0]
 80060cc:	e7ed      	b.n	80060aa <_free_r+0x1e>
 80060ce:	461a      	mov	r2, r3
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	b10b      	cbz	r3, 80060d8 <_free_r+0x4c>
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	d9fa      	bls.n	80060ce <_free_r+0x42>
 80060d8:	6811      	ldr	r1, [r2, #0]
 80060da:	1850      	adds	r0, r2, r1
 80060dc:	42a0      	cmp	r0, r4
 80060de:	d10b      	bne.n	80060f8 <_free_r+0x6c>
 80060e0:	6820      	ldr	r0, [r4, #0]
 80060e2:	4401      	add	r1, r0
 80060e4:	1850      	adds	r0, r2, r1
 80060e6:	4283      	cmp	r3, r0
 80060e8:	6011      	str	r1, [r2, #0]
 80060ea:	d1e0      	bne.n	80060ae <_free_r+0x22>
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	6053      	str	r3, [r2, #4]
 80060f2:	4408      	add	r0, r1
 80060f4:	6010      	str	r0, [r2, #0]
 80060f6:	e7da      	b.n	80060ae <_free_r+0x22>
 80060f8:	d902      	bls.n	8006100 <_free_r+0x74>
 80060fa:	230c      	movs	r3, #12
 80060fc:	602b      	str	r3, [r5, #0]
 80060fe:	e7d6      	b.n	80060ae <_free_r+0x22>
 8006100:	6820      	ldr	r0, [r4, #0]
 8006102:	1821      	adds	r1, r4, r0
 8006104:	428b      	cmp	r3, r1
 8006106:	bf04      	itt	eq
 8006108:	6819      	ldreq	r1, [r3, #0]
 800610a:	685b      	ldreq	r3, [r3, #4]
 800610c:	6063      	str	r3, [r4, #4]
 800610e:	bf04      	itt	eq
 8006110:	1809      	addeq	r1, r1, r0
 8006112:	6021      	streq	r1, [r4, #0]
 8006114:	6054      	str	r4, [r2, #4]
 8006116:	e7ca      	b.n	80060ae <_free_r+0x22>
 8006118:	bd38      	pop	{r3, r4, r5, pc}
 800611a:	bf00      	nop
 800611c:	20000764 	.word	0x20000764

08006120 <__ssputs_r>:
 8006120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006124:	688e      	ldr	r6, [r1, #8]
 8006126:	461f      	mov	r7, r3
 8006128:	42be      	cmp	r6, r7
 800612a:	680b      	ldr	r3, [r1, #0]
 800612c:	4682      	mov	sl, r0
 800612e:	460c      	mov	r4, r1
 8006130:	4690      	mov	r8, r2
 8006132:	d82d      	bhi.n	8006190 <__ssputs_r+0x70>
 8006134:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006138:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800613c:	d026      	beq.n	800618c <__ssputs_r+0x6c>
 800613e:	6965      	ldr	r5, [r4, #20]
 8006140:	6909      	ldr	r1, [r1, #16]
 8006142:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006146:	eba3 0901 	sub.w	r9, r3, r1
 800614a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800614e:	1c7b      	adds	r3, r7, #1
 8006150:	444b      	add	r3, r9
 8006152:	106d      	asrs	r5, r5, #1
 8006154:	429d      	cmp	r5, r3
 8006156:	bf38      	it	cc
 8006158:	461d      	movcc	r5, r3
 800615a:	0553      	lsls	r3, r2, #21
 800615c:	d527      	bpl.n	80061ae <__ssputs_r+0x8e>
 800615e:	4629      	mov	r1, r5
 8006160:	f7ff fea2 	bl	8005ea8 <_malloc_r>
 8006164:	4606      	mov	r6, r0
 8006166:	b360      	cbz	r0, 80061c2 <__ssputs_r+0xa2>
 8006168:	6921      	ldr	r1, [r4, #16]
 800616a:	464a      	mov	r2, r9
 800616c:	f000 fad6 	bl	800671c <memcpy>
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800617a:	81a3      	strh	r3, [r4, #12]
 800617c:	6126      	str	r6, [r4, #16]
 800617e:	6165      	str	r5, [r4, #20]
 8006180:	444e      	add	r6, r9
 8006182:	eba5 0509 	sub.w	r5, r5, r9
 8006186:	6026      	str	r6, [r4, #0]
 8006188:	60a5      	str	r5, [r4, #8]
 800618a:	463e      	mov	r6, r7
 800618c:	42be      	cmp	r6, r7
 800618e:	d900      	bls.n	8006192 <__ssputs_r+0x72>
 8006190:	463e      	mov	r6, r7
 8006192:	6820      	ldr	r0, [r4, #0]
 8006194:	4632      	mov	r2, r6
 8006196:	4641      	mov	r1, r8
 8006198:	f000 faa6 	bl	80066e8 <memmove>
 800619c:	68a3      	ldr	r3, [r4, #8]
 800619e:	1b9b      	subs	r3, r3, r6
 80061a0:	60a3      	str	r3, [r4, #8]
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	4433      	add	r3, r6
 80061a6:	6023      	str	r3, [r4, #0]
 80061a8:	2000      	movs	r0, #0
 80061aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ae:	462a      	mov	r2, r5
 80061b0:	f000 fac2 	bl	8006738 <_realloc_r>
 80061b4:	4606      	mov	r6, r0
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d1e0      	bne.n	800617c <__ssputs_r+0x5c>
 80061ba:	6921      	ldr	r1, [r4, #16]
 80061bc:	4650      	mov	r0, sl
 80061be:	f7ff ff65 	bl	800608c <_free_r>
 80061c2:	230c      	movs	r3, #12
 80061c4:	f8ca 3000 	str.w	r3, [sl]
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061ce:	81a3      	strh	r3, [r4, #12]
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	e7e9      	b.n	80061aa <__ssputs_r+0x8a>
	...

080061d8 <_svfiprintf_r>:
 80061d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061dc:	4698      	mov	r8, r3
 80061de:	898b      	ldrh	r3, [r1, #12]
 80061e0:	061b      	lsls	r3, r3, #24
 80061e2:	b09d      	sub	sp, #116	@ 0x74
 80061e4:	4607      	mov	r7, r0
 80061e6:	460d      	mov	r5, r1
 80061e8:	4614      	mov	r4, r2
 80061ea:	d510      	bpl.n	800620e <_svfiprintf_r+0x36>
 80061ec:	690b      	ldr	r3, [r1, #16]
 80061ee:	b973      	cbnz	r3, 800620e <_svfiprintf_r+0x36>
 80061f0:	2140      	movs	r1, #64	@ 0x40
 80061f2:	f7ff fe59 	bl	8005ea8 <_malloc_r>
 80061f6:	6028      	str	r0, [r5, #0]
 80061f8:	6128      	str	r0, [r5, #16]
 80061fa:	b930      	cbnz	r0, 800620a <_svfiprintf_r+0x32>
 80061fc:	230c      	movs	r3, #12
 80061fe:	603b      	str	r3, [r7, #0]
 8006200:	f04f 30ff 	mov.w	r0, #4294967295
 8006204:	b01d      	add	sp, #116	@ 0x74
 8006206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620a:	2340      	movs	r3, #64	@ 0x40
 800620c:	616b      	str	r3, [r5, #20]
 800620e:	2300      	movs	r3, #0
 8006210:	9309      	str	r3, [sp, #36]	@ 0x24
 8006212:	2320      	movs	r3, #32
 8006214:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006218:	f8cd 800c 	str.w	r8, [sp, #12]
 800621c:	2330      	movs	r3, #48	@ 0x30
 800621e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80063bc <_svfiprintf_r+0x1e4>
 8006222:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006226:	f04f 0901 	mov.w	r9, #1
 800622a:	4623      	mov	r3, r4
 800622c:	469a      	mov	sl, r3
 800622e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006232:	b10a      	cbz	r2, 8006238 <_svfiprintf_r+0x60>
 8006234:	2a25      	cmp	r2, #37	@ 0x25
 8006236:	d1f9      	bne.n	800622c <_svfiprintf_r+0x54>
 8006238:	ebba 0b04 	subs.w	fp, sl, r4
 800623c:	d00b      	beq.n	8006256 <_svfiprintf_r+0x7e>
 800623e:	465b      	mov	r3, fp
 8006240:	4622      	mov	r2, r4
 8006242:	4629      	mov	r1, r5
 8006244:	4638      	mov	r0, r7
 8006246:	f7ff ff6b 	bl	8006120 <__ssputs_r>
 800624a:	3001      	adds	r0, #1
 800624c:	f000 80a7 	beq.w	800639e <_svfiprintf_r+0x1c6>
 8006250:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006252:	445a      	add	r2, fp
 8006254:	9209      	str	r2, [sp, #36]	@ 0x24
 8006256:	f89a 3000 	ldrb.w	r3, [sl]
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 809f 	beq.w	800639e <_svfiprintf_r+0x1c6>
 8006260:	2300      	movs	r3, #0
 8006262:	f04f 32ff 	mov.w	r2, #4294967295
 8006266:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800626a:	f10a 0a01 	add.w	sl, sl, #1
 800626e:	9304      	str	r3, [sp, #16]
 8006270:	9307      	str	r3, [sp, #28]
 8006272:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006276:	931a      	str	r3, [sp, #104]	@ 0x68
 8006278:	4654      	mov	r4, sl
 800627a:	2205      	movs	r2, #5
 800627c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006280:	484e      	ldr	r0, [pc, #312]	@ (80063bc <_svfiprintf_r+0x1e4>)
 8006282:	f7f9 ffa5 	bl	80001d0 <memchr>
 8006286:	9a04      	ldr	r2, [sp, #16]
 8006288:	b9d8      	cbnz	r0, 80062c2 <_svfiprintf_r+0xea>
 800628a:	06d0      	lsls	r0, r2, #27
 800628c:	bf44      	itt	mi
 800628e:	2320      	movmi	r3, #32
 8006290:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006294:	0711      	lsls	r1, r2, #28
 8006296:	bf44      	itt	mi
 8006298:	232b      	movmi	r3, #43	@ 0x2b
 800629a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800629e:	f89a 3000 	ldrb.w	r3, [sl]
 80062a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80062a4:	d015      	beq.n	80062d2 <_svfiprintf_r+0xfa>
 80062a6:	9a07      	ldr	r2, [sp, #28]
 80062a8:	4654      	mov	r4, sl
 80062aa:	2000      	movs	r0, #0
 80062ac:	f04f 0c0a 	mov.w	ip, #10
 80062b0:	4621      	mov	r1, r4
 80062b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062b6:	3b30      	subs	r3, #48	@ 0x30
 80062b8:	2b09      	cmp	r3, #9
 80062ba:	d94b      	bls.n	8006354 <_svfiprintf_r+0x17c>
 80062bc:	b1b0      	cbz	r0, 80062ec <_svfiprintf_r+0x114>
 80062be:	9207      	str	r2, [sp, #28]
 80062c0:	e014      	b.n	80062ec <_svfiprintf_r+0x114>
 80062c2:	eba0 0308 	sub.w	r3, r0, r8
 80062c6:	fa09 f303 	lsl.w	r3, r9, r3
 80062ca:	4313      	orrs	r3, r2
 80062cc:	9304      	str	r3, [sp, #16]
 80062ce:	46a2      	mov	sl, r4
 80062d0:	e7d2      	b.n	8006278 <_svfiprintf_r+0xa0>
 80062d2:	9b03      	ldr	r3, [sp, #12]
 80062d4:	1d19      	adds	r1, r3, #4
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	9103      	str	r1, [sp, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	bfbb      	ittet	lt
 80062de:	425b      	neglt	r3, r3
 80062e0:	f042 0202 	orrlt.w	r2, r2, #2
 80062e4:	9307      	strge	r3, [sp, #28]
 80062e6:	9307      	strlt	r3, [sp, #28]
 80062e8:	bfb8      	it	lt
 80062ea:	9204      	strlt	r2, [sp, #16]
 80062ec:	7823      	ldrb	r3, [r4, #0]
 80062ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80062f0:	d10a      	bne.n	8006308 <_svfiprintf_r+0x130>
 80062f2:	7863      	ldrb	r3, [r4, #1]
 80062f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80062f6:	d132      	bne.n	800635e <_svfiprintf_r+0x186>
 80062f8:	9b03      	ldr	r3, [sp, #12]
 80062fa:	1d1a      	adds	r2, r3, #4
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	9203      	str	r2, [sp, #12]
 8006300:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006304:	3402      	adds	r4, #2
 8006306:	9305      	str	r3, [sp, #20]
 8006308:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80063cc <_svfiprintf_r+0x1f4>
 800630c:	7821      	ldrb	r1, [r4, #0]
 800630e:	2203      	movs	r2, #3
 8006310:	4650      	mov	r0, sl
 8006312:	f7f9 ff5d 	bl	80001d0 <memchr>
 8006316:	b138      	cbz	r0, 8006328 <_svfiprintf_r+0x150>
 8006318:	9b04      	ldr	r3, [sp, #16]
 800631a:	eba0 000a 	sub.w	r0, r0, sl
 800631e:	2240      	movs	r2, #64	@ 0x40
 8006320:	4082      	lsls	r2, r0
 8006322:	4313      	orrs	r3, r2
 8006324:	3401      	adds	r4, #1
 8006326:	9304      	str	r3, [sp, #16]
 8006328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800632c:	4824      	ldr	r0, [pc, #144]	@ (80063c0 <_svfiprintf_r+0x1e8>)
 800632e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006332:	2206      	movs	r2, #6
 8006334:	f7f9 ff4c 	bl	80001d0 <memchr>
 8006338:	2800      	cmp	r0, #0
 800633a:	d036      	beq.n	80063aa <_svfiprintf_r+0x1d2>
 800633c:	4b21      	ldr	r3, [pc, #132]	@ (80063c4 <_svfiprintf_r+0x1ec>)
 800633e:	bb1b      	cbnz	r3, 8006388 <_svfiprintf_r+0x1b0>
 8006340:	9b03      	ldr	r3, [sp, #12]
 8006342:	3307      	adds	r3, #7
 8006344:	f023 0307 	bic.w	r3, r3, #7
 8006348:	3308      	adds	r3, #8
 800634a:	9303      	str	r3, [sp, #12]
 800634c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800634e:	4433      	add	r3, r6
 8006350:	9309      	str	r3, [sp, #36]	@ 0x24
 8006352:	e76a      	b.n	800622a <_svfiprintf_r+0x52>
 8006354:	fb0c 3202 	mla	r2, ip, r2, r3
 8006358:	460c      	mov	r4, r1
 800635a:	2001      	movs	r0, #1
 800635c:	e7a8      	b.n	80062b0 <_svfiprintf_r+0xd8>
 800635e:	2300      	movs	r3, #0
 8006360:	3401      	adds	r4, #1
 8006362:	9305      	str	r3, [sp, #20]
 8006364:	4619      	mov	r1, r3
 8006366:	f04f 0c0a 	mov.w	ip, #10
 800636a:	4620      	mov	r0, r4
 800636c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006370:	3a30      	subs	r2, #48	@ 0x30
 8006372:	2a09      	cmp	r2, #9
 8006374:	d903      	bls.n	800637e <_svfiprintf_r+0x1a6>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0c6      	beq.n	8006308 <_svfiprintf_r+0x130>
 800637a:	9105      	str	r1, [sp, #20]
 800637c:	e7c4      	b.n	8006308 <_svfiprintf_r+0x130>
 800637e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006382:	4604      	mov	r4, r0
 8006384:	2301      	movs	r3, #1
 8006386:	e7f0      	b.n	800636a <_svfiprintf_r+0x192>
 8006388:	ab03      	add	r3, sp, #12
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	462a      	mov	r2, r5
 800638e:	4b0e      	ldr	r3, [pc, #56]	@ (80063c8 <_svfiprintf_r+0x1f0>)
 8006390:	a904      	add	r1, sp, #16
 8006392:	4638      	mov	r0, r7
 8006394:	f3af 8000 	nop.w
 8006398:	1c42      	adds	r2, r0, #1
 800639a:	4606      	mov	r6, r0
 800639c:	d1d6      	bne.n	800634c <_svfiprintf_r+0x174>
 800639e:	89ab      	ldrh	r3, [r5, #12]
 80063a0:	065b      	lsls	r3, r3, #25
 80063a2:	f53f af2d 	bmi.w	8006200 <_svfiprintf_r+0x28>
 80063a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063a8:	e72c      	b.n	8006204 <_svfiprintf_r+0x2c>
 80063aa:	ab03      	add	r3, sp, #12
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	462a      	mov	r2, r5
 80063b0:	4b05      	ldr	r3, [pc, #20]	@ (80063c8 <_svfiprintf_r+0x1f0>)
 80063b2:	a904      	add	r1, sp, #16
 80063b4:	4638      	mov	r0, r7
 80063b6:	f000 f879 	bl	80064ac <_printf_i>
 80063ba:	e7ed      	b.n	8006398 <_svfiprintf_r+0x1c0>
 80063bc:	08009334 	.word	0x08009334
 80063c0:	0800933e 	.word	0x0800933e
 80063c4:	00000000 	.word	0x00000000
 80063c8:	08006121 	.word	0x08006121
 80063cc:	0800933a 	.word	0x0800933a

080063d0 <_printf_common>:
 80063d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d4:	4616      	mov	r6, r2
 80063d6:	4698      	mov	r8, r3
 80063d8:	688a      	ldr	r2, [r1, #8]
 80063da:	690b      	ldr	r3, [r1, #16]
 80063dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063e0:	4293      	cmp	r3, r2
 80063e2:	bfb8      	it	lt
 80063e4:	4613      	movlt	r3, r2
 80063e6:	6033      	str	r3, [r6, #0]
 80063e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063ec:	4607      	mov	r7, r0
 80063ee:	460c      	mov	r4, r1
 80063f0:	b10a      	cbz	r2, 80063f6 <_printf_common+0x26>
 80063f2:	3301      	adds	r3, #1
 80063f4:	6033      	str	r3, [r6, #0]
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	0699      	lsls	r1, r3, #26
 80063fa:	bf42      	ittt	mi
 80063fc:	6833      	ldrmi	r3, [r6, #0]
 80063fe:	3302      	addmi	r3, #2
 8006400:	6033      	strmi	r3, [r6, #0]
 8006402:	6825      	ldr	r5, [r4, #0]
 8006404:	f015 0506 	ands.w	r5, r5, #6
 8006408:	d106      	bne.n	8006418 <_printf_common+0x48>
 800640a:	f104 0a19 	add.w	sl, r4, #25
 800640e:	68e3      	ldr	r3, [r4, #12]
 8006410:	6832      	ldr	r2, [r6, #0]
 8006412:	1a9b      	subs	r3, r3, r2
 8006414:	42ab      	cmp	r3, r5
 8006416:	dc26      	bgt.n	8006466 <_printf_common+0x96>
 8006418:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800641c:	6822      	ldr	r2, [r4, #0]
 800641e:	3b00      	subs	r3, #0
 8006420:	bf18      	it	ne
 8006422:	2301      	movne	r3, #1
 8006424:	0692      	lsls	r2, r2, #26
 8006426:	d42b      	bmi.n	8006480 <_printf_common+0xb0>
 8006428:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800642c:	4641      	mov	r1, r8
 800642e:	4638      	mov	r0, r7
 8006430:	47c8      	blx	r9
 8006432:	3001      	adds	r0, #1
 8006434:	d01e      	beq.n	8006474 <_printf_common+0xa4>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	6922      	ldr	r2, [r4, #16]
 800643a:	f003 0306 	and.w	r3, r3, #6
 800643e:	2b04      	cmp	r3, #4
 8006440:	bf02      	ittt	eq
 8006442:	68e5      	ldreq	r5, [r4, #12]
 8006444:	6833      	ldreq	r3, [r6, #0]
 8006446:	1aed      	subeq	r5, r5, r3
 8006448:	68a3      	ldr	r3, [r4, #8]
 800644a:	bf0c      	ite	eq
 800644c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006450:	2500      	movne	r5, #0
 8006452:	4293      	cmp	r3, r2
 8006454:	bfc4      	itt	gt
 8006456:	1a9b      	subgt	r3, r3, r2
 8006458:	18ed      	addgt	r5, r5, r3
 800645a:	2600      	movs	r6, #0
 800645c:	341a      	adds	r4, #26
 800645e:	42b5      	cmp	r5, r6
 8006460:	d11a      	bne.n	8006498 <_printf_common+0xc8>
 8006462:	2000      	movs	r0, #0
 8006464:	e008      	b.n	8006478 <_printf_common+0xa8>
 8006466:	2301      	movs	r3, #1
 8006468:	4652      	mov	r2, sl
 800646a:	4641      	mov	r1, r8
 800646c:	4638      	mov	r0, r7
 800646e:	47c8      	blx	r9
 8006470:	3001      	adds	r0, #1
 8006472:	d103      	bne.n	800647c <_printf_common+0xac>
 8006474:	f04f 30ff 	mov.w	r0, #4294967295
 8006478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800647c:	3501      	adds	r5, #1
 800647e:	e7c6      	b.n	800640e <_printf_common+0x3e>
 8006480:	18e1      	adds	r1, r4, r3
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	2030      	movs	r0, #48	@ 0x30
 8006486:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800648a:	4422      	add	r2, r4
 800648c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006490:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006494:	3302      	adds	r3, #2
 8006496:	e7c7      	b.n	8006428 <_printf_common+0x58>
 8006498:	2301      	movs	r3, #1
 800649a:	4622      	mov	r2, r4
 800649c:	4641      	mov	r1, r8
 800649e:	4638      	mov	r0, r7
 80064a0:	47c8      	blx	r9
 80064a2:	3001      	adds	r0, #1
 80064a4:	d0e6      	beq.n	8006474 <_printf_common+0xa4>
 80064a6:	3601      	adds	r6, #1
 80064a8:	e7d9      	b.n	800645e <_printf_common+0x8e>
	...

080064ac <_printf_i>:
 80064ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064b0:	7e0f      	ldrb	r7, [r1, #24]
 80064b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064b4:	2f78      	cmp	r7, #120	@ 0x78
 80064b6:	4691      	mov	r9, r2
 80064b8:	4680      	mov	r8, r0
 80064ba:	460c      	mov	r4, r1
 80064bc:	469a      	mov	sl, r3
 80064be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064c2:	d807      	bhi.n	80064d4 <_printf_i+0x28>
 80064c4:	2f62      	cmp	r7, #98	@ 0x62
 80064c6:	d80a      	bhi.n	80064de <_printf_i+0x32>
 80064c8:	2f00      	cmp	r7, #0
 80064ca:	f000 80d1 	beq.w	8006670 <_printf_i+0x1c4>
 80064ce:	2f58      	cmp	r7, #88	@ 0x58
 80064d0:	f000 80b8 	beq.w	8006644 <_printf_i+0x198>
 80064d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064dc:	e03a      	b.n	8006554 <_printf_i+0xa8>
 80064de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064e2:	2b15      	cmp	r3, #21
 80064e4:	d8f6      	bhi.n	80064d4 <_printf_i+0x28>
 80064e6:	a101      	add	r1, pc, #4	@ (adr r1, 80064ec <_printf_i+0x40>)
 80064e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064ec:	08006545 	.word	0x08006545
 80064f0:	08006559 	.word	0x08006559
 80064f4:	080064d5 	.word	0x080064d5
 80064f8:	080064d5 	.word	0x080064d5
 80064fc:	080064d5 	.word	0x080064d5
 8006500:	080064d5 	.word	0x080064d5
 8006504:	08006559 	.word	0x08006559
 8006508:	080064d5 	.word	0x080064d5
 800650c:	080064d5 	.word	0x080064d5
 8006510:	080064d5 	.word	0x080064d5
 8006514:	080064d5 	.word	0x080064d5
 8006518:	08006657 	.word	0x08006657
 800651c:	08006583 	.word	0x08006583
 8006520:	08006611 	.word	0x08006611
 8006524:	080064d5 	.word	0x080064d5
 8006528:	080064d5 	.word	0x080064d5
 800652c:	08006679 	.word	0x08006679
 8006530:	080064d5 	.word	0x080064d5
 8006534:	08006583 	.word	0x08006583
 8006538:	080064d5 	.word	0x080064d5
 800653c:	080064d5 	.word	0x080064d5
 8006540:	08006619 	.word	0x08006619
 8006544:	6833      	ldr	r3, [r6, #0]
 8006546:	1d1a      	adds	r2, r3, #4
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6032      	str	r2, [r6, #0]
 800654c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006550:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006554:	2301      	movs	r3, #1
 8006556:	e09c      	b.n	8006692 <_printf_i+0x1e6>
 8006558:	6833      	ldr	r3, [r6, #0]
 800655a:	6820      	ldr	r0, [r4, #0]
 800655c:	1d19      	adds	r1, r3, #4
 800655e:	6031      	str	r1, [r6, #0]
 8006560:	0606      	lsls	r6, r0, #24
 8006562:	d501      	bpl.n	8006568 <_printf_i+0xbc>
 8006564:	681d      	ldr	r5, [r3, #0]
 8006566:	e003      	b.n	8006570 <_printf_i+0xc4>
 8006568:	0645      	lsls	r5, r0, #25
 800656a:	d5fb      	bpl.n	8006564 <_printf_i+0xb8>
 800656c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006570:	2d00      	cmp	r5, #0
 8006572:	da03      	bge.n	800657c <_printf_i+0xd0>
 8006574:	232d      	movs	r3, #45	@ 0x2d
 8006576:	426d      	negs	r5, r5
 8006578:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800657c:	4858      	ldr	r0, [pc, #352]	@ (80066e0 <_printf_i+0x234>)
 800657e:	230a      	movs	r3, #10
 8006580:	e011      	b.n	80065a6 <_printf_i+0xfa>
 8006582:	6821      	ldr	r1, [r4, #0]
 8006584:	6833      	ldr	r3, [r6, #0]
 8006586:	0608      	lsls	r0, r1, #24
 8006588:	f853 5b04 	ldr.w	r5, [r3], #4
 800658c:	d402      	bmi.n	8006594 <_printf_i+0xe8>
 800658e:	0649      	lsls	r1, r1, #25
 8006590:	bf48      	it	mi
 8006592:	b2ad      	uxthmi	r5, r5
 8006594:	2f6f      	cmp	r7, #111	@ 0x6f
 8006596:	4852      	ldr	r0, [pc, #328]	@ (80066e0 <_printf_i+0x234>)
 8006598:	6033      	str	r3, [r6, #0]
 800659a:	bf14      	ite	ne
 800659c:	230a      	movne	r3, #10
 800659e:	2308      	moveq	r3, #8
 80065a0:	2100      	movs	r1, #0
 80065a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065a6:	6866      	ldr	r6, [r4, #4]
 80065a8:	60a6      	str	r6, [r4, #8]
 80065aa:	2e00      	cmp	r6, #0
 80065ac:	db05      	blt.n	80065ba <_printf_i+0x10e>
 80065ae:	6821      	ldr	r1, [r4, #0]
 80065b0:	432e      	orrs	r6, r5
 80065b2:	f021 0104 	bic.w	r1, r1, #4
 80065b6:	6021      	str	r1, [r4, #0]
 80065b8:	d04b      	beq.n	8006652 <_printf_i+0x1a6>
 80065ba:	4616      	mov	r6, r2
 80065bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80065c0:	fb03 5711 	mls	r7, r3, r1, r5
 80065c4:	5dc7      	ldrb	r7, [r0, r7]
 80065c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065ca:	462f      	mov	r7, r5
 80065cc:	42bb      	cmp	r3, r7
 80065ce:	460d      	mov	r5, r1
 80065d0:	d9f4      	bls.n	80065bc <_printf_i+0x110>
 80065d2:	2b08      	cmp	r3, #8
 80065d4:	d10b      	bne.n	80065ee <_printf_i+0x142>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	07df      	lsls	r7, r3, #31
 80065da:	d508      	bpl.n	80065ee <_printf_i+0x142>
 80065dc:	6923      	ldr	r3, [r4, #16]
 80065de:	6861      	ldr	r1, [r4, #4]
 80065e0:	4299      	cmp	r1, r3
 80065e2:	bfde      	ittt	le
 80065e4:	2330      	movle	r3, #48	@ 0x30
 80065e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065ee:	1b92      	subs	r2, r2, r6
 80065f0:	6122      	str	r2, [r4, #16]
 80065f2:	f8cd a000 	str.w	sl, [sp]
 80065f6:	464b      	mov	r3, r9
 80065f8:	aa03      	add	r2, sp, #12
 80065fa:	4621      	mov	r1, r4
 80065fc:	4640      	mov	r0, r8
 80065fe:	f7ff fee7 	bl	80063d0 <_printf_common>
 8006602:	3001      	adds	r0, #1
 8006604:	d14a      	bne.n	800669c <_printf_i+0x1f0>
 8006606:	f04f 30ff 	mov.w	r0, #4294967295
 800660a:	b004      	add	sp, #16
 800660c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	f043 0320 	orr.w	r3, r3, #32
 8006616:	6023      	str	r3, [r4, #0]
 8006618:	4832      	ldr	r0, [pc, #200]	@ (80066e4 <_printf_i+0x238>)
 800661a:	2778      	movs	r7, #120	@ 0x78
 800661c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	6831      	ldr	r1, [r6, #0]
 8006624:	061f      	lsls	r7, r3, #24
 8006626:	f851 5b04 	ldr.w	r5, [r1], #4
 800662a:	d402      	bmi.n	8006632 <_printf_i+0x186>
 800662c:	065f      	lsls	r7, r3, #25
 800662e:	bf48      	it	mi
 8006630:	b2ad      	uxthmi	r5, r5
 8006632:	6031      	str	r1, [r6, #0]
 8006634:	07d9      	lsls	r1, r3, #31
 8006636:	bf44      	itt	mi
 8006638:	f043 0320 	orrmi.w	r3, r3, #32
 800663c:	6023      	strmi	r3, [r4, #0]
 800663e:	b11d      	cbz	r5, 8006648 <_printf_i+0x19c>
 8006640:	2310      	movs	r3, #16
 8006642:	e7ad      	b.n	80065a0 <_printf_i+0xf4>
 8006644:	4826      	ldr	r0, [pc, #152]	@ (80066e0 <_printf_i+0x234>)
 8006646:	e7e9      	b.n	800661c <_printf_i+0x170>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	f023 0320 	bic.w	r3, r3, #32
 800664e:	6023      	str	r3, [r4, #0]
 8006650:	e7f6      	b.n	8006640 <_printf_i+0x194>
 8006652:	4616      	mov	r6, r2
 8006654:	e7bd      	b.n	80065d2 <_printf_i+0x126>
 8006656:	6833      	ldr	r3, [r6, #0]
 8006658:	6825      	ldr	r5, [r4, #0]
 800665a:	6961      	ldr	r1, [r4, #20]
 800665c:	1d18      	adds	r0, r3, #4
 800665e:	6030      	str	r0, [r6, #0]
 8006660:	062e      	lsls	r6, r5, #24
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	d501      	bpl.n	800666a <_printf_i+0x1be>
 8006666:	6019      	str	r1, [r3, #0]
 8006668:	e002      	b.n	8006670 <_printf_i+0x1c4>
 800666a:	0668      	lsls	r0, r5, #25
 800666c:	d5fb      	bpl.n	8006666 <_printf_i+0x1ba>
 800666e:	8019      	strh	r1, [r3, #0]
 8006670:	2300      	movs	r3, #0
 8006672:	6123      	str	r3, [r4, #16]
 8006674:	4616      	mov	r6, r2
 8006676:	e7bc      	b.n	80065f2 <_printf_i+0x146>
 8006678:	6833      	ldr	r3, [r6, #0]
 800667a:	1d1a      	adds	r2, r3, #4
 800667c:	6032      	str	r2, [r6, #0]
 800667e:	681e      	ldr	r6, [r3, #0]
 8006680:	6862      	ldr	r2, [r4, #4]
 8006682:	2100      	movs	r1, #0
 8006684:	4630      	mov	r0, r6
 8006686:	f7f9 fda3 	bl	80001d0 <memchr>
 800668a:	b108      	cbz	r0, 8006690 <_printf_i+0x1e4>
 800668c:	1b80      	subs	r0, r0, r6
 800668e:	6060      	str	r0, [r4, #4]
 8006690:	6863      	ldr	r3, [r4, #4]
 8006692:	6123      	str	r3, [r4, #16]
 8006694:	2300      	movs	r3, #0
 8006696:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800669a:	e7aa      	b.n	80065f2 <_printf_i+0x146>
 800669c:	6923      	ldr	r3, [r4, #16]
 800669e:	4632      	mov	r2, r6
 80066a0:	4649      	mov	r1, r9
 80066a2:	4640      	mov	r0, r8
 80066a4:	47d0      	blx	sl
 80066a6:	3001      	adds	r0, #1
 80066a8:	d0ad      	beq.n	8006606 <_printf_i+0x15a>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	079b      	lsls	r3, r3, #30
 80066ae:	d413      	bmi.n	80066d8 <_printf_i+0x22c>
 80066b0:	68e0      	ldr	r0, [r4, #12]
 80066b2:	9b03      	ldr	r3, [sp, #12]
 80066b4:	4298      	cmp	r0, r3
 80066b6:	bfb8      	it	lt
 80066b8:	4618      	movlt	r0, r3
 80066ba:	e7a6      	b.n	800660a <_printf_i+0x15e>
 80066bc:	2301      	movs	r3, #1
 80066be:	4632      	mov	r2, r6
 80066c0:	4649      	mov	r1, r9
 80066c2:	4640      	mov	r0, r8
 80066c4:	47d0      	blx	sl
 80066c6:	3001      	adds	r0, #1
 80066c8:	d09d      	beq.n	8006606 <_printf_i+0x15a>
 80066ca:	3501      	adds	r5, #1
 80066cc:	68e3      	ldr	r3, [r4, #12]
 80066ce:	9903      	ldr	r1, [sp, #12]
 80066d0:	1a5b      	subs	r3, r3, r1
 80066d2:	42ab      	cmp	r3, r5
 80066d4:	dcf2      	bgt.n	80066bc <_printf_i+0x210>
 80066d6:	e7eb      	b.n	80066b0 <_printf_i+0x204>
 80066d8:	2500      	movs	r5, #0
 80066da:	f104 0619 	add.w	r6, r4, #25
 80066de:	e7f5      	b.n	80066cc <_printf_i+0x220>
 80066e0:	08009345 	.word	0x08009345
 80066e4:	08009356 	.word	0x08009356

080066e8 <memmove>:
 80066e8:	4288      	cmp	r0, r1
 80066ea:	b510      	push	{r4, lr}
 80066ec:	eb01 0402 	add.w	r4, r1, r2
 80066f0:	d902      	bls.n	80066f8 <memmove+0x10>
 80066f2:	4284      	cmp	r4, r0
 80066f4:	4623      	mov	r3, r4
 80066f6:	d807      	bhi.n	8006708 <memmove+0x20>
 80066f8:	1e43      	subs	r3, r0, #1
 80066fa:	42a1      	cmp	r1, r4
 80066fc:	d008      	beq.n	8006710 <memmove+0x28>
 80066fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006702:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006706:	e7f8      	b.n	80066fa <memmove+0x12>
 8006708:	4402      	add	r2, r0
 800670a:	4601      	mov	r1, r0
 800670c:	428a      	cmp	r2, r1
 800670e:	d100      	bne.n	8006712 <memmove+0x2a>
 8006710:	bd10      	pop	{r4, pc}
 8006712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800671a:	e7f7      	b.n	800670c <memmove+0x24>

0800671c <memcpy>:
 800671c:	440a      	add	r2, r1
 800671e:	4291      	cmp	r1, r2
 8006720:	f100 33ff 	add.w	r3, r0, #4294967295
 8006724:	d100      	bne.n	8006728 <memcpy+0xc>
 8006726:	4770      	bx	lr
 8006728:	b510      	push	{r4, lr}
 800672a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800672e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006732:	4291      	cmp	r1, r2
 8006734:	d1f9      	bne.n	800672a <memcpy+0xe>
 8006736:	bd10      	pop	{r4, pc}

08006738 <_realloc_r>:
 8006738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800673c:	4607      	mov	r7, r0
 800673e:	4614      	mov	r4, r2
 8006740:	460d      	mov	r5, r1
 8006742:	b921      	cbnz	r1, 800674e <_realloc_r+0x16>
 8006744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006748:	4611      	mov	r1, r2
 800674a:	f7ff bbad 	b.w	8005ea8 <_malloc_r>
 800674e:	b92a      	cbnz	r2, 800675c <_realloc_r+0x24>
 8006750:	f7ff fc9c 	bl	800608c <_free_r>
 8006754:	4625      	mov	r5, r4
 8006756:	4628      	mov	r0, r5
 8006758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800675c:	f000 f81a 	bl	8006794 <_malloc_usable_size_r>
 8006760:	4284      	cmp	r4, r0
 8006762:	4606      	mov	r6, r0
 8006764:	d802      	bhi.n	800676c <_realloc_r+0x34>
 8006766:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800676a:	d8f4      	bhi.n	8006756 <_realloc_r+0x1e>
 800676c:	4621      	mov	r1, r4
 800676e:	4638      	mov	r0, r7
 8006770:	f7ff fb9a 	bl	8005ea8 <_malloc_r>
 8006774:	4680      	mov	r8, r0
 8006776:	b908      	cbnz	r0, 800677c <_realloc_r+0x44>
 8006778:	4645      	mov	r5, r8
 800677a:	e7ec      	b.n	8006756 <_realloc_r+0x1e>
 800677c:	42b4      	cmp	r4, r6
 800677e:	4622      	mov	r2, r4
 8006780:	4629      	mov	r1, r5
 8006782:	bf28      	it	cs
 8006784:	4632      	movcs	r2, r6
 8006786:	f7ff ffc9 	bl	800671c <memcpy>
 800678a:	4629      	mov	r1, r5
 800678c:	4638      	mov	r0, r7
 800678e:	f7ff fc7d 	bl	800608c <_free_r>
 8006792:	e7f1      	b.n	8006778 <_realloc_r+0x40>

08006794 <_malloc_usable_size_r>:
 8006794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006798:	1f18      	subs	r0, r3, #4
 800679a:	2b00      	cmp	r3, #0
 800679c:	bfbc      	itt	lt
 800679e:	580b      	ldrlt	r3, [r1, r0]
 80067a0:	18c0      	addlt	r0, r0, r3
 80067a2:	4770      	bx	lr

080067a4 <_init>:
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a6:	bf00      	nop
 80067a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067aa:	bc08      	pop	{r3}
 80067ac:	469e      	mov	lr, r3
 80067ae:	4770      	bx	lr

080067b0 <_fini>:
 80067b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b2:	bf00      	nop
 80067b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b6:	bc08      	pop	{r3}
 80067b8:	469e      	mov	lr, r3
 80067ba:	4770      	bx	lr
